
micro_mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6b8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cec  0800f89c  0800f89c  0001f89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014588  08014588  0003007c  2**0
                  CONTENTS
  4 .ARM          00000000  08014588  08014588  0003007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014588  08014588  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014588  08014588  00024588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801458c  0801458c  0002458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08014590  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001748  2000007c  0801460c  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200017c4  0801460c  000317c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026cae  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005092  00000000  00000000  00056d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d40  00000000  00000000  0005bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b58  00000000  00000000  0005db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002088b  00000000  00000000  0005f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000248fd  00000000  00000000  0007ff0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af5fb  00000000  00000000  000a4808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153e03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088b4  00000000  00000000  00153e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800f884 	.word	0x0800f884

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000080 	.word	0x20000080
 8000220:	0800f884 	.word	0x0800f884

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	; 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__gedf2>:
 80005ac:	f04f 3cff 	mov.w	ip, #4294967295
 80005b0:	e006      	b.n	80005c0 <__cmpdf2+0x4>
 80005b2:	bf00      	nop

080005b4 <__ledf2>:
 80005b4:	f04f 0c01 	mov.w	ip, #1
 80005b8:	e002      	b.n	80005c0 <__cmpdf2+0x4>
 80005ba:	bf00      	nop

080005bc <__cmpdf2>:
 80005bc:	f04f 0c01 	mov.w	ip, #1
 80005c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005d0:	bf18      	it	ne
 80005d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d6:	d01b      	beq.n	8000610 <__cmpdf2+0x54>
 80005d8:	b001      	add	sp, #4
 80005da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005de:	bf0c      	ite	eq
 80005e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e4:	ea91 0f03 	teqne	r1, r3
 80005e8:	bf02      	ittt	eq
 80005ea:	ea90 0f02 	teqeq	r0, r2
 80005ee:	2000      	moveq	r0, #0
 80005f0:	4770      	bxeq	lr
 80005f2:	f110 0f00 	cmn.w	r0, #0
 80005f6:	ea91 0f03 	teq	r1, r3
 80005fa:	bf58      	it	pl
 80005fc:	4299      	cmppl	r1, r3
 80005fe:	bf08      	it	eq
 8000600:	4290      	cmpeq	r0, r2
 8000602:	bf2c      	ite	cs
 8000604:	17d8      	asrcs	r0, r3, #31
 8000606:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800060a:	f040 0001 	orr.w	r0, r0, #1
 800060e:	4770      	bx	lr
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	d102      	bne.n	8000620 <__cmpdf2+0x64>
 800061a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061e:	d107      	bne.n	8000630 <__cmpdf2+0x74>
 8000620:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000628:	d1d6      	bne.n	80005d8 <__cmpdf2+0x1c>
 800062a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062e:	d0d3      	beq.n	80005d8 <__cmpdf2+0x1c>
 8000630:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_cdrcmple>:
 8000638:	4684      	mov	ip, r0
 800063a:	4610      	mov	r0, r2
 800063c:	4662      	mov	r2, ip
 800063e:	468c      	mov	ip, r1
 8000640:	4619      	mov	r1, r3
 8000642:	4663      	mov	r3, ip
 8000644:	e000      	b.n	8000648 <__aeabi_cdcmpeq>
 8000646:	bf00      	nop

08000648 <__aeabi_cdcmpeq>:
 8000648:	b501      	push	{r0, lr}
 800064a:	f7ff ffb7 	bl	80005bc <__cmpdf2>
 800064e:	2800      	cmp	r0, #0
 8000650:	bf48      	it	mi
 8000652:	f110 0f00 	cmnmi.w	r0, #0
 8000656:	bd01      	pop	{r0, pc}

08000658 <__aeabi_dcmpeq>:
 8000658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800065c:	f7ff fff4 	bl	8000648 <__aeabi_cdcmpeq>
 8000660:	bf0c      	ite	eq
 8000662:	2001      	moveq	r0, #1
 8000664:	2000      	movne	r0, #0
 8000666:	f85d fb08 	ldr.w	pc, [sp], #8
 800066a:	bf00      	nop

0800066c <__aeabi_dcmplt>:
 800066c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000670:	f7ff ffea 	bl	8000648 <__aeabi_cdcmpeq>
 8000674:	bf34      	ite	cc
 8000676:	2001      	movcc	r0, #1
 8000678:	2000      	movcs	r0, #0
 800067a:	f85d fb08 	ldr.w	pc, [sp], #8
 800067e:	bf00      	nop

08000680 <__aeabi_dcmple>:
 8000680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000684:	f7ff ffe0 	bl	8000648 <__aeabi_cdcmpeq>
 8000688:	bf94      	ite	ls
 800068a:	2001      	movls	r0, #1
 800068c:	2000      	movhi	r0, #0
 800068e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000692:	bf00      	nop

08000694 <__aeabi_dcmpge>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff ffce 	bl	8000638 <__aeabi_cdrcmple>
 800069c:	bf94      	ite	ls
 800069e:	2001      	movls	r0, #1
 80006a0:	2000      	movhi	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_dcmpgt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffc4 	bl	8000638 <__aeabi_cdrcmple>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_frsub>:
 80006bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006c0:	e002      	b.n	80006c8 <__addsf3>
 80006c2:	bf00      	nop

080006c4 <__aeabi_fsub>:
 80006c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006c8 <__addsf3>:
 80006c8:	0042      	lsls	r2, r0, #1
 80006ca:	bf1f      	itttt	ne
 80006cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006d0:	ea92 0f03 	teqne	r2, r3
 80006d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006dc:	d06a      	beq.n	80007b4 <__addsf3+0xec>
 80006de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006e6:	bfc1      	itttt	gt
 80006e8:	18d2      	addgt	r2, r2, r3
 80006ea:	4041      	eorgt	r1, r0
 80006ec:	4048      	eorgt	r0, r1
 80006ee:	4041      	eorgt	r1, r0
 80006f0:	bfb8      	it	lt
 80006f2:	425b      	neglt	r3, r3
 80006f4:	2b19      	cmp	r3, #25
 80006f6:	bf88      	it	hi
 80006f8:	4770      	bxhi	lr
 80006fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000702:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000706:	bf18      	it	ne
 8000708:	4240      	negne	r0, r0
 800070a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800070e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000712:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000716:	bf18      	it	ne
 8000718:	4249      	negne	r1, r1
 800071a:	ea92 0f03 	teq	r2, r3
 800071e:	d03f      	beq.n	80007a0 <__addsf3+0xd8>
 8000720:	f1a2 0201 	sub.w	r2, r2, #1
 8000724:	fa41 fc03 	asr.w	ip, r1, r3
 8000728:	eb10 000c 	adds.w	r0, r0, ip
 800072c:	f1c3 0320 	rsb	r3, r3, #32
 8000730:	fa01 f103 	lsl.w	r1, r1, r3
 8000734:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000738:	d502      	bpl.n	8000740 <__addsf3+0x78>
 800073a:	4249      	negs	r1, r1
 800073c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000740:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000744:	d313      	bcc.n	800076e <__addsf3+0xa6>
 8000746:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800074a:	d306      	bcc.n	800075a <__addsf3+0x92>
 800074c:	0840      	lsrs	r0, r0, #1
 800074e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000752:	f102 0201 	add.w	r2, r2, #1
 8000756:	2afe      	cmp	r2, #254	; 0xfe
 8000758:	d251      	bcs.n	80007fe <__addsf3+0x136>
 800075a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800075e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000762:	bf08      	it	eq
 8000764:	f020 0001 	biceq.w	r0, r0, #1
 8000768:	ea40 0003 	orr.w	r0, r0, r3
 800076c:	4770      	bx	lr
 800076e:	0049      	lsls	r1, r1, #1
 8000770:	eb40 0000 	adc.w	r0, r0, r0
 8000774:	3a01      	subs	r2, #1
 8000776:	bf28      	it	cs
 8000778:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800077c:	d2ed      	bcs.n	800075a <__addsf3+0x92>
 800077e:	fab0 fc80 	clz	ip, r0
 8000782:	f1ac 0c08 	sub.w	ip, ip, #8
 8000786:	ebb2 020c 	subs.w	r2, r2, ip
 800078a:	fa00 f00c 	lsl.w	r0, r0, ip
 800078e:	bfaa      	itet	ge
 8000790:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000794:	4252      	neglt	r2, r2
 8000796:	4318      	orrge	r0, r3
 8000798:	bfbc      	itt	lt
 800079a:	40d0      	lsrlt	r0, r2
 800079c:	4318      	orrlt	r0, r3
 800079e:	4770      	bx	lr
 80007a0:	f092 0f00 	teq	r2, #0
 80007a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007a8:	bf06      	itte	eq
 80007aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007ae:	3201      	addeq	r2, #1
 80007b0:	3b01      	subne	r3, #1
 80007b2:	e7b5      	b.n	8000720 <__addsf3+0x58>
 80007b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007bc:	bf18      	it	ne
 80007be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007c2:	d021      	beq.n	8000808 <__addsf3+0x140>
 80007c4:	ea92 0f03 	teq	r2, r3
 80007c8:	d004      	beq.n	80007d4 <__addsf3+0x10c>
 80007ca:	f092 0f00 	teq	r2, #0
 80007ce:	bf08      	it	eq
 80007d0:	4608      	moveq	r0, r1
 80007d2:	4770      	bx	lr
 80007d4:	ea90 0f01 	teq	r0, r1
 80007d8:	bf1c      	itt	ne
 80007da:	2000      	movne	r0, #0
 80007dc:	4770      	bxne	lr
 80007de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007e2:	d104      	bne.n	80007ee <__addsf3+0x126>
 80007e4:	0040      	lsls	r0, r0, #1
 80007e6:	bf28      	it	cs
 80007e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007ec:	4770      	bx	lr
 80007ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007f2:	bf3c      	itt	cc
 80007f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007f8:	4770      	bxcc	lr
 80007fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000802:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000806:	4770      	bx	lr
 8000808:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800080c:	bf16      	itet	ne
 800080e:	4608      	movne	r0, r1
 8000810:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000814:	4601      	movne	r1, r0
 8000816:	0242      	lsls	r2, r0, #9
 8000818:	bf06      	itte	eq
 800081a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800081e:	ea90 0f01 	teqeq	r0, r1
 8000822:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000826:	4770      	bx	lr

08000828 <__aeabi_ui2f>:
 8000828:	f04f 0300 	mov.w	r3, #0
 800082c:	e004      	b.n	8000838 <__aeabi_i2f+0x8>
 800082e:	bf00      	nop

08000830 <__aeabi_i2f>:
 8000830:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000834:	bf48      	it	mi
 8000836:	4240      	negmi	r0, r0
 8000838:	ea5f 0c00 	movs.w	ip, r0
 800083c:	bf08      	it	eq
 800083e:	4770      	bxeq	lr
 8000840:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000844:	4601      	mov	r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	e01c      	b.n	8000886 <__aeabi_l2f+0x2a>

0800084c <__aeabi_ul2f>:
 800084c:	ea50 0201 	orrs.w	r2, r0, r1
 8000850:	bf08      	it	eq
 8000852:	4770      	bxeq	lr
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	e00a      	b.n	8000870 <__aeabi_l2f+0x14>
 800085a:	bf00      	nop

0800085c <__aeabi_l2f>:
 800085c:	ea50 0201 	orrs.w	r2, r0, r1
 8000860:	bf08      	it	eq
 8000862:	4770      	bxeq	lr
 8000864:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000868:	d502      	bpl.n	8000870 <__aeabi_l2f+0x14>
 800086a:	4240      	negs	r0, r0
 800086c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000870:	ea5f 0c01 	movs.w	ip, r1
 8000874:	bf02      	ittt	eq
 8000876:	4684      	moveq	ip, r0
 8000878:	4601      	moveq	r1, r0
 800087a:	2000      	moveq	r0, #0
 800087c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000880:	bf08      	it	eq
 8000882:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000886:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800088a:	fabc f28c 	clz	r2, ip
 800088e:	3a08      	subs	r2, #8
 8000890:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000894:	db10      	blt.n	80008b8 <__aeabi_l2f+0x5c>
 8000896:	fa01 fc02 	lsl.w	ip, r1, r2
 800089a:	4463      	add	r3, ip
 800089c:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a0:	f1c2 0220 	rsb	r2, r2, #32
 80008a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008a8:	fa20 f202 	lsr.w	r2, r0, r2
 80008ac:	eb43 0002 	adc.w	r0, r3, r2
 80008b0:	bf08      	it	eq
 80008b2:	f020 0001 	biceq.w	r0, r0, #1
 80008b6:	4770      	bx	lr
 80008b8:	f102 0220 	add.w	r2, r2, #32
 80008bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80008c0:	f1c2 0220 	rsb	r2, r2, #32
 80008c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008c8:	fa21 f202 	lsr.w	r2, r1, r2
 80008cc:	eb43 0002 	adc.w	r0, r3, r2
 80008d0:	bf08      	it	eq
 80008d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_fmul>:
 80008d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008e0:	bf1e      	ittt	ne
 80008e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008e6:	ea92 0f0c 	teqne	r2, ip
 80008ea:	ea93 0f0c 	teqne	r3, ip
 80008ee:	d06f      	beq.n	80009d0 <__aeabi_fmul+0xf8>
 80008f0:	441a      	add	r2, r3
 80008f2:	ea80 0c01 	eor.w	ip, r0, r1
 80008f6:	0240      	lsls	r0, r0, #9
 80008f8:	bf18      	it	ne
 80008fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008fe:	d01e      	beq.n	800093e <__aeabi_fmul+0x66>
 8000900:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000904:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000908:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800090c:	fba0 3101 	umull	r3, r1, r0, r1
 8000910:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000914:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000918:	bf3e      	ittt	cc
 800091a:	0049      	lslcc	r1, r1, #1
 800091c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000920:	005b      	lslcc	r3, r3, #1
 8000922:	ea40 0001 	orr.w	r0, r0, r1
 8000926:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800092a:	2afd      	cmp	r2, #253	; 0xfd
 800092c:	d81d      	bhi.n	800096a <__aeabi_fmul+0x92>
 800092e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000932:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000936:	bf08      	it	eq
 8000938:	f020 0001 	biceq.w	r0, r0, #1
 800093c:	4770      	bx	lr
 800093e:	f090 0f00 	teq	r0, #0
 8000942:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000946:	bf08      	it	eq
 8000948:	0249      	lsleq	r1, r1, #9
 800094a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800094e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000952:	3a7f      	subs	r2, #127	; 0x7f
 8000954:	bfc2      	ittt	gt
 8000956:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800095a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800095e:	4770      	bxgt	lr
 8000960:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	3a01      	subs	r2, #1
 800096a:	dc5d      	bgt.n	8000a28 <__aeabi_fmul+0x150>
 800096c:	f112 0f19 	cmn.w	r2, #25
 8000970:	bfdc      	itt	le
 8000972:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000976:	4770      	bxle	lr
 8000978:	f1c2 0200 	rsb	r2, r2, #0
 800097c:	0041      	lsls	r1, r0, #1
 800097e:	fa21 f102 	lsr.w	r1, r1, r2
 8000982:	f1c2 0220 	rsb	r2, r2, #32
 8000986:	fa00 fc02 	lsl.w	ip, r0, r2
 800098a:	ea5f 0031 	movs.w	r0, r1, rrx
 800098e:	f140 0000 	adc.w	r0, r0, #0
 8000992:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000996:	bf08      	it	eq
 8000998:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800099c:	4770      	bx	lr
 800099e:	f092 0f00 	teq	r2, #0
 80009a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009a6:	bf02      	ittt	eq
 80009a8:	0040      	lsleq	r0, r0, #1
 80009aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009ae:	3a01      	subeq	r2, #1
 80009b0:	d0f9      	beq.n	80009a6 <__aeabi_fmul+0xce>
 80009b2:	ea40 000c 	orr.w	r0, r0, ip
 80009b6:	f093 0f00 	teq	r3, #0
 80009ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009be:	bf02      	ittt	eq
 80009c0:	0049      	lsleq	r1, r1, #1
 80009c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009c6:	3b01      	subeq	r3, #1
 80009c8:	d0f9      	beq.n	80009be <__aeabi_fmul+0xe6>
 80009ca:	ea41 010c 	orr.w	r1, r1, ip
 80009ce:	e78f      	b.n	80008f0 <__aeabi_fmul+0x18>
 80009d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009d4:	ea92 0f0c 	teq	r2, ip
 80009d8:	bf18      	it	ne
 80009da:	ea93 0f0c 	teqne	r3, ip
 80009de:	d00a      	beq.n	80009f6 <__aeabi_fmul+0x11e>
 80009e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009e4:	bf18      	it	ne
 80009e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009ea:	d1d8      	bne.n	800099e <__aeabi_fmul+0xc6>
 80009ec:	ea80 0001 	eor.w	r0, r0, r1
 80009f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009f4:	4770      	bx	lr
 80009f6:	f090 0f00 	teq	r0, #0
 80009fa:	bf17      	itett	ne
 80009fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a00:	4608      	moveq	r0, r1
 8000a02:	f091 0f00 	teqne	r1, #0
 8000a06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a0a:	d014      	beq.n	8000a36 <__aeabi_fmul+0x15e>
 8000a0c:	ea92 0f0c 	teq	r2, ip
 8000a10:	d101      	bne.n	8000a16 <__aeabi_fmul+0x13e>
 8000a12:	0242      	lsls	r2, r0, #9
 8000a14:	d10f      	bne.n	8000a36 <__aeabi_fmul+0x15e>
 8000a16:	ea93 0f0c 	teq	r3, ip
 8000a1a:	d103      	bne.n	8000a24 <__aeabi_fmul+0x14c>
 8000a1c:	024b      	lsls	r3, r1, #9
 8000a1e:	bf18      	it	ne
 8000a20:	4608      	movne	r0, r1
 8000a22:	d108      	bne.n	8000a36 <__aeabi_fmul+0x15e>
 8000a24:	ea80 0001 	eor.w	r0, r0, r1
 8000a28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000a3e:	4770      	bx	lr

08000a40 <__aeabi_fdiv>:
 8000a40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a48:	bf1e      	ittt	ne
 8000a4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a4e:	ea92 0f0c 	teqne	r2, ip
 8000a52:	ea93 0f0c 	teqne	r3, ip
 8000a56:	d069      	beq.n	8000b2c <__aeabi_fdiv+0xec>
 8000a58:	eba2 0203 	sub.w	r2, r2, r3
 8000a5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a66:	d037      	beq.n	8000ad8 <__aeabi_fdiv+0x98>
 8000a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	bf38      	it	cc
 8000a7c:	005b      	lslcc	r3, r3, #1
 8000a7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a86:	428b      	cmp	r3, r1
 8000a88:	bf24      	itt	cs
 8000a8a:	1a5b      	subcs	r3, r3, r1
 8000a8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a94:	bf24      	itt	cs
 8000a96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aa2:	bf24      	itt	cs
 8000aa4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000aa8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000aac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ab0:	bf24      	itt	cs
 8000ab2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ab6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	bf18      	it	ne
 8000abe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ac2:	d1e0      	bne.n	8000a86 <__aeabi_fdiv+0x46>
 8000ac4:	2afd      	cmp	r2, #253	; 0xfd
 8000ac6:	f63f af50 	bhi.w	800096a <__aeabi_fmul+0x92>
 8000aca:	428b      	cmp	r3, r1
 8000acc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000adc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ae0:	327f      	adds	r2, #127	; 0x7f
 8000ae2:	bfc2      	ittt	gt
 8000ae4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ae8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aec:	4770      	bxgt	lr
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f04f 0300 	mov.w	r3, #0
 8000af6:	3a01      	subs	r2, #1
 8000af8:	e737      	b.n	800096a <__aeabi_fmul+0x92>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b02:	bf02      	ittt	eq
 8000b04:	0040      	lsleq	r0, r0, #1
 8000b06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b0a:	3a01      	subeq	r2, #1
 8000b0c:	d0f9      	beq.n	8000b02 <__aeabi_fdiv+0xc2>
 8000b0e:	ea40 000c 	orr.w	r0, r0, ip
 8000b12:	f093 0f00 	teq	r3, #0
 8000b16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1a:	bf02      	ittt	eq
 8000b1c:	0049      	lsleq	r1, r1, #1
 8000b1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b22:	3b01      	subeq	r3, #1
 8000b24:	d0f9      	beq.n	8000b1a <__aeabi_fdiv+0xda>
 8000b26:	ea41 010c 	orr.w	r1, r1, ip
 8000b2a:	e795      	b.n	8000a58 <__aeabi_fdiv+0x18>
 8000b2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b30:	ea92 0f0c 	teq	r2, ip
 8000b34:	d108      	bne.n	8000b48 <__aeabi_fdiv+0x108>
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	f47f af7d 	bne.w	8000a36 <__aeabi_fmul+0x15e>
 8000b3c:	ea93 0f0c 	teq	r3, ip
 8000b40:	f47f af70 	bne.w	8000a24 <__aeabi_fmul+0x14c>
 8000b44:	4608      	mov	r0, r1
 8000b46:	e776      	b.n	8000a36 <__aeabi_fmul+0x15e>
 8000b48:	ea93 0f0c 	teq	r3, ip
 8000b4c:	d104      	bne.n	8000b58 <__aeabi_fdiv+0x118>
 8000b4e:	024b      	lsls	r3, r1, #9
 8000b50:	f43f af4c 	beq.w	80009ec <__aeabi_fmul+0x114>
 8000b54:	4608      	mov	r0, r1
 8000b56:	e76e      	b.n	8000a36 <__aeabi_fmul+0x15e>
 8000b58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b5c:	bf18      	it	ne
 8000b5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b62:	d1ca      	bne.n	8000afa <__aeabi_fdiv+0xba>
 8000b64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b68:	f47f af5c 	bne.w	8000a24 <__aeabi_fmul+0x14c>
 8000b6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b70:	f47f af3c 	bne.w	80009ec <__aeabi_fmul+0x114>
 8000b74:	e75f      	b.n	8000a36 <__aeabi_fmul+0x15e>
 8000b76:	bf00      	nop

08000b78 <__gesf2>:
 8000b78:	f04f 3cff 	mov.w	ip, #4294967295
 8000b7c:	e006      	b.n	8000b8c <__cmpsf2+0x4>
 8000b7e:	bf00      	nop

08000b80 <__lesf2>:
 8000b80:	f04f 0c01 	mov.w	ip, #1
 8000b84:	e002      	b.n	8000b8c <__cmpsf2+0x4>
 8000b86:	bf00      	nop

08000b88 <__cmpsf2>:
 8000b88:	f04f 0c01 	mov.w	ip, #1
 8000b8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d011      	beq.n	8000bc8 <__cmpsf2+0x40>
 8000ba4:	b001      	add	sp, #4
 8000ba6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000baa:	bf18      	it	ne
 8000bac:	ea90 0f01 	teqne	r0, r1
 8000bb0:	bf58      	it	pl
 8000bb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bb6:	bf88      	it	hi
 8000bb8:	17c8      	asrhi	r0, r1, #31
 8000bba:	bf38      	it	cc
 8000bbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc0:	bf18      	it	ne
 8000bc2:	f040 0001 	orrne.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bcc:	d102      	bne.n	8000bd4 <__cmpsf2+0x4c>
 8000bce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd2:	d105      	bne.n	8000be0 <__cmpsf2+0x58>
 8000bd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bd8:	d1e4      	bne.n	8000ba4 <__cmpsf2+0x1c>
 8000bda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bde:	d0e1      	beq.n	8000ba4 <__cmpsf2+0x1c>
 8000be0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_cfrcmple>:
 8000be8:	4684      	mov	ip, r0
 8000bea:	4608      	mov	r0, r1
 8000bec:	4661      	mov	r1, ip
 8000bee:	e7ff      	b.n	8000bf0 <__aeabi_cfcmpeq>

08000bf0 <__aeabi_cfcmpeq>:
 8000bf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf2:	f7ff ffc9 	bl	8000b88 <__cmpsf2>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	bf48      	it	mi
 8000bfa:	f110 0f00 	cmnmi.w	r0, #0
 8000bfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c00 <__aeabi_fcmpeq>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff fff4 	bl	8000bf0 <__aeabi_cfcmpeq>
 8000c08:	bf0c      	ite	eq
 8000c0a:	2001      	moveq	r0, #1
 8000c0c:	2000      	movne	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_fcmplt>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffea 	bl	8000bf0 <__aeabi_cfcmpeq>
 8000c1c:	bf34      	ite	cc
 8000c1e:	2001      	movcc	r0, #1
 8000c20:	2000      	movcs	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_fcmple>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffe0 	bl	8000bf0 <__aeabi_cfcmpeq>
 8000c30:	bf94      	ite	ls
 8000c32:	2001      	movls	r0, #1
 8000c34:	2000      	movhi	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_fcmpge>:
 8000c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c40:	f7ff ffd2 	bl	8000be8 <__aeabi_cfrcmple>
 8000c44:	bf94      	ite	ls
 8000c46:	2001      	movls	r0, #1
 8000c48:	2000      	movhi	r0, #0
 8000c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fcmpgt>:
 8000c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c54:	f7ff ffc8 	bl	8000be8 <__aeabi_cfrcmple>
 8000c58:	bf34      	ite	cc
 8000c5a:	2001      	movcc	r0, #1
 8000c5c:	2000      	movcs	r0, #0
 8000c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c62:	bf00      	nop

08000c64 <__aeabi_f2uiz>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	d20e      	bcs.n	8000c86 <__aeabi_f2uiz+0x22>
 8000c68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c6c:	d30b      	bcc.n	8000c86 <__aeabi_f2uiz+0x22>
 8000c6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c76:	d409      	bmi.n	8000c8c <__aeabi_f2uiz+0x28>
 8000c78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c80:	fa23 f002 	lsr.w	r0, r3, r2
 8000c84:	4770      	bx	lr
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	4770      	bx	lr
 8000c8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c90:	d101      	bne.n	8000c96 <__aeabi_f2uiz+0x32>
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	d102      	bne.n	8000c9c <__aeabi_f2uiz+0x38>
 8000c96:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9a:	4770      	bx	lr
 8000c9c:	f04f 0000 	mov.w	r0, #0
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <MP3_Init>:
FATFS fs;
FIL mp3File;

/* Initialize VS1053 & Open a file */
bool MP3_Init()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	/* Initialize VS1053 */
    if(!VS1053_Init()) return false;
 8000ca8:	f003 fcec 	bl	8004684 <VS1053_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f083 0301 	eor.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MP3_Init+0x18>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e00a      	b.n	8000cd2 <MP3_Init+0x2e>

    /* Mount SD Card */
    if(f_mount(&fs, "", 0) != FR_OK) return false;
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4906      	ldr	r1, [pc, #24]	; (8000cd8 <MP3_Init+0x34>)
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MP3_Init+0x38>)
 8000cc2:	f00c f881 	bl	800cdc8 <f_mount>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MP3_Init+0x2c>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e000      	b.n	8000cd2 <MP3_Init+0x2e>

    return true;
 8000cd0:	2301      	movs	r3, #1
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0800f89c 	.word	0x0800f89c
 8000cdc:	20000118 	.word	0x20000118

08000ce0 <MP3_Play>:
bool MP3_Play(const char *filename)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	6078      	str	r0, [r7, #4]

	//디스플레이 갱신
	LCD_Play_Flow();
 8000ce8:	f002 faf4 	bl	80032d4 <LCD_Play_Flow>

	//정지 후 재생
	MP3_Stop();
 8000cec:	f000 f860 	bl	8000db0 <MP3_Stop>

	//이전 재생 시간 초기화
	time_Reset();
 8000cf0:	f003 f974 	bl	8003fdc <time_Reset>

	//카운터 시작 및 초기화
	t_ctrl=1;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <MP3_Play+0xb4>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
	t_cnt=0;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <MP3_Play+0xb8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]

	//재생 바 초기화
	LCD_Draw_Box(60,298,180,300,COLOR_WHITE);
 8000d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d0a:	22b4      	movs	r2, #180	; 0xb4
 8000d0c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000d10:	203c      	movs	r0, #60	; 0x3c
 8000d12:	f002 f847 	bl	8002da4 <LCD_Draw_Box>

	if(isPlaying) MP3_Stop();
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MP3_Play+0xbc>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MP3_Play+0x42>
 8000d1e:	f000 f847 	bl	8000db0 <MP3_Stop>

	if(!VS1053_AutoResync()) return false;		/* AutoResync */
 8000d22:	f003 fde5 	bl	80048f0 <VS1053_AutoResync>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f083 0301 	eor.w	r3, r3, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MP3_Play+0x56>
 8000d32:	2300      	movs	r3, #0
 8000d34:	e02a      	b.n	8000d8c <MP3_Play+0xac>
	if(!VS1053_SetDecodeTime(0)) return false;	/* Set decode time */
 8000d36:	2000      	movs	r0, #0
 8000d38:	f003 fdfa 	bl	8004930 <VS1053_SetDecodeTime>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f083 0301 	eor.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MP3_Play+0x6c>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e01f      	b.n	8000d8c <MP3_Play+0xac>

	/* Open file to read */
	if(retSD=f_open(&mp3File, filename, FA_READ) != FR_OK) return false;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <MP3_Play+0xc0>)
 8000d52:	f00c f881 	bl	800ce58 <f_open>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bf14      	ite	ne
 8000d5c:	2301      	movne	r3, #1
 8000d5e:	2300      	moveq	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MP3_Play+0xc4>)
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MP3_Play+0xc4>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MP3_Play+0x94>
 8000d70:	2300      	movs	r3, #0
 8000d72:	e00b      	b.n	8000d8c <MP3_Play+0xac>

	/* Get the file size */
 	mp3FileSize = f_size(&mp3File);
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MP3_Play+0xc0>)
 8000d76:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <MP3_Play+0xc8>)
 8000d7c:	6013      	str	r3, [r2, #0]

	/* Set flags */
	isFileOpen = true;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MP3_Play+0xcc>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
	isPlaying = true;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <MP3_Play+0xbc>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]

    return true;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200000a8 	.word	0x200000a8
 8000d98:	200000a4 	.word	0x200000a4
 8000d9c:	200000a0 	.word	0x200000a0
 8000da0:	2000036c 	.word	0x2000036c
 8000da4:	20001350 	.word	0x20001350
 8000da8:	20000368 	.word	0x20000368
 8000dac:	200000a1 	.word	0x200000a1

08000db0 <MP3_Stop>:
void MP3_Stop(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
	/* Refer to page 49 of VS1053 datasheet */

	//타이머 정지 및 초기화
	t_ctrl=0;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MP3_Stop+0x5c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
	time_Reset();
 8000dbc:	f003 f90e 	bl	8003fdc <time_Reset>

	uint16_t mode;
	VS1053_SendEndFill(2052);	/* send endfill bytes */
 8000dc0:	f640 0004 	movw	r0, #2052	; 0x804
 8000dc4:	f003 fdda 	bl	800497c <VS1053_SendEndFill>
	VS1053_SetMode(0x4808);		/* SM LINE1 | SM SDINEW | SM CANCEL */
 8000dc8:	f644 0008 	movw	r0, #18440	; 0x4808
 8000dcc:	f003 fd62 	bl	8004894 <VS1053_SetMode>
	VS1053_SendEndFill(32);		/* send endfill bytes */
 8000dd0:	2020      	movs	r0, #32
 8000dd2:	f003 fdd3 	bl	800497c <VS1053_SendEndFill>
	HAL_Delay(100);
 8000dd6:	2064      	movs	r0, #100	; 0x64
 8000dd8:	f003 ffa8 	bl	8004d2c <HAL_Delay>
	VS1053_GetMode(&mode);		/* get mode value */
 8000ddc:	1dbb      	adds	r3, r7, #6
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 fd70 	bl	80048c4 <VS1053_GetMode>
	if((mode & 0x08) != 0x0)	/* if SM CANCEL is not clear, soft reset */
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MP3_Stop+0x42>
	{
		VS1053_SoftReset();
 8000dee:	f003 fd3b 	bl	8004868 <VS1053_SoftReset>
	}

	f_close(&mp3File);
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <MP3_Stop+0x60>)
 8000df4:	f00c fc60 	bl	800d6b8 <f_close>
	isPlaying = false;			/* Stop flag */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MP3_Stop+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
	isFileOpen = false;			/* Close flag */
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MP3_Stop+0x68>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200000a8 	.word	0x200000a8
 8000e10:	2000036c 	.word	0x2000036c
 8000e14:	200000a0 	.word	0x200000a0
 8000e18:	200000a1 	.word	0x200000a1

08000e1c <MP3_Pause>:
void MP3_Pause(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	if(isPlaying) isPlaying = false;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MP3_Pause+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <MP3_Pause+0x12>
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <MP3_Pause+0x20>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	t_ctrl=0;
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <MP3_Pause+0x24>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	200000a0 	.word	0x200000a0
 8000e40:	200000a8 	.word	0x200000a8

08000e44 <MP3_Resume>:

void MP3_Resume(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	if(!isPlaying) isPlaying = true;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MP3_Resume+0x28>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	f083 0301 	eor.w	r3, r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <MP3_Resume+0x18>
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <MP3_Resume+0x28>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
	t_ctrl=1;
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <MP3_Resume+0x2c>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200000a0 	.word	0x200000a0
 8000e70:	200000a8 	.word	0x200000a8

08000e74 <MP3_Feeder>:

/* Send mp3 buffer to VS1053 */
//extern char playingtime;
void MP3_Feeder(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	if(!isPlaying || !isFileOpen) return;
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <MP3_Feeder+0xb0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f083 0301 	eor.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d14c      	bne.n	8000f20 <MP3_Feeder+0xac>
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <MP3_Feeder+0xb4>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	f083 0301 	eor.w	r3, r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d145      	bne.n	8000f20 <MP3_Feeder+0xac>

	if(mp3FileSize > BUFFER_SIZE)
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <MP3_Feeder+0xb8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b20      	cmp	r3, #32
 8000e9a:	d913      	bls.n	8000ec4 <MP3_Feeder+0x50>
	{
		/* Fill the buffer */
		f_read(&mp3File, mp3Buffer, BUFFER_SIZE, (void*)&readBytes);
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MP3_Feeder+0xbc>)
 8000e9e:	2220      	movs	r2, #32
 8000ea0:	4924      	ldr	r1, [pc, #144]	; (8000f34 <MP3_Feeder+0xc0>)
 8000ea2:	4825      	ldr	r0, [pc, #148]	; (8000f38 <MP3_Feeder+0xc4>)
 8000ea4:	f00c f9e3 	bl	800d26e <f_read>

		/* Tx buffer */
		VS1053_SdiWrite32( mp3Buffer );
 8000ea8:	4822      	ldr	r0, [pc, #136]	; (8000f34 <MP3_Feeder+0xc0>)
 8000eaa:	f003 fe89 	bl	8004bc0 <VS1053_SdiWrite32>

		/* bytes to send */
		mp3FileSize -= BUFFER_SIZE;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MP3_Feeder+0xb8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3b20      	subs	r3, #32
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <MP3_Feeder+0xb8>)
 8000eb6:	6013      	str	r3, [r2, #0]
		con++;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MP3_Feeder+0xc8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <MP3_Feeder+0xc8>)
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e02e      	b.n	8000f22 <MP3_Feeder+0xae>
	}
	else	//파일을 다읽음
	{
		/* Read left bytes */
		f_read(&mp3File, mp3Buffer, mp3FileSize, (void*)&readBytes);
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MP3_Feeder+0xb8>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MP3_Feeder+0xbc>)
 8000eca:	491a      	ldr	r1, [pc, #104]	; (8000f34 <MP3_Feeder+0xc0>)
 8000ecc:	481a      	ldr	r0, [pc, #104]	; (8000f38 <MP3_Feeder+0xc4>)
 8000ece:	f00c f9ce 	bl	800d26e <f_read>

		/* Tx buffer */
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MP3_Feeder+0xcc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	e015      	b.n	8000f06 <MP3_Feeder+0x92>
		{
			while(!VS1053_SdiWrite(*(mp3Buffer + cnt)));
 8000eda:	bf00      	nop
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MP3_Feeder+0xcc>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MP3_Feeder+0xc0>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 fe3b 	bl	8004b64 <VS1053_SdiWrite>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f0      	bne.n	8000edc <MP3_Feeder+0x68>
		for (cnt = 0; cnt < mp3FileSize; cnt++)
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MP3_Feeder+0xcc>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MP3_Feeder+0xcc>)
 8000f04:	801a      	strh	r2, [r3, #0]
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MP3_Feeder+0xcc>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MP3_Feeder+0xb8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d3e2      	bcc.n	8000eda <MP3_Feeder+0x66>
		}

		/* Stop when played the whole file */
		//재생 타입으로 들어감
		Codex_type(type);
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MP3_Feeder+0xd0>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 f8f5 	bl	8004108 <Codex_type>
 8000f1e:	e000      	b.n	8000f22 <MP3_Feeder+0xae>
	if(!isPlaying || !isFileOpen) return;
 8000f20:	bf00      	nop
	}
}
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000a0 	.word	0x200000a0
 8000f28:	200000a1 	.word	0x200000a1
 8000f2c:	20000368 	.word	0x20000368
 8000f30:	20000114 	.word	0x20000114
 8000f34:	20000348 	.word	0x20000348
 8000f38:	2000036c 	.word	0x2000036c
 8000f3c:	2000009c 	.word	0x2000009c
 8000f40:	20000098 	.word	0x20000098
 8000f44:	20000004 	.word	0x20000004

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000f4e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f003 fe8a 	bl	8004c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f988 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 fc6a 	bl	8001830 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5c:	f000 fc4a 	bl	80017f4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f60:	f000 fc1e 	bl	80017a0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f64:	f000 f9de 	bl	8001324 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000f68:	f000 fa1a 	bl	80013a0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000f6c:	f000 fa56 	bl	800141c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f70:	f000 fadc 	bl	800152c <MX_TIM1_Init>
  MX_SPI1_Init();
 8000f74:	f000 faa4 	bl	80014c0 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000f78:	f000 fd9c 	bl	8001ab4 <MX_FSMC_Init>
  MX_SDIO_SD_Init();
 8000f7c:	f000 fa7c 	bl	8001478 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000f80:	f009 fed4 	bl	800ad2c <MX_FATFS_Init>
  MX_TIM2_Init();
 8000f84:	f000 fb72 	bl	800166c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f88:	f000 fbbc 	bl	8001704 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  //SD카드 마운트
  retSD = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	499d      	ldr	r1, [pc, #628]	; (8001204 <main+0x2bc>)
 8000f90:	489d      	ldr	r0, [pc, #628]	; (8001208 <main+0x2c0>)
 8000f92:	f00b ff19 	bl	800cdc8 <f_mount>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b9c      	ldr	r3, [pc, #624]	; (800120c <main+0x2c4>)
 8000f9c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f003 fec4 	bl	8004d2c <HAL_Delay>
  retSD = f_mkfs((TCHAR const*)SDPath, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4896      	ldr	r0, [pc, #600]	; (8001204 <main+0x2bc>)
 8000faa:	f00c fc75 	bl	800d898 <f_mkfs>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b96      	ldr	r3, [pc, #600]	; (800120c <main+0x2c4>)
 8000fb4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8000fb6:	2064      	movs	r0, #100	; 0x64
 8000fb8:	f003 feb8 	bl	8004d2c <HAL_Delay>

  //SD 카드 파일 읽기
  DIR mydir;
  FILINFO fno;
  if((retSD = f_opendir(&mydir,"0:/"))==FR_OK)
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	4993      	ldr	r1, [pc, #588]	; (8001210 <main+0x2c8>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00c fba0 	bl	800d708 <f_opendir>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b8f      	ldr	r3, [pc, #572]	; (800120c <main+0x2c4>)
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	4b8e      	ldr	r3, [pc, #568]	; (800120c <main+0x2c4>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d12f      	bne.n	8001038 <main+0xf0>
  {
	  while(1)
	  {
		  retSD=f_readdir(&mydir,&fno);
 8000fd8:	463a      	mov	r2, r7
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00c fc13 	bl	800d80c <f_readdir>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b88      	ldr	r3, [pc, #544]	; (800120c <main+0x2c4>)
 8000fec:	701a      	strb	r2, [r3, #0]
		  if(mydir.sect ==  0) break;
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d01d      	beq.n	8001036 <main+0xee>
		  sprintf(filname[filnum],"%s",fno.fname);
 8000ffa:	4b86      	ldr	r3, [pc, #536]	; (8001214 <main+0x2cc>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4a83      	ldr	r2, [pc, #524]	; (8001218 <main+0x2d0>)
 800100a:	1898      	adds	r0, r3, r2
 800100c:	463b      	mov	r3, r7
 800100e:	3309      	adds	r3, #9
 8001010:	461a      	mov	r2, r3
 8001012:	4982      	ldr	r1, [pc, #520]	; (800121c <main+0x2d4>)
 8001014:	f00d fa98 	bl	800e548 <siprintf>
		  filsize[filnum]=fno.fsize;
 8001018:	4b7e      	ldr	r3, [pc, #504]	; (8001214 <main+0x2cc>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	463b      	mov	r3, r7
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a7f      	ldr	r2, [pc, #508]	; (8001220 <main+0x2d8>)
 8001024:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		  filnum++;
 8001028:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <main+0x2cc>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b78      	ldr	r3, [pc, #480]	; (8001214 <main+0x2cc>)
 8001032:	801a      	strh	r2, [r3, #0]
	  {
 8001034:	e7d0      	b.n	8000fd8 <main+0x90>
		  if(mydir.sect ==  0) break;
 8001036:	bf00      	nop
	  }
  }
  sprintf(filname[0],"\0");
 8001038:	497a      	ldr	r1, [pc, #488]	; (8001224 <main+0x2dc>)
 800103a:	4877      	ldr	r0, [pc, #476]	; (8001218 <main+0x2d0>)
 800103c:	f00d fa84 	bl	800e548 <siprintf>

  //음원 파일 선별
  uint16_t len=0;
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 323a 	strh.w	r3, [r7, #570]	; 0x23a
  for(int i=0;i<filnum;i++)
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800104c:	e03f      	b.n	80010ce <main+0x186>
  {
	  len=strlen(filname[i]);
 800104e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4a6f      	ldr	r2, [pc, #444]	; (8001218 <main+0x2d0>)
 800105c:	4413      	add	r3, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f8e0 	bl	8000224 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	f8a7 323a 	strh.w	r3, [r7, #570]	; 0x23a
	  if((filname[i][len-1]=='3')&&(filname[i][len-4]=='.'))
 800106a:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 800106e:	1e59      	subs	r1, r3, #1
 8001070:	4869      	ldr	r0, [pc, #420]	; (8001218 <main+0x2d0>)
 8001072:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4403      	add	r3, r0
 8001080:	440b      	add	r3, r1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b33      	cmp	r3, #51	; 0x33
 8001086:	d11d      	bne.n	80010c4 <main+0x17c>
 8001088:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 800108c:	1f19      	subs	r1, r3, #4
 800108e:	4862      	ldr	r0, [pc, #392]	; (8001218 <main+0x2d0>)
 8001090:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4403      	add	r3, r0
 800109e:	440b      	add	r3, r1
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b2e      	cmp	r3, #46	; 0x2e
 80010a4:	d10e      	bne.n	80010c4 <main+0x17c>
	  {
		  musicfil[musiccnt]=i;
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <main+0x2e0>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80010b0:	b299      	uxth	r1, r3
 80010b2:	4b5e      	ldr	r3, [pc, #376]	; (800122c <main+0x2e4>)
 80010b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  musiccnt++;
 80010b8:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <main+0x2e0>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <main+0x2e0>)
 80010c2:	801a      	strh	r2, [r3, #0]
  for(int i=0;i<filnum;i++)
 80010c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80010c8:	3301      	adds	r3, #1
 80010ca:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80010ce:	4b51      	ldr	r3, [pc, #324]	; (8001214 <main+0x2cc>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80010d8:	4293      	cmp	r3, r2
 80010da:	dbb8      	blt.n	800104e <main+0x106>
	  }
  }

  //LCD 초기화
  LCD_BL_on();
 80010dc:	f001 f9d8 	bl	8002490 <LCD_BL_on>
  LCD_init();
 80010e0:	f001 f9ee 	bl	80024c0 <LCD_init>

  //LCD 초기 화면 구성
  LCD_Draw_Base();
 80010e4:	f001 fee4 	bl	8002eb0 <LCD_Draw_Base>
  LCD_Menu_Set();
 80010e8:	f001 fe96 	bl	8002e18 <LCD_Menu_Set>

  //스피커 사용을 위한 초기화
  MP3_Init();
 80010ec:	f7ff fdda 	bl	8000ca4 <MP3_Init>
  Codex_Speaker_on();
 80010f0:	f002 fb02 	bl	80036f8 <Codex_Speaker_on>
  Codex_Vol(0xf0f0);
 80010f4:	f24f 00f0 	movw	r0, #61680	; 0xf0f0
 80010f8:	f002 faf0 	bl	80036dc <Codex_Vol>

  //실시간 타이머 (10Hz 사용)
  HAL_TIM_Base_Start_IT(&htim3);
 80010fc:	484c      	ldr	r0, [pc, #304]	; (8001230 <main+0x2e8>)
 80010fe:	f007 fdd9 	bl	8008cb4 <HAL_TIM_Base_Start_IT>

  //인터럽트의 결과값을 받아 WHILE로 재생 ( 인터럽트 충돌 및 음원파일 오류를 차단 )
  while (1)
  {
	  //더블 터치 -> TYPE 변경
	  if(two_touch>=2)
 8001102:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <main+0x2ec>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d917      	bls.n	800113a <main+0x1f2>
	  {
		  type=(type+1)%4;
 800110a:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <main+0x2f0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	425a      	negs	r2, r3
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	bf58      	it	pl
 800111c:	4253      	negpl	r3, r2
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b45      	ldr	r3, [pc, #276]	; (8001238 <main+0x2f0>)
 8001122:	701a      	strb	r2, [r3, #0]
		  LCD_Type(type);
 8001124:	4b44      	ldr	r3, [pc, #272]	; (8001238 <main+0x2f0>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fa3b 	bl	80035a4 <LCD_Type>
		  two_touch=0;
 800112e:	4b41      	ldr	r3, [pc, #260]	; (8001234 <main+0x2ec>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
		  change=0;
 8001134:	4b41      	ldr	r3, [pc, #260]	; (800123c <main+0x2f4>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	  }
	  //15초간 동작 없으면 화면 off
	  if(timeout==150)
 800113a:	4b41      	ldr	r3, [pc, #260]	; (8001240 <main+0x2f8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b96      	cmp	r3, #150	; 0x96
 8001140:	d101      	bne.n	8001146 <main+0x1fe>
		  LCD_BL_off();
 8001142:	f001 f9b1 	bl	80024a8 <LCD_BL_off>

	  if(vol_flag==1)
 8001146:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <main+0x2fc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d125      	bne.n	800119a <main+0x252>
	  {
		  //그림이 여러번 그려지는 것을 막기 위해 2로 세팅
		  vol_flag=2;
 800114e:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <main+0x2fc>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]

		  // 볼륨 기본세팅을 모두 으로 하여 볼륨바 제거
		  LCD_Draw_Box(48, 26,70,150, COLOR_WHITE);
 8001154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2396      	movs	r3, #150	; 0x96
 800115c:	2246      	movs	r2, #70	; 0x46
 800115e:	211a      	movs	r1, #26
 8001160:	2030      	movs	r0, #48	; 0x30
 8001162:	f001 fe1f 	bl	8002da4 <LCD_Draw_Box>
		  LCD_Draw_Str(46, 148, "+", COLOR_WHITE, 0);
 8001166:	2300      	movs	r3, #0
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116e:	4a36      	ldr	r2, [pc, #216]	; (8001248 <main+0x300>)
 8001170:	2194      	movs	r1, #148	; 0x94
 8001172:	202e      	movs	r0, #46	; 0x2e
 8001174:	f001 fde4 	bl	8002d40 <LCD_Draw_Str>
		  LCD_Draw_Str(74, 148, "-", COLOR_WHITE, 0);
 8001178:	2300      	movs	r3, #0
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001180:	4a32      	ldr	r2, [pc, #200]	; (800124c <main+0x304>)
 8001182:	2194      	movs	r1, #148	; 0x94
 8001184:	204a      	movs	r0, #74	; 0x4a
 8001186:	f001 fddb 	bl	8002d40 <LCD_Draw_Str>

		  //음표 그림
		  LCD_Draw_Char1(80, 60,COLOR_BLACK,20 ,31);
 800118a:	231f      	movs	r3, #31
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2314      	movs	r3, #20
 8001190:	2205      	movs	r2, #5
 8001192:	213c      	movs	r1, #60	; 0x3c
 8001194:	2050      	movs	r0, #80	; 0x50
 8001196:	f001 fd71 	bl	8002c7c <LCD_Draw_Char1>
	  }

	  //노래 동작 및 1초가 지날때마다 작동
	  if((t_cnt%10==0)&&(check==0))
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <main+0x308>)
 800119c:	6819      	ldr	r1, [r3, #0]
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <main+0x30c>)
 80011a0:	fba3 2301 	umull	r2, r3, r3, r1
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	1aca      	subs	r2, r1, r3
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	d108      	bne.n	80011c6 <main+0x27e>
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <main+0x310>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d104      	bne.n	80011c6 <main+0x27e>
	  {
		  upTime();
 80011bc:	f002 fe28 	bl	8003e10 <upTime>
		  check=1;
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <main+0x310>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
	  }

	  //음악 재생
	  MP3_Feeder();
 80011c6:	f7ff fe55 	bl	8000e74 <MP3_Feeder>

	  //터치
	  if(touch_flag==1)
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <main+0x314>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d104      	bne.n	80011dc <main+0x294>
	  {
		  Touch_read();
 80011d2:	f003 f805 	bl	80041e0 <Touch_read>
		  touch_flag=0;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <main+0x314>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	  }

	  //메뉴에서 노래 선택 위치
	  if(up_flag==1)
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <main+0x318>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d104      	bne.n	80011ee <main+0x2a6>
	  {
		  upclick();
 80011e4:	f002 fbec 	bl	80039c0 <upclick>
		  up_flag=0;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <main+0x318>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
	  }
	  if(down_flag==1)
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <main+0x31c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d185      	bne.n	8001102 <main+0x1ba>
	  {
		  downclick();
 80011f6:	f002 fa95 	bl	8003724 <downclick>
		  down_flag=0;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <main+0x31c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
  {
 8001200:	e77f      	b.n	8001102 <main+0x1ba>
 8001202:	bf00      	nop
 8001204:	20001354 	.word	0x20001354
 8001208:	20001584 	.word	0x20001584
 800120c:	20001350 	.word	0x20001350
 8001210:	0800f8a0 	.word	0x0800f8a0
 8001214:	200000c0 	.word	0x200000c0
 8001218:	20000598 	.word	0x20000598
 800121c:	0800f8a4 	.word	0x0800f8a4
 8001220:	200010e0 	.word	0x200010e0
 8001224:	0800f8a8 	.word	0x0800f8a8
 8001228:	200000be 	.word	0x200000be
 800122c:	20000eac 	.word	0x20000eac
 8001230:	20000e64 	.word	0x20000e64
 8001234:	200000dc 	.word	0x200000dc
 8001238:	20000004 	.word	0x20000004
 800123c:	200000b8 	.word	0x200000b8
 8001240:	200000b4 	.word	0x200000b4
 8001244:	200000bc 	.word	0x200000bc
 8001248:	0800f8ac 	.word	0x0800f8ac
 800124c:	0800f8b0 	.word	0x0800f8b0
 8001250:	200000a4 	.word	0x200000a4
 8001254:	cccccccd 	.word	0xcccccccd
 8001258:	20000000 	.word	0x20000000
 800125c:	20000dc2 	.word	0x20000dc2
 8001260:	200000ac 	.word	0x200000ac
 8001264:	200000b0 	.word	0x200000b0

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b096      	sub	sp, #88	; 0x58
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001272:	2228      	movs	r2, #40	; 0x28
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f00d f91e 	bl	800e4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129c:	2301      	movs	r3, #1
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012aa:	2301      	movs	r3, #1
 80012ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ae:	2302      	movs	r3, #2
 80012b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 ff64 	bl	8006190 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012ce:	f000 fc55 	bl	8001b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f005 f9ce 	bl	8006690 <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012fa:	f000 fc3f 	bl	8001b7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012fe:	2302      	movs	r3, #2
 8001300:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001306:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4618      	mov	r0, r3
 800130c:	f005 fb5a 	bl	80069c4 <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001316:	f000 fc31 	bl	8001b7c <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3758      	adds	r7, #88	; 0x58
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_ADC1_Init+0x74>)
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <MX_ADC1_Init+0x78>)
 8001338:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_ADC1_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_ADC1_Init+0x74>)
 8001342:	2201      	movs	r2, #1
 8001344:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_ADC1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_ADC1_Init+0x74>)
 800134e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001352:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_ADC1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_ADC1_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_ADC1_Init+0x74>)
 8001362:	f003 fd07 	bl	8004d74 <HAL_ADC_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800136c:	f000 fc06 	bl	8001b7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001370:	2310      	movs	r3, #16
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001374:	2301      	movs	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_ADC1_Init+0x74>)
 8001382:	f003 fde1 	bl	8004f48 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800138c:	f000 fbf6 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000f74 	.word	0x20000f74
 800139c:	40012400 	.word	0x40012400

080013a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_ADC3_Init+0x74>)
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <MX_ADC3_Init+0x78>)
 80013b4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_ADC3_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_ADC3_Init+0x74>)
 80013be:	2201      	movs	r2, #1
 80013c0:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_ADC3_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_ADC3_Init+0x74>)
 80013ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013ce:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_ADC3_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_ADC3_Init+0x74>)
 80013d8:	2201      	movs	r2, #1
 80013da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_ADC3_Init+0x74>)
 80013de:	f003 fcc9 	bl	8004d74 <HAL_ADC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 80013e8:	f000 fbc8 	bl	8001b7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013ec:	2306      	movs	r3, #6
 80013ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_ADC3_Init+0x74>)
 80013fe:	f003 fda3 	bl	8004f48 <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 8001408:	f000 fbb8 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000fa4 	.word	0x20000fa4
 8001418:	40013c00 	.word	0x40013c00

0800141c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_I2C1_Init+0x50>)
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <MX_I2C1_Init+0x54>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_I2C1_Init+0x50>)
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <MX_I2C1_Init+0x58>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_I2C1_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_I2C1_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_I2C1_Init+0x50>)
 800143a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <MX_I2C1_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_I2C1_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_I2C1_Init+0x50>)
 800145a:	f004 fd55 	bl	8005f08 <HAL_I2C_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001464:	f000 fb8a 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000dc4 	.word	0x20000dc4
 8001470:	40005400 	.word	0x40005400
 8001474:	000186a0 	.word	0x000186a0

08001478 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_SDIO_SD_Init+0x40>)
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <MX_SDIO_SD_Init+0x44>)
 8001480:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <MX_SDIO_SD_Init+0x40>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_SDIO_SD_Init+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_SDIO_SD_Init+0x40>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_SDIO_SD_Init+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_SDIO_SD_Init+0x40>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <MX_SDIO_SD_Init+0x40>)
 80014a2:	2203      	movs	r2, #3
 80014a4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  HAL_SD_Init(&hsd);
 80014a6:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_SDIO_SD_Init+0x40>)
 80014a8:	f005 fb42 	bl	8006b30 <HAL_SD_Init>
  HAL_SD_InitCard(&hsd);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <MX_SDIO_SD_Init+0x40>)
 80014ae:	f005 fb6f 	bl	8006b90 <HAL_SD_InitCard>
  /* USER CODE END SDIO_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000105c 	.word	0x2000105c
 80014bc:	40018000 	.word	0x40018000

080014c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_SPI1_Init+0x64>)
 80014c6:	4a18      	ldr	r2, [pc, #96]	; (8001528 <MX_SPI1_Init+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <MX_SPI1_Init+0x64>)
 80014cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_SPI1_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_SPI1_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_SPI1_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_SPI1_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_SPI1_Init+0x64>)
 80014ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_SPI1_Init+0x64>)
 80014f4:	2228      	movs	r2, #40	; 0x28
 80014f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <MX_SPI1_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_SPI1_Init+0x64>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <MX_SPI1_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_SPI1_Init+0x64>)
 800150c:	220a      	movs	r2, #10
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_SPI1_Init+0x64>)
 8001512:	f006 ff2b 	bl	800836c <HAL_SPI_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800151c:	f000 fb2e 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20001290 	.word	0x20001290
 8001528:	40013000 	.word	0x40013000

0800152c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b096      	sub	sp, #88	; 0x58
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2220      	movs	r2, #32
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f00c ffa7 	bl	800e4b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <MX_TIM1_Init+0x138>)
 800156c:	4a3e      	ldr	r2, [pc, #248]	; (8001668 <MX_TIM1_Init+0x13c>)
 800156e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001570:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <MX_TIM1_Init+0x138>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <MX_TIM1_Init+0x138>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <MX_TIM1_Init+0x138>)
 800157e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001582:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <MX_TIM1_Init+0x138>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800158a:	4b36      	ldr	r3, [pc, #216]	; (8001664 <MX_TIM1_Init+0x138>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001590:	4b34      	ldr	r3, [pc, #208]	; (8001664 <MX_TIM1_Init+0x138>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001596:	4833      	ldr	r0, [pc, #204]	; (8001664 <MX_TIM1_Init+0x138>)
 8001598:	f007 fb3d 	bl	8008c16 <HAL_TIM_Base_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015a2:	f000 faeb 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015b0:	4619      	mov	r1, r3
 80015b2:	482c      	ldr	r0, [pc, #176]	; (8001664 <MX_TIM1_Init+0x138>)
 80015b4:	f007 fdfc 	bl	80091b0 <HAL_TIM_ConfigClockSource>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015be:	f000 fadd 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015c2:	4828      	ldr	r0, [pc, #160]	; (8001664 <MX_TIM1_Init+0x138>)
 80015c4:	f007 fbd6 	bl	8008d74 <HAL_TIM_PWM_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015ce:	f000 fad5 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015de:	4619      	mov	r1, r3
 80015e0:	4820      	ldr	r0, [pc, #128]	; (8001664 <MX_TIM1_Init+0x138>)
 80015e2:	f008 f993 	bl	800990c <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015ec:	f000 fac6 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f0:	2360      	movs	r3, #96	; 0x60
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001600:	2304      	movs	r3, #4
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	2200      	movs	r2, #0
 8001612:	4619      	mov	r1, r3
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <MX_TIM1_Init+0x138>)
 8001616:	f007 fd0d 	bl	8009034 <HAL_TIM_PWM_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001620:	f000 faac 	bl	8001b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM1_Init+0x138>)
 8001648:	f008 f9cc 	bl	80099e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001652:	f000 fa93 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001656:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM1_Init+0x138>)
 8001658:	f000 fc86 	bl	8001f68 <HAL_TIM_MspPostInit>

}
 800165c:	bf00      	nop
 800165e:	3758      	adds	r7, #88	; 0x58
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20001014 	.word	0x20001014
 8001668:	40012c00 	.word	0x40012c00

0800166c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM2_Init+0x94>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_TIM2_Init+0x94>)
 8001692:	2248      	movs	r2, #72	; 0x48
 8001694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_TIM2_Init+0x94>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 125;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_TIM2_Init+0x94>)
 800169e:	227d      	movs	r2, #125	; 0x7d
 80016a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_TIM2_Init+0x94>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_TIM2_Init+0x94>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ae:	4814      	ldr	r0, [pc, #80]	; (8001700 <MX_TIM2_Init+0x94>)
 80016b0:	f007 fab1 	bl	8008c16 <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80016ba:	f000 fa5f 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_TIM2_Init+0x94>)
 80016cc:	f007 fd70 	bl	80091b0 <HAL_TIM_ConfigClockSource>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80016d6:	f000 fa51 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e2:	463b      	mov	r3, r7
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_TIM2_Init+0x94>)
 80016e8:	f008 f910 	bl	800990c <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80016f2:	f000 fa43 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200012e8 	.word	0x200012e8

08001704 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	463b      	mov	r3, r7
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_TIM3_Init+0x94>)
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <MX_TIM3_Init+0x98>)
 8001724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_TIM3_Init+0x94>)
 8001728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800172c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_TIM3_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7190;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_TIM3_Init+0x94>)
 8001736:	f641 4216 	movw	r2, #7190	; 0x1c16
 800173a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_TIM3_Init+0x94>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_TIM3_Init+0x94>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <MX_TIM3_Init+0x94>)
 800174a:	f007 fa64 	bl	8008c16 <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001754:	f000 fa12 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <MX_TIM3_Init+0x94>)
 8001766:	f007 fd23 	bl	80091b0 <HAL_TIM_ConfigClockSource>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001770:	f000 fa04 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800177c:	463b      	mov	r3, r7
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM3_Init+0x94>)
 8001782:	f008 f8c3 	bl	800990c <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800178c:	f000 f9f6 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000e64 	.word	0x20000e64
 800179c:	40000400 	.word	0x40000400

080017a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_USART1_UART_Init+0x50>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017d8:	f008 f967 	bl	8009aaa <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017e2:	f000 f9cb 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000fd4 	.word	0x20000fd4
 80017f0:	40013800 	.word	0x40013800

080017f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_DMA_Init+0x38>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <MX_DMA_Init+0x38>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6153      	str	r3, [r2, #20]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_DMA_Init+0x38>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	203b      	movs	r0, #59	; 0x3b
 8001818:	f003 fd9f 	bl	800535a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 800181c:	203b      	movs	r0, #59	; 0x3b
 800181e:	f003 fdb8 	bl	8005392 <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001844:	4b93      	ldr	r3, [pc, #588]	; (8001a94 <MX_GPIO_Init+0x264>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a92      	ldr	r2, [pc, #584]	; (8001a94 <MX_GPIO_Init+0x264>)
 800184a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b90      	ldr	r3, [pc, #576]	; (8001a94 <MX_GPIO_Init+0x264>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185c:	4b8d      	ldr	r3, [pc, #564]	; (8001a94 <MX_GPIO_Init+0x264>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a8c      	ldr	r2, [pc, #560]	; (8001a94 <MX_GPIO_Init+0x264>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b8a      	ldr	r3, [pc, #552]	; (8001a94 <MX_GPIO_Init+0x264>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001874:	4b87      	ldr	r3, [pc, #540]	; (8001a94 <MX_GPIO_Init+0x264>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a86      	ldr	r2, [pc, #536]	; (8001a94 <MX_GPIO_Init+0x264>)
 800187a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b84      	ldr	r3, [pc, #528]	; (8001a94 <MX_GPIO_Init+0x264>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <MX_GPIO_Init+0x264>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a80      	ldr	r2, [pc, #512]	; (8001a94 <MX_GPIO_Init+0x264>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <MX_GPIO_Init+0x264>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <MX_GPIO_Init+0x264>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a7a      	ldr	r2, [pc, #488]	; (8001a94 <MX_GPIO_Init+0x264>)
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b78      	ldr	r3, [pc, #480]	; (8001a94 <MX_GPIO_Init+0x264>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018bc:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <MX_GPIO_Init+0x264>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a74      	ldr	r2, [pc, #464]	; (8001a94 <MX_GPIO_Init+0x264>)
 80018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <MX_GPIO_Init+0x264>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d4:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <MX_GPIO_Init+0x264>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a6e      	ldr	r2, [pc, #440]	; (8001a94 <MX_GPIO_Init+0x264>)
 80018da:	f043 0320 	orr.w	r3, r3, #32
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b6c      	ldr	r3, [pc, #432]	; (8001a94 <MX_GPIO_Init+0x264>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|VS_RST_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2160      	movs	r1, #96	; 0x60
 80018f0:	4869      	ldr	r0, [pc, #420]	; (8001a98 <MX_GPIO_Init+0x268>)
 80018f2:	f004 face 	bl	8005e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, VS_XDCS_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80018fc:	4867      	ldr	r0, [pc, #412]	; (8001a9c <MX_GPIO_Init+0x26c>)
 80018fe:	f004 fac8 	bl	8005e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, VS_XCS_Pin|T_CS_Pin, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 6108 	mov.w	r1, #2176	; 0x880
 8001908:	4864      	ldr	r0, [pc, #400]	; (8001a9c <MX_GPIO_Init+0x26c>)
 800190a:	f004 fac2 	bl	8005e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|T_SCL_Pin|JOYPAD_LAT_Pin|BEEP_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f640 1103 	movw	r1, #2307	; 0x903
 8001914:	4862      	ldr	r0, [pc, #392]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001916:	f004 fabc 	bl	8005e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOYPAD_CLK_GPIO_Port, JOYPAD_CLK_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2108      	movs	r1, #8
 800191e:	4861      	ldr	r0, [pc, #388]	; (8001aa4 <MX_GPIO_Init+0x274>)
 8001920:	f004 fab7 	bl	8005e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2120      	movs	r1, #32
 8001928:	485d      	ldr	r0, [pc, #372]	; (8001aa0 <MX_GPIO_Init+0x270>)
 800192a:	f004 fab2 	bl	8005e92 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY2_Pin KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin|KEY1_Pin|KEY0_Pin;
 800192e:	231c      	movs	r3, #28
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001932:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <MX_GPIO_Init+0x278>)
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001936:	2301      	movs	r3, #1
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	4619      	mov	r1, r3
 8001940:	4855      	ldr	r0, [pc, #340]	; (8001a98 <MX_GPIO_Init+0x268>)
 8001942:	f004 f8fb 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 VS_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|VS_RST_Pin;
 8001946:	2360      	movs	r3, #96	; 0x60
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2302      	movs	r3, #2
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	4619      	mov	r1, r3
 800195c:	484e      	ldr	r0, [pc, #312]	; (8001a98 <MX_GPIO_Init+0x268>)
 800195e:	f004 f8ed 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : VS_DERQ_Pin */
  GPIO_InitStruct.Pin = VS_DERQ_Pin;
 8001962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VS_DERQ_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 0320 	add.w	r3, r7, #32
 8001974:	4619      	mov	r1, r3
 8001976:	484d      	ldr	r0, [pc, #308]	; (8001aac <MX_GPIO_Init+0x27c>)
 8001978:	f004 f8e0 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VS_XDCS_Pin VS_XCS_Pin T_MOSI_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = VS_XDCS_Pin|VS_XCS_Pin|T_MOSI_Pin|T_CS_Pin;
 800197c:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 8001980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2302      	movs	r3, #2
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	4619      	mov	r1, r3
 8001994:	4841      	ldr	r0, [pc, #260]	; (8001a9c <MX_GPIO_Init+0x26c>)
 8001996:	f004 f8d1 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PEN_Pin */
  GPIO_InitStruct.Pin = PEN_Pin;
 800199a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019a0:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <MX_GPIO_Init+0x278>)
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PEN_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 0320 	add.w	r3, r7, #32
 80019ac:	4619      	mov	r1, r3
 80019ae:	483b      	ldr	r0, [pc, #236]	; (8001a9c <MX_GPIO_Init+0x26c>)
 80019b0:	f004 f8c4 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b4:	2301      	movs	r3, #1
 80019b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019bc:	2301      	movs	r3, #1
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0320 	add.w	r3, r7, #32
 80019c4:	4619      	mov	r1, r3
 80019c6:	483a      	ldr	r0, [pc, #232]	; (8001ab0 <MX_GPIO_Init+0x280>)
 80019c8:	f004 f8b8 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin T_SCL_Pin JOYPAD_LAT_Pin LED0_Pin
                           BEEP_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|T_SCL_Pin|JOYPAD_LAT_Pin|LED0_Pin
 80019cc:	f640 1323 	movw	r3, #2339	; 0x923
 80019d0:	623b      	str	r3, [r7, #32]
                          |BEEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2302      	movs	r3, #2
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	482e      	ldr	r0, [pc, #184]	; (8001aa0 <MX_GPIO_Init+0x270>)
 80019e6:	f004 f8a9 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_MISO_Pin JOYPAD_DAT_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin|JOYPAD_DAT_Pin;
 80019ea:	f240 4304 	movw	r3, #1028	; 0x404
 80019ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	4619      	mov	r1, r3
 80019fe:	4828      	ldr	r0, [pc, #160]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001a00:	f004 f89c 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOYPAD_CLK_Pin */
  GPIO_InitStruct.Pin = JOYPAD_CLK_Pin;
 8001a04:	2308      	movs	r3, #8
 8001a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2302      	movs	r3, #2
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOYPAD_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4822      	ldr	r0, [pc, #136]	; (8001aa4 <MX_GPIO_Init+0x274>)
 8001a1c:	f004 f88e 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : REMOTE_IN_Pin */
  GPIO_InitStruct.Pin = REMOTE_IN_Pin;
 8001a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <MX_GPIO_Init+0x278>)
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(REMOTE_IN_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0320 	add.w	r3, r7, #32
 8001a32:	4619      	mov	r1, r3
 8001a34:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <MX_GPIO_Init+0x270>)
 8001a36:	f004 f881 	bl	8005b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2103      	movs	r1, #3
 8001a3e:	2008      	movs	r0, #8
 8001a40:	f003 fc8b 	bl	800535a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a44:	2008      	movs	r0, #8
 8001a46:	f003 fca4 	bl	8005392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2103      	movs	r1, #3
 8001a4e:	2009      	movs	r0, #9
 8001a50:	f003 fc83 	bl	800535a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a54:	2009      	movs	r0, #9
 8001a56:	f003 fc9c 	bl	8005392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f003 fc7b 	bl	800535a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a64:	200a      	movs	r0, #10
 8001a66:	f003 fc94 	bl	8005392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2017      	movs	r0, #23
 8001a70:	f003 fc73 	bl	800535a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a74:	2017      	movs	r0, #23
 8001a76:	f003 fc8c 	bl	8005392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2028      	movs	r0, #40	; 0x28
 8001a80:	f003 fc6b 	bl	800535a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a84:	2028      	movs	r0, #40	; 0x28
 8001a86:	f003 fc84 	bl	8005392 <HAL_NVIC_EnableIRQ>

}
 8001a8a:	bf00      	nop
 8001a8c:	3730      	adds	r7, #48	; 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40011800 	.word	0x40011800
 8001a9c:	40011c00 	.word	0x40011c00
 8001aa0:	40010c00 	.word	0x40010c00
 8001aa4:	40011400 	.word	0x40011400
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40010800 	.word	0x40010800

08001ab4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	615a      	str	r2, [r3, #20]
 8001aca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001ace:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001ad2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001ad6:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <MX_FSMC_Init+0xc0>)
 8001ad8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8001ada:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001adc:	2206      	movs	r2, #6
 8001ade:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001aee:	2210      	movs	r2, #16
 8001af0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001b0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 6;
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001b2e:	230f      	movs	r3, #15
 8001b30:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 26;
 8001b32:	231a      	movs	r3, #26
 8001b34:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001b3e:	2311      	movs	r3, #17
 8001b40:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4808      	ldr	r0, [pc, #32]	; (8001b70 <MX_FSMC_Init+0xbc>)
 8001b4e:	f007 f815 	bl	8008b7c <HAL_SRAM_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001b58:	f000 f810 	bl	8001b7c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_FSMC_Init+0xc4>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <MX_FSMC_Init+0xc4>)
 8001b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b66:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000e1c 	.word	0x20000e1c
 8001b74:	a0000104 	.word	0xa0000104
 8001b78:	40010000 	.word	0x40010000

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <HAL_MspInit+0x54>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_MspInit+0x54>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_MspInit+0x54>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_MspInit+0x54>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <HAL_MspInit+0x54>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_MspInit+0x54>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_MspInit+0x58>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_MspInit+0x58>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000

08001be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0318 	add.w	r3, r7, #24
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_ADC_MspInit+0x94>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d10c      	bne.n	8001c1e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_ADC_MspInit+0x98>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_ADC_MspInit+0x98>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_ADC_MspInit+0x98>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c1c:	e027      	b.n	8001c6e <HAL_ADC_MspInit+0x8a>
  else if(hadc->Instance==ADC3)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <HAL_ADC_MspInit+0x9c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d122      	bne.n	8001c6e <HAL_ADC_MspInit+0x8a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_ADC_MspInit+0x98>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_ADC_MspInit+0x98>)
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_ADC_MspInit+0x98>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_ADC_MspInit+0x98>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <HAL_ADC_MspInit+0x98>)
 8001c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_ADC_MspInit+0x98>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIGHT_SENSOR_Pin;
 8001c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIGHT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4806      	ldr	r0, [pc, #24]	; (8001c84 <HAL_ADC_MspInit+0xa0>)
 8001c6a:	f003 ff67 	bl	8005b3c <HAL_GPIO_Init>
}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40012400 	.word	0x40012400
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40013c00 	.word	0x40013c00
 8001c84:	40011c00 	.word	0x40011c00

08001c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <HAL_I2C_MspInit+0x70>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d123      	bne.n	8001cf0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_I2C_MspInit+0x74>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_I2C_MspInit+0x74>)
 8001cae:	f043 0308 	orr.w	r3, r3, #8
 8001cb2:	6193      	str	r3, [r2, #24]
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_I2C_MspInit+0x74>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480b      	ldr	r0, [pc, #44]	; (8001d00 <HAL_I2C_MspInit+0x78>)
 8001cd4:	f003 ff32 	bl	8005b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_I2C_MspInit+0x74>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_I2C_MspInit+0x74>)
 8001cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ce2:	61d3      	str	r3, [r2, #28]
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_I2C_MspInit+0x74>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40005400 	.word	0x40005400
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010c00 	.word	0x40010c00

08001d04 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a3d      	ldr	r2, [pc, #244]	; (8001e14 <HAL_SD_MspInit+0x110>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d172      	bne.n	8001e0a <HAL_SD_MspInit+0x106>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d24:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <HAL_SD_MspInit+0x114>)
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <HAL_SD_MspInit+0x114>)
 8001d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2e:	6153      	str	r3, [r2, #20]
 8001d30:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <HAL_SD_MspInit+0x114>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_SD_MspInit+0x114>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a35      	ldr	r2, [pc, #212]	; (8001e18 <HAL_SD_MspInit+0x114>)
 8001d42:	f043 0310 	orr.w	r3, r3, #16
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <HAL_SD_MspInit+0x114>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_SD_MspInit+0x114>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <HAL_SD_MspInit+0x114>)
 8001d5a:	f043 0320 	orr.w	r3, r3, #32
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_SD_MspInit+0x114>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d6c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d70:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4826      	ldr	r0, [pc, #152]	; (8001e1c <HAL_SD_MspInit+0x118>)
 8001d82:	f003 fedb 	bl	8005b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d86:	2304      	movs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d92:	f107 0318 	add.w	r3, r7, #24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4821      	ldr	r0, [pc, #132]	; (8001e20 <HAL_SD_MspInit+0x11c>)
 8001d9a:	f003 fecf 	bl	8005b3c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO Init */
    hdma_sdio.Instance = DMA2_Channel4;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <HAL_SD_MspInit+0x124>)
 8001da2:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbc:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc4:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.Mode = DMA_NORMAL;
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 8001dd2:	4814      	ldr	r0, [pc, #80]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001dd4:	f003 faf8 	bl	80053c8 <HAL_DMA_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_SD_MspInit+0xde>
    {
      Error_Handler();
 8001dde:	f7ff fecd 	bl	8001b7c <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <HAL_SD_MspInit+0x120>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6253      	str	r3, [r2, #36]	; 0x24

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2031      	movs	r0, #49	; 0x31
 8001e00:	f003 faab 	bl	800535a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001e04:	2031      	movs	r0, #49	; 0x31
 8001e06:	f003 fac4 	bl	8005392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40018000 	.word	0x40018000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40011000 	.word	0x40011000
 8001e20:	40011400 	.word	0x40011400
 8001e24:	20000d74 	.word	0x20000d74
 8001e28:	40020444 	.word	0x40020444

08001e2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <HAL_SPI_MspInit+0x88>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d12f      	bne.n	8001eac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_SPI_MspInit+0x8c>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_SPI_MspInit+0x8c>)
 8001e52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_SPI_MspInit+0x8c>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_SPI_MspInit+0x8c>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <HAL_SPI_MspInit+0x8c>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_SPI_MspInit+0x8c>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e7c:	23a0      	movs	r3, #160	; 0xa0
 8001e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480b      	ldr	r0, [pc, #44]	; (8001ebc <HAL_SPI_MspInit+0x90>)
 8001e90:	f003 fe54 	bl	8005b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <HAL_SPI_MspInit+0x90>)
 8001ea8:	f003 fe48 	bl	8005b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40013000 	.word	0x40013000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40010800 	.word	0x40010800

08001ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <HAL_TIM_Base_MspInit+0x9c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10c      	bne.n	8001eec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_TIM_Base_MspInit+0xa0>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <HAL_TIM_Base_MspInit+0xa0>)
 8001ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001edc:	6193      	str	r3, [r2, #24]
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_TIM_Base_MspInit+0xa0>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eea:	e032      	b.n	8001f52 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef4:	d114      	bne.n	8001f20 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_TIM_Base_MspInit+0xa0>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <HAL_TIM_Base_MspInit+0xa0>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	61d3      	str	r3, [r2, #28]
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_TIM_Base_MspInit+0xa0>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	201c      	movs	r0, #28
 8001f14:	f003 fa21 	bl	800535a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f18:	201c      	movs	r0, #28
 8001f1a:	f003 fa3a 	bl	8005392 <HAL_NVIC_EnableIRQ>
}
 8001f1e:	e018      	b.n	8001f52 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_TIM_Base_MspInit+0xa4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d113      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_TIM_Base_MspInit+0xa0>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_TIM_Base_MspInit+0xa0>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_TIM_Base_MspInit+0xa0>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	201d      	movs	r0, #29
 8001f48:	f003 fa07 	bl	800535a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f4c:	201d      	movs	r0, #29
 8001f4e:	f003 fa20 	bl	8005392 <HAL_NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40000400 	.word	0x40000400

08001f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_TIM_MspPostInit+0x5c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d118      	bne.n	8001fba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_TIM_MspPostInit+0x60>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <HAL_TIM_MspPostInit+0x60>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_TIM_MspPostInit+0x60>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <HAL_TIM_MspPostInit+0x64>)
 8001fb6:	f003 fdc1 	bl	8005b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40012c00 	.word	0x40012c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010800 	.word	0x40010800

08001fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a20      	ldr	r2, [pc, #128]	; (800206c <HAL_UART_MspInit+0x9c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d139      	bne.n	8002064 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <HAL_UART_MspInit+0xa0>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <HAL_UART_MspInit+0xa0>)
 8001ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_UART_MspInit+0xa0>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_UART_MspInit+0xa0>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a18      	ldr	r2, [pc, #96]	; (8002070 <HAL_UART_MspInit+0xa0>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_UART_MspInit+0xa0>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002024:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	4619      	mov	r1, r3
 8002034:	480f      	ldr	r0, [pc, #60]	; (8002074 <HAL_UART_MspInit+0xa4>)
 8002036:	f003 fd81 	bl	8005b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800203a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4619      	mov	r1, r3
 800204e:	4809      	ldr	r0, [pc, #36]	; (8002074 <HAL_UART_MspInit+0xa4>)
 8002050:	f003 fd74 	bl	8005b3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2100      	movs	r1, #0
 8002058:	2025      	movs	r0, #37	; 0x25
 800205a:	f003 f97e 	bl	800535a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800205e:	2025      	movs	r0, #37	; 0x25
 8002060:	f003 f997 	bl	8005392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40013800 	.word	0x40013800
 8002070:	40021000 	.word	0x40021000
 8002074:	40010800 	.word	0x40010800

08002078 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <HAL_FSMC_MspInit+0x94>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d136      	bne.n	8002102 <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_FSMC_MspInit+0x94>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_FSMC_MspInit+0x98>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_FSMC_MspInit+0x98>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6153      	str	r3, [r2, #20]
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_FSMC_MspInit+0x98>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 80020b2:	f241 0301 	movw	r3, #4097	; 0x1001
 80020b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	4619      	mov	r1, r3
 80020c6:	4813      	ldr	r0, [pc, #76]	; (8002114 <HAL_FSMC_MspInit+0x9c>)
 80020c8:	f003 fd38 	bl	8005b3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80020cc:	f64f 7380 	movw	r3, #65408	; 0xff80
 80020d0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	4619      	mov	r1, r3
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <HAL_FSMC_MspInit+0xa0>)
 80020e2:	f003 fd2b 	bl	8005b3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80020e6:	f24c 7333 	movw	r3, #50995	; 0xc733
 80020ea:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	4619      	mov	r1, r3
 80020fa:	4808      	ldr	r0, [pc, #32]	; (800211c <HAL_FSMC_MspInit+0xa4>)
 80020fc:	f003 fd1e 	bl	8005b3c <HAL_GPIO_Init>
 8002100:	e000      	b.n	8002104 <HAL_FSMC_MspInit+0x8c>
    return;
 8002102:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200000c4 	.word	0x200000c4
 8002110:	40021000 	.word	0x40021000
 8002114:	40012000 	.word	0x40012000
 8002118:	40011800 	.word	0x40011800
 800211c:	40011400 	.word	0x40011400

08002120 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002128:	f7ff ffa6 	bl	8002078 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <NMI_Handler+0x4>

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <HardFault_Handler+0x4>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <MemManage_Handler+0x4>

08002146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <BusFault_Handler+0x4>

0800214c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <UsageFault_Handler+0x4>

08002152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217a:	f002 fdbb 	bl	8004cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)								//이전곡 커서 이동
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	down_flag=1;
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <EXTI2_IRQHandler+0x18>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
	LCD_Out_Time();
 800218e:	f001 f9fd 	bl	800358c <LCD_Out_Time>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002192:	2004      	movs	r0, #4
 8002194:	f003 fe96 	bl	8005ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200000b0 	.word	0x200000b0

080021a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)								//커서 위치 노래 재생
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	Sel_Music();
 80021a4:	f001 fd48 	bl	8003c38 <Sel_Music>
	LCD_Out_Time();
 80021a8:	f001 f9f0 	bl	800358c <LCD_Out_Time>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021ac:	2008      	movs	r0, #8
 80021ae:	f003 fe89 	bl	8005ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)								//다음곡 커서 이동
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	up_flag=1;
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <EXTI4_IRQHandler+0x18>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
	LCD_Out_Time();
 80021c2:	f001 f9e3 	bl	800358c <LCD_Out_Time>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021c6:	2010      	movs	r0, #16
 80021c8:	f003 fe7c 	bl	8005ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200000ac 	.word	0x200000ac

080021d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	//////////////////////////////////////////////////////////

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80021d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021dc:	f003 fe72 	bl	8005ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <TIM2_IRQHandler+0x10>)
 80021ea:	f006 fe1b 	bl	8008e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200012e8 	.word	0x200012e8

080021f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)							//재생시간 표시
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021fc:	4820      	ldr	r0, [pc, #128]	; (8002280 <TIM3_IRQHandler+0x88>)
 80021fe:	f006 fe11 	bl	8008e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //화면 on&off를 위한 변수
  timeout++;
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <TIM3_IRQHandler+0x8c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <TIM3_IRQHandler+0x8c>)
 800220a:	6013      	str	r3, [r2, #0]

  //랜덤작동을 위한 변수
  randnum++;
 800220c:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <TIM3_IRQHandler+0x90>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <TIM3_IRQHandler+0x90>)
 8002216:	801a      	strh	r2, [r3, #0]

  //터치 사이 간격 체크
  if(two_touch==1)
 8002218:	4b1c      	ldr	r3, [pc, #112]	; (800228c <TIM3_IRQHandler+0x94>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10f      	bne.n	8002240 <TIM3_IRQHandler+0x48>
  {
	  //터치 사이 시간측정 도구
	  change++;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <TIM3_IRQHandler+0x98>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <TIM3_IRQHandler+0x98>)
 800222a:	701a      	strb	r2, [r3, #0]
	  //터치사이 간격이 0.2s가 넘어가면 터치 초기화	(10Hz인터럽트 사용)
	  if(change>=2)
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <TIM3_IRQHandler+0x98>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d905      	bls.n	8002240 <TIM3_IRQHandler+0x48>
	  {
		  two_touch=0;
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <TIM3_IRQHandler+0x94>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
		  change=0;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <TIM3_IRQHandler+0x98>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
	  }
  }

  //볼륨 바 타이머
  vol_check++;
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <TIM3_IRQHandler+0x9c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <TIM3_IRQHandler+0x9c>)
 800224a:	701a      	strb	r2, [r3, #0]

  //마지막 볼륨터치가 3초전이면 볼륨바 제거
  if(vol_check==30&&vol_flag==0)
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <TIM3_IRQHandler+0x9c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b1e      	cmp	r3, #30
 8002252:	d106      	bne.n	8002262 <TIM3_IRQHandler+0x6a>
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <TIM3_IRQHandler+0xa0>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <TIM3_IRQHandler+0x6a>
	  vol_flag=1;
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <TIM3_IRQHandler+0xa0>)
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]

  //노래 작동을 위한 타이머 (노래가 재생시에만 작동)
  if(t_ctrl==1)
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <TIM3_IRQHandler+0xa4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <TIM3_IRQHandler+0x82>
  {
  	  t_cnt++;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <TIM3_IRQHandler+0xa8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3301      	adds	r3, #1
 8002270:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <TIM3_IRQHandler+0xa8>)
 8002272:	6013      	str	r3, [r2, #0]
  	  check=0;
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <TIM3_IRQHandler+0xac>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000e64 	.word	0x20000e64
 8002284:	200000b4 	.word	0x200000b4
 8002288:	200000ca 	.word	0x200000ca
 800228c:	200000dc 	.word	0x200000dc
 8002290:	200000b8 	.word	0x200000b8
 8002294:	200000c8 	.word	0x200000c8
 8002298:	200000bc 	.word	0x200000bc
 800229c:	200000a8 	.word	0x200000a8
 80022a0:	200000a4 	.word	0x200000a4
 80022a4:	20000000 	.word	0x20000000

080022a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <USART1_IRQHandler+0x10>)
 80022ae:	f007 fc49 	bl	8009b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000fd4 	.word	0x20000fd4

080022bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//	MP3_Stop();
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80022c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022c4:	f003 fdfe 	bl	8005ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  LCD_Out_Time();
 80022c8:	f001 f960 	bl	800358c <LCD_Out_Time>
  touch_flag=1;
 80022cc:	4b02      	ldr	r3, [pc, #8]	; (80022d8 <EXTI15_10_IRQHandler+0x1c>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000dc2 	.word	0x20000dc2

080022dc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <SDIO_IRQHandler+0x10>)
 80022e2:	f005 f851 	bl	8007388 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000105c 	.word	0x2000105c

080022f0 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <DMA2_Channel4_5_IRQHandler+0x10>)
 80022f6:	f003 f9e5 	bl	80056c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000d74 	.word	0x20000d74

08002304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	return 1;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <_kill>:

int _kill(int pid, int sig)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800231c:	f00c f8a2 	bl	800e464 <__errno>
 8002320:	4603      	mov	r3, r0
 8002322:	2216      	movs	r2, #22
 8002324:	601a      	str	r2, [r3, #0]
	return -1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_exit>:

void _exit (int status)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800233a:	f04f 31ff 	mov.w	r1, #4294967295
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffe7 	bl	8002312 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002344:	e7fe      	b.n	8002344 <_exit+0x12>

08002346 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e00a      	b.n	800236e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002358:	f3af 8000 	nop.w
 800235c:	4601      	mov	r1, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	b2ca      	uxtb	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3301      	adds	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	dbf0      	blt.n	8002358 <_read+0x12>
	}

return len;
 8002376:	687b      	ldr	r3, [r7, #4]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e009      	b.n	80023a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	60ba      	str	r2, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	dbf1      	blt.n	8002392 <_write+0x12>
	}
	return len;
 80023ae:	687b      	ldr	r3, [r7, #4]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_close>:

int _close(int file)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	return -1;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023de:	605a      	str	r2, [r3, #4]
	return 0;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <_isatty>:

int _isatty(int file)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	return 1;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <_sbrk+0x5c>)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <_sbrk+0x60>)
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <_sbrk+0x64>)
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <_sbrk+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002448:	f00c f80c 	bl	800e464 <__errno>
 800244c:	4603      	mov	r3, r0
 800244e:	220c      	movs	r2, #12
 8002450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	e009      	b.n	800246c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <_sbrk+0x64>)
 8002468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20010000 	.word	0x20010000
 8002478:	00000800 	.word	0x00000800
 800247c:	200000cc 	.word	0x200000cc
 8002480:	200017c8 	.word	0x200017c8

08002484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <LCD_BL_on>:
extern int timeout;
extern uint16_t randnum;
char menu[15];

void LCD_BL_on()
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	2101      	movs	r1, #1
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <LCD_BL_on+0x14>)
 800249a:	f003 fcfa 	bl	8005e92 <HAL_GPIO_WritePin>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40010c00 	.word	0x40010c00

080024a8 <LCD_BL_off>:
void LCD_BL_off()
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2101      	movs	r1, #1
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <LCD_BL_off+0x14>)
 80024b2:	f003 fcee 	bl	8005e92 <HAL_GPIO_WritePin>
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40010c00 	.word	0x40010c00

080024c0 <LCD_init>:
	temp <<= 8;
	temp |= BANK1_A10_data; //0x41
	temp = 0;
}
void LCD_init()
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	BANK1_index = 0xCF;
 80024c4:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80024c8:	22cf      	movs	r2, #207	; 0xcf
 80024ca:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 80024cc:	4b93      	ldr	r3, [pc, #588]	; (800271c <LCD_init+0x25c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0xC1;
 80024d2:	4b92      	ldr	r3, [pc, #584]	; (800271c <LCD_init+0x25c>)
 80024d4:	22c1      	movs	r2, #193	; 0xc1
 80024d6:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0X30;
 80024d8:	4b90      	ldr	r3, [pc, #576]	; (800271c <LCD_init+0x25c>)
 80024da:	2230      	movs	r2, #48	; 0x30
 80024dc:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xED;
 80024de:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80024e2:	22ed      	movs	r2, #237	; 0xed
 80024e4:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x64;
 80024e6:	4b8d      	ldr	r3, [pc, #564]	; (800271c <LCD_init+0x25c>)
 80024e8:	2264      	movs	r2, #100	; 0x64
 80024ea:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x03;
 80024ec:	4b8b      	ldr	r3, [pc, #556]	; (800271c <LCD_init+0x25c>)
 80024ee:	2203      	movs	r2, #3
 80024f0:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0X12;
 80024f2:	4b8a      	ldr	r3, [pc, #552]	; (800271c <LCD_init+0x25c>)
 80024f4:	2212      	movs	r2, #18
 80024f6:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0X81;
 80024f8:	4b88      	ldr	r3, [pc, #544]	; (800271c <LCD_init+0x25c>)
 80024fa:	2281      	movs	r2, #129	; 0x81
 80024fc:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xE8;
 80024fe:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002502:	22e8      	movs	r2, #232	; 0xe8
 8002504:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x85;
 8002506:	4b85      	ldr	r3, [pc, #532]	; (800271c <LCD_init+0x25c>)
 8002508:	2285      	movs	r2, #133	; 0x85
 800250a:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x10;
 800250c:	4b83      	ldr	r3, [pc, #524]	; (800271c <LCD_init+0x25c>)
 800250e:	2210      	movs	r2, #16
 8002510:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x7A;
 8002512:	4b82      	ldr	r3, [pc, #520]	; (800271c <LCD_init+0x25c>)
 8002514:	227a      	movs	r2, #122	; 0x7a
 8002516:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xCB;
 8002518:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800251c:	22cb      	movs	r2, #203	; 0xcb
 800251e:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x39;
 8002520:	4b7e      	ldr	r3, [pc, #504]	; (800271c <LCD_init+0x25c>)
 8002522:	2239      	movs	r2, #57	; 0x39
 8002524:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x2C;
 8002526:	4b7d      	ldr	r3, [pc, #500]	; (800271c <LCD_init+0x25c>)
 8002528:	222c      	movs	r2, #44	; 0x2c
 800252a:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 800252c:	4b7b      	ldr	r3, [pc, #492]	; (800271c <LCD_init+0x25c>)
 800252e:	2200      	movs	r2, #0
 8002530:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x34;
 8002532:	4b7a      	ldr	r3, [pc, #488]	; (800271c <LCD_init+0x25c>)
 8002534:	2234      	movs	r2, #52	; 0x34
 8002536:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x02;
 8002538:	4b78      	ldr	r3, [pc, #480]	; (800271c <LCD_init+0x25c>)
 800253a:	2202      	movs	r2, #2
 800253c:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xF7;
 800253e:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002542:	22f7      	movs	r2, #247	; 0xf7
 8002544:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x20;
 8002546:	4b75      	ldr	r3, [pc, #468]	; (800271c <LCD_init+0x25c>)
 8002548:	2220      	movs	r2, #32
 800254a:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xEA;
 800254c:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002550:	22ea      	movs	r2, #234	; 0xea
 8002552:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 8002554:	4b71      	ldr	r3, [pc, #452]	; (800271c <LCD_init+0x25c>)
 8002556:	2200      	movs	r2, #0
 8002558:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 800255a:	4b70      	ldr	r3, [pc, #448]	; (800271c <LCD_init+0x25c>)
 800255c:	2200      	movs	r2, #0
 800255e:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xC0;    //Power control
 8002560:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002564:	22c0      	movs	r2, #192	; 0xc0
 8002566:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x1B;   //VRH[5:0]
 8002568:	4b6c      	ldr	r3, [pc, #432]	; (800271c <LCD_init+0x25c>)
 800256a:	221b      	movs	r2, #27
 800256c:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xC1;    //Power control
 800256e:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002572:	22c1      	movs	r2, #193	; 0xc1
 8002574:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x01;   //SAP[2:0];BT[3:0]
 8002576:	4b69      	ldr	r3, [pc, #420]	; (800271c <LCD_init+0x25c>)
 8002578:	2201      	movs	r2, #1
 800257a:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xC5;    //VCM control
 800257c:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002580:	22c5      	movs	r2, #197	; 0xc5
 8002582:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x30; 	 //3F
 8002584:	4b65      	ldr	r3, [pc, #404]	; (800271c <LCD_init+0x25c>)
 8002586:	2230      	movs	r2, #48	; 0x30
 8002588:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x30; 	 //3C
 800258a:	4b64      	ldr	r3, [pc, #400]	; (800271c <LCD_init+0x25c>)
 800258c:	2230      	movs	r2, #48	; 0x30
 800258e:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xC7;    //VCM control2
 8002590:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002594:	22c7      	movs	r2, #199	; 0xc7
 8002596:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0XB7;
 8002598:	4b60      	ldr	r3, [pc, #384]	; (800271c <LCD_init+0x25c>)
 800259a:	22b7      	movs	r2, #183	; 0xb7
 800259c:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0x36;    // Memory Access Control
 800259e:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80025a2:	2236      	movs	r2, #54	; 0x36
 80025a4:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x48;
 80025a6:	4b5d      	ldr	r3, [pc, #372]	; (800271c <LCD_init+0x25c>)
 80025a8:	2248      	movs	r2, #72	; 0x48
 80025aa:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0x3A;
 80025ac:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80025b0:	223a      	movs	r2, #58	; 0x3a
 80025b2:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x55;
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <LCD_init+0x25c>)
 80025b6:	2255      	movs	r2, #85	; 0x55
 80025b8:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xB1;
 80025ba:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80025be:	22b1      	movs	r2, #177	; 0xb1
 80025c0:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 80025c2:	4b56      	ldr	r3, [pc, #344]	; (800271c <LCD_init+0x25c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x1A;
 80025c8:	4b54      	ldr	r3, [pc, #336]	; (800271c <LCD_init+0x25c>)
 80025ca:	221a      	movs	r2, #26
 80025cc:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xB6;    // Display Function Control
 80025ce:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80025d2:	22b6      	movs	r2, #182	; 0xb6
 80025d4:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x0A;
 80025d6:	4b51      	ldr	r3, [pc, #324]	; (800271c <LCD_init+0x25c>)
 80025d8:	220a      	movs	r2, #10
 80025da:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0xA2;
 80025dc:	4b4f      	ldr	r3, [pc, #316]	; (800271c <LCD_init+0x25c>)
 80025de:	22a2      	movs	r2, #162	; 0xa2
 80025e0:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xF2;    // 3Gamma Function Disable
 80025e2:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80025e6:	22f2      	movs	r2, #242	; 0xf2
 80025e8:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 80025ea:	4b4c      	ldr	r3, [pc, #304]	; (800271c <LCD_init+0x25c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0x26;    //Gamma curve selected
 80025f0:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80025f4:	2226      	movs	r2, #38	; 0x26
 80025f6:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x01;
 80025f8:	4b48      	ldr	r3, [pc, #288]	; (800271c <LCD_init+0x25c>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0xE0;    //Set Gamma
 80025fe:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002602:	22e0      	movs	r2, #224	; 0xe0
 8002604:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x0F;
 8002606:	4b45      	ldr	r3, [pc, #276]	; (800271c <LCD_init+0x25c>)
 8002608:	220f      	movs	r2, #15
 800260a:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x2A;
 800260c:	4b43      	ldr	r3, [pc, #268]	; (800271c <LCD_init+0x25c>)
 800260e:	222a      	movs	r2, #42	; 0x2a
 8002610:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x28;
 8002612:	4b42      	ldr	r3, [pc, #264]	; (800271c <LCD_init+0x25c>)
 8002614:	2228      	movs	r2, #40	; 0x28
 8002616:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x08;
 8002618:	4b40      	ldr	r3, [pc, #256]	; (800271c <LCD_init+0x25c>)
 800261a:	2208      	movs	r2, #8
 800261c:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x0E;
 800261e:	4b3f      	ldr	r3, [pc, #252]	; (800271c <LCD_init+0x25c>)
 8002620:	220e      	movs	r2, #14
 8002622:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x08;
 8002624:	4b3d      	ldr	r3, [pc, #244]	; (800271c <LCD_init+0x25c>)
 8002626:	2208      	movs	r2, #8
 8002628:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x54;
 800262a:	4b3c      	ldr	r3, [pc, #240]	; (800271c <LCD_init+0x25c>)
 800262c:	2254      	movs	r2, #84	; 0x54
 800262e:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0XA9;
 8002630:	4b3a      	ldr	r3, [pc, #232]	; (800271c <LCD_init+0x25c>)
 8002632:	22a9      	movs	r2, #169	; 0xa9
 8002634:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x43;
 8002636:	4b39      	ldr	r3, [pc, #228]	; (800271c <LCD_init+0x25c>)
 8002638:	2243      	movs	r2, #67	; 0x43
 800263a:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x0A;
 800263c:	4b37      	ldr	r3, [pc, #220]	; (800271c <LCD_init+0x25c>)
 800263e:	220a      	movs	r2, #10
 8002640:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x0F;
 8002642:	4b36      	ldr	r3, [pc, #216]	; (800271c <LCD_init+0x25c>)
 8002644:	220f      	movs	r2, #15
 8002646:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 8002648:	4b34      	ldr	r3, [pc, #208]	; (800271c <LCD_init+0x25c>)
 800264a:	2200      	movs	r2, #0
 800264c:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 800264e:	4b33      	ldr	r3, [pc, #204]	; (800271c <LCD_init+0x25c>)
 8002650:	2200      	movs	r2, #0
 8002652:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 8002654:	4b31      	ldr	r3, [pc, #196]	; (800271c <LCD_init+0x25c>)
 8002656:	2200      	movs	r2, #0
 8002658:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <LCD_init+0x25c>)
 800265c:	2200      	movs	r2, #0
 800265e:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0XE1;    //Set Gamma
 8002660:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002664:	22e1      	movs	r2, #225	; 0xe1
 8002666:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 8002668:	4b2c      	ldr	r3, [pc, #176]	; (800271c <LCD_init+0x25c>)
 800266a:	2200      	movs	r2, #0
 800266c:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x15;
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <LCD_init+0x25c>)
 8002670:	2215      	movs	r2, #21
 8002672:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x17;
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <LCD_init+0x25c>)
 8002676:	2217      	movs	r2, #23
 8002678:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x07;
 800267a:	4b28      	ldr	r3, [pc, #160]	; (800271c <LCD_init+0x25c>)
 800267c:	2207      	movs	r2, #7
 800267e:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x11;
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <LCD_init+0x25c>)
 8002682:	2211      	movs	r2, #17
 8002684:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x06;
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <LCD_init+0x25c>)
 8002688:	2206      	movs	r2, #6
 800268a:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x2B;
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <LCD_init+0x25c>)
 800268e:	222b      	movs	r2, #43	; 0x2b
 8002690:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x56;
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <LCD_init+0x25c>)
 8002694:	2256      	movs	r2, #86	; 0x56
 8002696:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x3C;
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <LCD_init+0x25c>)
 800269a:	223c      	movs	r2, #60	; 0x3c
 800269c:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x05;
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <LCD_init+0x25c>)
 80026a0:	2205      	movs	r2, #5
 80026a2:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x10;
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <LCD_init+0x25c>)
 80026a6:	2210      	movs	r2, #16
 80026a8:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x0F;
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <LCD_init+0x25c>)
 80026ac:	220f      	movs	r2, #15
 80026ae:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x3F;
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <LCD_init+0x25c>)
 80026b2:	223f      	movs	r2, #63	; 0x3f
 80026b4:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x3F;
 80026b6:	4b19      	ldr	r3, [pc, #100]	; (800271c <LCD_init+0x25c>)
 80026b8:	223f      	movs	r2, #63	; 0x3f
 80026ba:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x0F;
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <LCD_init+0x25c>)
 80026be:	220f      	movs	r2, #15
 80026c0:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0x2B;   //Page Address Set
 80026c2:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80026c6:	222b      	movs	r2, #43	; 0x2b
 80026c8:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <LCD_init+0x25c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <LCD_init+0x25c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x01;
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <LCD_init+0x25c>)
 80026d8:	2201      	movs	r2, #1
 80026da:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x3f;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <LCD_init+0x25c>)
 80026de:	223f      	movs	r2, #63	; 0x3f
 80026e0:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0x2A;   //Column Address Set
 80026e2:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80026e6:	222a      	movs	r2, #42	; 0x2a
 80026e8:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <LCD_init+0x25c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <LCD_init+0x25c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0x00;
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <LCD_init+0x25c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = 0xef;
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <LCD_init+0x25c>)
 80026fe:	22ef      	movs	r2, #239	; 0xef
 8002700:	801a      	strh	r2, [r3, #0]
	BANK1_index = 0x11; //Exit Sleep
 8002702:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002706:	2211      	movs	r2, #17
 8002708:	801a      	strh	r2, [r3, #0]
	HAL_Delay(120);
 800270a:	2078      	movs	r0, #120	; 0x78
 800270c:	f002 fb0e 	bl	8004d2c <HAL_Delay>
	BANK1_index = 0x29; //display on
 8002710:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002714:	2229      	movs	r2, #41	; 0x29
 8002716:	801a      	strh	r2, [r3, #0]
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	6c000800 	.word	0x6c000800

08002720 <LCD_SetPos>:
void LCD_SetPos(uint16_t xPos, uint16_t yPos)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	460a      	mov	r2, r1
 800272a:	80fb      	strh	r3, [r7, #6]
 800272c:	4613      	mov	r3, r2
 800272e:	80bb      	strh	r3, [r7, #4]
	BANK1_index = LCD_xpos_cmd;
 8002730:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002734:	222a      	movs	r2, #42	; 0x2a
 8002736:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = xPos>>8;
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <LCD_SetPos+0x54>)
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	b29b      	uxth	r3, r3
 8002740:	8013      	strh	r3, [r2, #0]
	BANK1_A10_data = xPos&0xff;
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <LCD_SetPos+0x54>)
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	b292      	uxth	r2, r2
 800274a:	801a      	strh	r2, [r3, #0]
	BANK1_index = LCD_ypos_cmd;
 800274c:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002750:	222b      	movs	r2, #43	; 0x2b
 8002752:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = yPos>>8;
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <LCD_SetPos+0x54>)
 8002756:	88bb      	ldrh	r3, [r7, #4]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	b29b      	uxth	r3, r3
 800275c:	8013      	strh	r3, [r2, #0]
	BANK1_A10_data = yPos&0xff;
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <LCD_SetPos+0x54>)
 8002760:	88ba      	ldrh	r2, [r7, #4]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	b292      	uxth	r2, r2
 8002766:	801a      	strh	r2, [r3, #0]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	6c000800 	.word	0x6c000800

08002778 <LCD_Clear>:
void LCD_Clear(uint16_t Color)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
	int i;
	LCD_SetPos(0,0);
 8002782:	2100      	movs	r1, #0
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff ffcb 	bl	8002720 <LCD_SetPos>
	//LCD_buf[10][11] = Color;
	BANK1_index = LCD_wram_cmd;
 800278a:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800278e:	222c      	movs	r2, #44	; 0x2c
 8002790:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < LCD_width * LCD_height ; i++)
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e005      	b.n	80027a4 <LCD_Clear+0x2c>
	{
		BANK1_A10_data = Color;
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <LCD_Clear+0x40>)
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < LCD_width * LCD_height ; i++)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3301      	adds	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80027aa:	dbf5      	blt.n	8002798 <LCD_Clear+0x20>
	}
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	6c000800 	.word	0x6c000800

080027bc <LCD_Draw_Point>:
void LCD_Draw_Point(uint16_t x, uint16_t y, uint16_t Color)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	80fb      	strh	r3, [r7, #6]
 80027c6:	460b      	mov	r3, r1
 80027c8:	80bb      	strh	r3, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	807b      	strh	r3, [r7, #2]
	LCD_SetPos(x,y);
 80027ce:	88ba      	ldrh	r2, [r7, #4]
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ffa3 	bl	8002720 <LCD_SetPos>
	BANK1_index = LCD_wram_cmd;
 80027da:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80027de:	222c      	movs	r2, #44	; 0x2c
 80027e0:	801a      	strh	r2, [r3, #0]
	BANK1_A10_data = Color;
 80027e2:	4a03      	ldr	r2, [pc, #12]	; (80027f0 <LCD_Draw_Point+0x34>)
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	8013      	strh	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	6c000800 	.word	0x6c000800

080027f4 <LCD_Draw_Line>:
void LCD_Draw_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t Color)
{
 80027f4:	b5b0      	push	{r4, r5, r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4604      	mov	r4, r0
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4623      	mov	r3, r4
 8002804:	80fb      	strh	r3, [r7, #6]
 8002806:	4603      	mov	r3, r0
 8002808:	80bb      	strh	r3, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	807b      	strh	r3, [r7, #2]
 800280e:	4613      	mov	r3, r2
 8002810:	803b      	strh	r3, [r7, #0]
		LCD_SetPos(x1,y1);
 8002812:	88ba      	ldrh	r2, [r7, #4]
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff81 	bl	8002720 <LCD_SetPos>
		BANK1_index = LCD_wram_cmd;
 800281e:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002822:	222c      	movs	r2, #44	; 0x2c
 8002824:	801a      	strh	r2, [r3, #0]

		float dx, dy, slope, xz;			//xz: x절편
		uint16_t rx1,rx2,ry1,ry2;

		rx1=x1<=x2?x1:x2;					//x값 정렬
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	4293      	cmp	r3, r2
 800282c:	bf28      	it	cs
 800282e:	4613      	movcs	r3, r2
 8002830:	847b      	strh	r3, [r7, #34]	; 0x22
		rx2=x1<=x2?x2:x1;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	4293      	cmp	r3, r2
 8002838:	bf38      	it	cc
 800283a:	4613      	movcc	r3, r2
 800283c:	82fb      	strh	r3, [r7, #22]
		ry1=y1<=y2?y1:y2;					//y값 정렬
 800283e:	88ba      	ldrh	r2, [r7, #4]
 8002840:	883b      	ldrh	r3, [r7, #0]
 8002842:	4293      	cmp	r3, r2
 8002844:	bf28      	it	cs
 8002846:	4613      	movcs	r3, r2
 8002848:	843b      	strh	r3, [r7, #32]
		ry2=y1<=y2?y2:y1;
 800284a:	883a      	ldrh	r2, [r7, #0]
 800284c:	88bb      	ldrh	r3, [r7, #4]
 800284e:	4293      	cmp	r3, r2
 8002850:	bf38      	it	cc
 8002852:	4613      	movcc	r3, r2
 8002854:	82bb      	strh	r3, [r7, #20]

		dx=(float)x2-(float)x1;
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd ffe5 	bl	8000828 <__aeabi_ui2f>
 800285e:	4604      	mov	r4, r0
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd ffe0 	bl	8000828 <__aeabi_ui2f>
 8002868:	4603      	mov	r3, r0
 800286a:	4619      	mov	r1, r3
 800286c:	4620      	mov	r0, r4
 800286e:	f7fd ff29 	bl	80006c4 <__aeabi_fsub>
 8002872:	4603      	mov	r3, r0
 8002874:	613b      	str	r3, [r7, #16]
		dy= (float)y2-(float)y1;
 8002876:	883b      	ldrh	r3, [r7, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd ffd5 	bl	8000828 <__aeabi_ui2f>
 800287e:	4604      	mov	r4, r0
 8002880:	88bb      	ldrh	r3, [r7, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd ffd0 	bl	8000828 <__aeabi_ui2f>
 8002888:	4603      	mov	r3, r0
 800288a:	4619      	mov	r1, r3
 800288c:	4620      	mov	r0, r4
 800288e:	f7fd ff19 	bl	80006c4 <__aeabi_fsub>
 8002892:	4603      	mov	r3, r0
 8002894:	60fb      	str	r3, [r7, #12]

		if(dx==0)
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	6938      	ldr	r0, [r7, #16]
 800289c:	f7fe f9b0 	bl	8000c00 <__aeabi_fcmpeq>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00e      	beq.n	80028c4 <LCD_Draw_Line+0xd0>
		{
			for(;ry1<ry2;ry1++)
 80028a6:	e008      	b.n	80028ba <LCD_Draw_Line+0xc6>
				LCD_Draw_Point(rx1, ry1, Color);
 80028a8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80028aa:	8c39      	ldrh	r1, [r7, #32]
 80028ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff84 	bl	80027bc <LCD_Draw_Point>
			for(;ry1<ry2;ry1++)
 80028b4:	8c3b      	ldrh	r3, [r7, #32]
 80028b6:	3301      	adds	r3, #1
 80028b8:	843b      	strh	r3, [r7, #32]
 80028ba:	8c3a      	ldrh	r2, [r7, #32]
 80028bc:	8abb      	ldrh	r3, [r7, #20]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3f2      	bcc.n	80028a8 <LCD_Draw_Line+0xb4>
			return 0;
 80028c2:	e0b5      	b.n	8002a30 <LCD_Draw_Line+0x23c>
		}

		if(dy==0)
 80028c4:	f04f 0100 	mov.w	r1, #0
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7fe f999 	bl	8000c00 <__aeabi_fcmpeq>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00e      	beq.n	80028f2 <LCD_Draw_Line+0xfe>
		{
			for(;rx1<rx2;rx1++)
 80028d4:	e008      	b.n	80028e8 <LCD_Draw_Line+0xf4>
				LCD_Draw_Point(rx1, ry1, Color);
 80028d6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80028d8:	8c39      	ldrh	r1, [r7, #32]
 80028da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff6d 	bl	80027bc <LCD_Draw_Point>
			for(;rx1<rx2;rx1++)
 80028e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028e4:	3301      	adds	r3, #1
 80028e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80028e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80028ea:	8afb      	ldrh	r3, [r7, #22]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d3f2      	bcc.n	80028d6 <LCD_Draw_Line+0xe2>
			return 0;
 80028f0:	e09e      	b.n	8002a30 <LCD_Draw_Line+0x23c>
		}

		slope=(float)dy/(float)dx;			//기울기
 80028f2:	6939      	ldr	r1, [r7, #16]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7fe f8a3 	bl	8000a40 <__aeabi_fdiv>
 80028fa:	4603      	mov	r3, r0
 80028fc:	60bb      	str	r3, [r7, #8]

		if(slope>=0)
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	68b8      	ldr	r0, [r7, #8]
 8002904:	f7fe f99a 	bl	8000c3c <__aeabi_fcmpge>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <LCD_Draw_Line+0x132>
			xz=(float)rx1*slope;
 800290e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd ff89 	bl	8000828 <__aeabi_ui2f>
 8002916:	4603      	mov	r3, r0
 8002918:	4619      	mov	r1, r3
 800291a:	68b8      	ldr	r0, [r7, #8]
 800291c:	f7fd ffdc 	bl	80008d8 <__aeabi_fmul>
 8002920:	4603      	mov	r3, r0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	e080      	b.n	8002a28 <LCD_Draw_Line+0x234>
		else
			xz=(float)rx2*slope;
 8002926:	8afb      	ldrh	r3, [r7, #22]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd ff7d 	bl	8000828 <__aeabi_ui2f>
 800292e:	4603      	mov	r3, r0
 8002930:	4619      	mov	r1, r3
 8002932:	68b8      	ldr	r0, [r7, #8]
 8002934:	f7fd ffd0 	bl	80008d8 <__aeabi_fmul>
 8002938:	4603      	mov	r3, r0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24

		for(;rx1<=rx2;rx1++)
 800293c:	e074      	b.n	8002a28 <LCD_Draw_Line+0x234>
		{
			y1=slope*(float)rx1-xz;
 800293e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd ff71 	bl	8000828 <__aeabi_ui2f>
 8002946:	4603      	mov	r3, r0
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd ffc4 	bl	80008d8 <__aeabi_fmul>
 8002950:	4603      	mov	r3, r0
 8002952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd feb5 	bl	80006c4 <__aeabi_fsub>
 800295a:	4603      	mov	r3, r0
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe f981 	bl	8000c64 <__aeabi_f2uiz>
 8002962:	4603      	mov	r3, r0
 8002964:	80bb      	strh	r3, [r7, #4]
			if(fabs(slope)>=1)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800296c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe f963 	bl	8000c3c <__aeabi_fcmpge>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d029      	beq.n	80029d0 <LCD_Draw_Line+0x1dc>
				for(int j=0;j<=fabs(slope)+1;j++)		// 점 잇기
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	e00c      	b.n	800299c <LCD_Draw_Line+0x1a8>
					LCD_Draw_Point(rx1, y1+j, Color);
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	b29a      	uxth	r2, r3
 8002986:	88bb      	ldrh	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	b299      	uxth	r1, r3
 800298c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800298e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff13 	bl	80027bc <LCD_Draw_Point>
				for(int j=0;j<=fabs(slope)+1;j++)		// 점 잇기
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69f8      	ldr	r0, [r7, #28]
 800299e:	f7fd fd9b 	bl	80004d8 <__aeabi_i2d>
 80029a2:	4604      	mov	r4, r0
 80029a4:	460d      	mov	r5, r1
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fda5 	bl	80004fc <__aeabi_f2d>
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <LCD_Draw_Line+0x244>)
 80029b8:	f7fd fc42 	bl	8000240 <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4620      	mov	r0, r4
 80029c2:	4629      	mov	r1, r5
 80029c4:	f7fd fe5c 	bl	8000680 <__aeabi_dcmple>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1d9      	bne.n	8002982 <LCD_Draw_Line+0x18e>
 80029ce:	e028      	b.n	8002a22 <LCD_Draw_Line+0x22e>
			else
				for(int j=0;j<=fabs(slope)+1;j++)		// 점 잇기
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	e00c      	b.n	80029f0 <LCD_Draw_Line+0x1fc>
					LCD_Draw_Point(rx1+j, y1, Color);
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029dc:	4413      	add	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80029e2:	88b9      	ldrh	r1, [r7, #4]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fee9 	bl	80027bc <LCD_Draw_Point>
				for(int j=0;j<=fabs(slope)+1;j++)		// 점 잇기
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	69b8      	ldr	r0, [r7, #24]
 80029f2:	f7fd fd71 	bl	80004d8 <__aeabi_i2d>
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd7b 	bl	80004fc <__aeabi_f2d>
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <LCD_Draw_Line+0x244>)
 8002a0c:	f7fd fc18 	bl	8000240 <__adddf3>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fd fe32 	bl	8000680 <__aeabi_dcmple>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1d9      	bne.n	80029d6 <LCD_Draw_Line+0x1e2>
		for(;rx1<=rx2;rx1++)
 8002a22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a24:	3301      	adds	r3, #1
 8002a26:	847b      	strh	r3, [r7, #34]	; 0x22
 8002a28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002a2a:	8afb      	ldrh	r3, [r7, #22]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d986      	bls.n	800293e <LCD_Draw_Line+0x14a>
		}
}
 8002a30:	3728      	adds	r7, #40	; 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bdb0      	pop	{r4, r5, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	3ff00000 	.word	0x3ff00000

08002a3c <LCD_Draw_Filled_Circle>:
void LCD_Draw_Filled_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Color)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b08b      	sub	sp, #44	; 0x2c
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4604      	mov	r4, r0
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	80fb      	strh	r3, [r7, #6]
 8002a4e:	4603      	mov	r3, r0
 8002a50:	80bb      	strh	r3, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	807b      	strh	r3, [r7, #2]
 8002a56:	4613      	mov	r3, r2
 8002a58:	803b      	strh	r3, [r7, #0]
	int i=0,j=0,px=x-r,py=y-r,size=2*r,temp=r*r;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
 8002a62:	88fa      	ldrh	r2, [r7, #6]
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	88ba      	ldrh	r2, [r7, #4]
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	60fb      	str	r3, [r7, #12]
	uint16_t nowcolor;
	LCD_SetPos(px,py);
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fe47 	bl	8002720 <LCD_SetPos>
	BANK1_index = LCD_wram_cmd;
 8002a92:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002a96:	222c      	movs	r2, #44	; 0x2c
 8002a98:	801a      	strh	r2, [r3, #0]
	for(j=0;j<size;j++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
 8002a9e:	e047      	b.n	8002b30 <LCD_Draw_Filled_Circle+0xf4>
	{
		for(i=0;i<size;i++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	e02c      	b.n	8002b00 <LCD_Draw_Filled_Circle+0xc4>
		{
			int det=(x-px-i-1)*(x-px-i-1)+(y-py-j-1)*(y-py-j-1);
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	88f9      	ldrh	r1, [r7, #6]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	1a89      	subs	r1, r1, r2
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	1a8a      	subs	r2, r1, r2
 8002abc:	3a01      	subs	r2, #1
 8002abe:	fb02 f203 	mul.w	r2, r2, r3
 8002ac2:	88b9      	ldrh	r1, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	1ac9      	subs	r1, r1, r3
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	1acb      	subs	r3, r1, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	88b8      	ldrh	r0, [r7, #4]
 8002ad0:	6979      	ldr	r1, [r7, #20]
 8002ad2:	1a40      	subs	r0, r0, r1
 8002ad4:	6a39      	ldr	r1, [r7, #32]
 8002ad6:	1a41      	subs	r1, r0, r1
 8002ad8:	3901      	subs	r1, #1
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	60bb      	str	r3, [r7, #8]
			if(det<temp)	nowcolor=Color;
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	da02      	bge.n	8002af0 <LCD_Draw_Filled_Circle+0xb4>
 8002aea:	883b      	ldrh	r3, [r7, #0]
 8002aec:	83fb      	strh	r3, [r7, #30]
 8002aee:	e001      	b.n	8002af4 <LCD_Draw_Filled_Circle+0xb8>
			else	nowcolor=COLOR_BLACK;
 8002af0:	2305      	movs	r3, #5
 8002af2:	83fb      	strh	r3, [r7, #30]
			BANK1_A10_data=nowcolor;
 8002af4:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <LCD_Draw_Filled_Circle+0x108>)
 8002af6:	8bfb      	ldrh	r3, [r7, #30]
 8002af8:	8013      	strh	r3, [r2, #0]
		for(i=0;i<size;i++)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	3301      	adds	r3, #1
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbce      	blt.n	8002aa6 <LCD_Draw_Filled_Circle+0x6a>
		}
		LCD_SetPos(px, py+j+1);
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	b298      	uxth	r0, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f7ff fdff 	bl	8002720 <LCD_SetPos>
		BANK1_index = LCD_wram_cmd;
 8002b22:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002b26:	222c      	movs	r2, #44	; 0x2c
 8002b28:	801a      	strh	r2, [r3, #0]
	for(j=0;j<size;j++)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	623b      	str	r3, [r7, #32]
 8002b30:	6a3a      	ldr	r2, [r7, #32]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	dbb3      	blt.n	8002aa0 <LCD_Draw_Filled_Circle+0x64>
	}
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	372c      	adds	r7, #44	; 0x2c
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	6c000800 	.word	0x6c000800

08002b48 <LCD_Draw_Char>:
void LCD_Draw_Char(uint16_t x, uint16_t y, uint8_t Char, uint16_t Color, uint16_t font_size)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	80fb      	strh	r3, [r7, #6]
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80bb      	strh	r3, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70fb      	strb	r3, [r7, #3]
 8002b62:	4613      	mov	r3, r2
 8002b64:	803b      	strh	r3, [r7, #0]
	uint8_t temp;
	int i,j,dx = 0, dy = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]

	for(i = 0 ; i < asc_length[font_size] ; i++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	e06a      	b.n	8002c4a <LCD_Draw_Char+0x102>
	{
		if(font_size == 0) 			temp = asc2_1206[Char - ' '][i];
 8002b74:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <LCD_Draw_Char+0x4e>
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	f1a3 0220 	sub.w	r2, r3, #32
 8002b80:	4938      	ldr	r1, [pc, #224]	; (8002c64 <LCD_Draw_Char+0x11c>)
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	18ca      	adds	r2, r1, r3
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	4413      	add	r3, r2
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	77fb      	strb	r3, [r7, #31]
 8002b94:	e029      	b.n	8002bea <LCD_Draw_Char+0xa2>
		else if(font_size == 1) 	temp = asc2_1608[Char - ' '][i];
 8002b96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d109      	bne.n	8002bb0 <LCD_Draw_Char+0x68>
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	3b20      	subs	r3, #32
 8002ba0:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <LCD_Draw_Char+0x120>)
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	441a      	add	r2, r3
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4413      	add	r3, r2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	77fb      	strb	r3, [r7, #31]
 8002bae:	e01c      	b.n	8002bea <LCD_Draw_Char+0xa2>
		else if(font_size == 2) 	temp = asc2_2412[Char - ' '][i];
 8002bb0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d10d      	bne.n	8002bd2 <LCD_Draw_Char+0x8a>
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f1a3 0220 	sub.w	r2, r3, #32
 8002bbc:	492b      	ldr	r1, [pc, #172]	; (8002c6c <LCD_Draw_Char+0x124>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	18ca      	adds	r2, r1, r3
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	e00b      	b.n	8002bea <LCD_Draw_Char+0xa2>
		else if(font_size == 3) 	temp = asc2_3216[Char - ' '][i];
 8002bd2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d108      	bne.n	8002bea <LCD_Draw_Char+0xa2>
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	3b20      	subs	r3, #32
 8002bdc:	4a24      	ldr	r2, [pc, #144]	; (8002c70 <LCD_Draw_Char+0x128>)
 8002bde:	01db      	lsls	r3, r3, #7
 8002be0:	441a      	add	r2, r3
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4413      	add	r3, r2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	77fb      	strb	r3, [r7, #31]

		for(j = 0 ; j < 8 ; j++, temp <<= 1)
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e026      	b.n	8002c3e <LCD_Draw_Char+0xf6>
		{
			if((temp&0x80) == 0x80) LCD_Draw_Point(x + dx, y + dy, Color);
 8002bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da0d      	bge.n	8002c14 <LCD_Draw_Char+0xcc>
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	4413      	add	r3, r2
 8002c00:	b298      	uxth	r0, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	88bb      	ldrh	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	883a      	ldrh	r2, [r7, #0]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7ff fdd4 	bl	80027bc <LCD_Draw_Point>

			dy++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
			if(dy == asc_height[font_size])
 8002c1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002c1c:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <LCD_Draw_Char+0x12c>)
 8002c1e:	5cd3      	ldrb	r3, [r2, r3]
 8002c20:	461a      	mov	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d104      	bne.n	8002c32 <LCD_Draw_Char+0xea>
			{
				dy = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
				dx--;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	613b      	str	r3, [r7, #16]
		for(j = 0 ; j < 8 ; j++, temp <<= 1)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	7ffb      	ldrb	r3, [r7, #31]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	77fb      	strb	r3, [r7, #31]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b07      	cmp	r3, #7
 8002c42:	ddd5      	ble.n	8002bf0 <LCD_Draw_Char+0xa8>
	for(i = 0 ; i < asc_length[font_size] ; i++)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <LCD_Draw_Char+0x130>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	461a      	mov	r2, r3
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4293      	cmp	r3, r2
 8002c56:	db8d      	blt.n	8002b74 <LCD_Draw_Char+0x2c>
			}
		}
	}
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	0800fc2c 	.word	0x0800fc2c
 8002c68:	080100a0 	.word	0x080100a0
 8002c6c:	08010690 	.word	0x08010690
 8002c70:	080113ec 	.word	0x080113ec
 8002c74:	08014370 	.word	0x08014370
 8002c78:	0801436c 	.word	0x0801436c

08002c7c <LCD_Draw_Char1>:
void LCD_Draw_Char1(uint16_t x, uint16_t y,uint16_t Color,uint16_t width ,uint16_t height)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4604      	mov	r4, r0
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	80fb      	strh	r3, [r7, #6]
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80bb      	strh	r3, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	807b      	strh	r3, [r7, #2]
 8002c96:	4613      	mov	r3, r2
 8002c98:	803b      	strh	r3, [r7, #0]
	int temp;
	int i,dx = 0, dy = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]

	for(i = 0 ; i < 620 ; i++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e03f      	b.n	8002d28 <LCD_Draw_Char1+0xac>
	{
		temp=image[i];
 8002ca8:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <LCD_Draw_Char1+0xc0>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	60bb      	str	r3, [r7, #8]
		if(temp==1)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d127      	bne.n	8002d08 <LCD_Draw_Char1+0x8c>
		{
			for(int j = 0 ; j < 2 ; j++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	e021      	b.n	8002d02 <LCD_Draw_Char1+0x86>
			{
				for(int k=0;k<2;k++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e018      	b.n	8002cf6 <LCD_Draw_Char1+0x7a>
					LCD_Draw_Point(x-dx+j,y-dy+k,Color);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b298      	uxth	r0, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	88ba      	ldrh	r2, [r7, #4]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	887a      	ldrh	r2, [r7, #2]
 8002cea:	4619      	mov	r1, r3
 8002cec:	f7ff fd66 	bl	80027bc <LCD_Draw_Point>
				for(int k=0;k<2;k++)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	dde3      	ble.n	8002cc4 <LCD_Draw_Char1+0x48>
			for(int j = 0 ; j < 2 ; j++)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	ddda      	ble.n	8002cbe <LCD_Draw_Char1+0x42>
			}
		}
		dx+=2;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]

		if(dx==width*2)
 8002d0e:	883b      	ldrh	r3, [r7, #0]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d104      	bne.n	8002d22 <LCD_Draw_Char1+0xa6>
		{
			dx=0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
			dy-=2;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3b02      	subs	r3, #2
 8002d20:	617b      	str	r3, [r7, #20]
	for(i = 0 ; i < 620 ; i++)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3301      	adds	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002d2e:	dbbb      	blt.n	8002ca8 <LCD_Draw_Char1+0x2c>
		}
	}
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3724      	adds	r7, #36	; 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	0800f9c0 	.word	0x0800f9c0

08002d40 <LCD_Draw_Str>:
void LCD_Draw_Str(uint16_t x, uint16_t y, uint8_t* str, uint16_t Color, uint16_t font_size)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60ba      	str	r2, [r7, #8]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	81fb      	strh	r3, [r7, #14]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	81bb      	strh	r3, [r7, #12]
 8002d52:	4613      	mov	r3, r2
 8002d54:	80fb      	strh	r3, [r7, #6]
	int dx = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]

	while(*str != '\0')
 8002d5a:	e017      	b.n	8002d8c <LCD_Draw_Str+0x4c>
	{
		LCD_Draw_Char(x + dx, y, *str,Color,font_size);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	89fb      	ldrh	r3, [r7, #14]
 8002d62:	4413      	add	r3, r2
 8002d64:	b298      	uxth	r0, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	88fc      	ldrh	r4, [r7, #6]
 8002d6c:	89b9      	ldrh	r1, [r7, #12]
 8002d6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	4623      	mov	r3, r4
 8002d74:	f7ff fee8 	bl	8002b48 <LCD_Draw_Char>
		str++;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	60bb      	str	r3, [r7, #8]
		dx -= asc_width[font_size];
 8002d7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d80:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <LCD_Draw_Str+0x60>)
 8002d82:	5cd3      	ldrb	r3, [r2, r3]
 8002d84:	461a      	mov	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
	while(*str != '\0')
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e3      	bne.n	8002d5c <LCD_Draw_Str+0x1c>
	}
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	08014374 	.word	0x08014374

08002da4 <LCD_Draw_Box>:

void LCD_Draw_Box(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t Color)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4604      	mov	r4, r0
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4623      	mov	r3, r4
 8002db4:	80fb      	strh	r3, [r7, #6]
 8002db6:	4603      	mov	r3, r0
 8002db8:	80bb      	strh	r3, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	807b      	strh	r3, [r7, #2]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	803b      	strh	r3, [r7, #0]
	int i;
	LCD_SetPos(x1,y1);
 8002dc2:	88ba      	ldrh	r2, [r7, #4]
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fca9 	bl	8002720 <LCD_SetPos>
	BANK1_index = LCD_wram_cmd;
 8002dce:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002dd2:	222c      	movs	r2, #44	; 0x2c
 8002dd4:	801a      	strh	r2, [r3, #0]
	for(i = x1; i < x2; i++)
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e014      	b.n	8002e06 <LCD_Draw_Box+0x62>
	{
		for(int j=y1;j<y2;j++)
 8002ddc:	88bb      	ldrh	r3, [r7, #4]
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	e00a      	b.n	8002df8 <LCD_Draw_Box+0x54>
			LCD_Draw_Point(i,j,Color);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	b291      	uxth	r1, r2
 8002dea:	8c3a      	ldrh	r2, [r7, #32]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fce5 	bl	80027bc <LCD_Draw_Point>
		for(int j=y1;j<y2;j++)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	883b      	ldrh	r3, [r7, #0]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	dbf0      	blt.n	8002de2 <LCD_Draw_Box+0x3e>
	for(i = x1; i < x2; i++)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	dbe6      	blt.n	8002ddc <LCD_Draw_Box+0x38>
	}

}
 8002e0e:	bf00      	nop
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}

08002e18 <LCD_Menu_Set>:
void LCD_Menu_Set()			//초기 메뉴 표시
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af02      	add	r7, sp, #8
	//버튼식 메뉴 번호 설정
	sprintf(menu,"%d/%d",1,musiccnt);
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <LCD_Menu_Set+0x80>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	2201      	movs	r2, #1
 8002e24:	491d      	ldr	r1, [pc, #116]	; (8002e9c <LCD_Menu_Set+0x84>)
 8002e26:	481e      	ldr	r0, [pc, #120]	; (8002ea0 <LCD_Menu_Set+0x88>)
 8002e28:	f00b fb8e 	bl	800e548 <siprintf>
	LCD_Draw_Str(200, 24,menu,COLOR_BLACK,0);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2305      	movs	r3, #5
 8002e32:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <LCD_Menu_Set+0x88>)
 8002e34:	2118      	movs	r1, #24
 8002e36:	20c8      	movs	r0, #200	; 0xc8
 8002e38:	f7ff ff82 	bl	8002d40 <LCD_Draw_Str>

	//버튼식 메뉴 지정표시
	LCD_Draw_Str(210, 40,"-",COLOR_BLACK,1);
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2305      	movs	r3, #5
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <LCD_Menu_Set+0x8c>)
 8002e44:	2128      	movs	r1, #40	; 0x28
 8002e46:	20d2      	movs	r0, #210	; 0xd2
 8002e48:	f7ff ff7a 	bl	8002d40 <LCD_Draw_Str>

	//메뉴를 MENUCNT만큼 표시
	for(int i=0;i<MENUCNT;i++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	e019      	b.n	8002e86 <LCD_Menu_Set+0x6e>
		LCD_Draw_Str(200, 40+16*i, filname[musicfil[i]],COLOR_BLACK,1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3328      	adds	r3, #40	; 0x28
 8002e5c:	b299      	uxth	r1, r3
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <LCD_Menu_Set+0x90>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e66:	461a      	mov	r2, r3
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4a0e      	ldr	r2, [pc, #56]	; (8002eac <LCD_Menu_Set+0x94>)
 8002e72:	441a      	add	r2, r3
 8002e74:	2301      	movs	r3, #1
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2305      	movs	r3, #5
 8002e7a:	20c8      	movs	r0, #200	; 0xc8
 8002e7c:	f7ff ff60 	bl	8002d40 <LCD_Draw_Str>
	for(int i=0;i<MENUCNT;i++)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3301      	adds	r3, #1
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	dde2      	ble.n	8002e52 <LCD_Menu_Set+0x3a>
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200000be 	.word	0x200000be
 8002e9c:	0800f8b4 	.word	0x0800f8b4
 8002ea0:	20001330 	.word	0x20001330
 8002ea4:	0800f8bc 	.word	0x0800f8bc
 8002ea8:	20000eac 	.word	0x20000eac
 8002eac:	20000598 	.word	0x20000598

08002eb0 <LCD_Draw_Base>:
void LCD_Draw_Base()		//초기 화면 세팅
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
	LCD_Clear(COLOR_WHITE);
 8002eb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002eba:	f7ff fc5d 	bl	8002778 <LCD_Clear>

	//테두리 세팅
	LCD_Draw_Box(3,3,237,8,COLOR_BLACK);
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	22ed      	movs	r2, #237	; 0xed
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f7ff ff6b 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Box(3,3,8,317,COLOR_BLACK);
 8002ece:	2305      	movs	r3, #5
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	f240 133d 	movw	r3, #317	; 0x13d
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	2103      	movs	r1, #3
 8002eda:	2003      	movs	r0, #3
 8002edc:	f7ff ff62 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Box(3,312,237,317,COLOR_BLACK);
 8002ee0:	2305      	movs	r3, #5
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	f240 133d 	movw	r3, #317	; 0x13d
 8002ee8:	22ed      	movs	r2, #237	; 0xed
 8002eea:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002eee:	2003      	movs	r0, #3
 8002ef0:	f7ff ff58 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Box(232,3,237,317,COLOR_BLACK);
 8002ef4:	2305      	movs	r3, #5
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	f240 133d 	movw	r3, #317	; 0x13d
 8002efc:	22ed      	movs	r2, #237	; 0xed
 8002efe:	2103      	movs	r1, #3
 8002f00:	20e8      	movs	r0, #232	; 0xe8
 8002f02:	f7ff ff4f 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Box(3,172,237,312,COLOR_BLACK);
 8002f06:	2305      	movs	r3, #5
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	f44f 739c 	mov.w	r3, #312	; 0x138
 8002f0e:	22ed      	movs	r2, #237	; 0xed
 8002f10:	21ac      	movs	r1, #172	; 0xac
 8002f12:	2003      	movs	r0, #3
 8002f14:	f7ff ff46 	bl	8002da4 <LCD_Draw_Box>

	//재생 버튼
	LCD_Draw_Filled_Circle(120, 241, 25, COLOR_WHITE);
 8002f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f1c:	2219      	movs	r2, #25
 8002f1e:	21f1      	movs	r1, #241	; 0xf1
 8002f20:	2078      	movs	r0, #120	; 0x78
 8002f22:	f7ff fd8b 	bl	8002a3c <LCD_Draw_Filled_Circle>
	for(int i=0;i<18;i++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e028      	b.n	8002f7e <LCD_Draw_Base+0xce>
	{
		LCD_Draw_Line(125, 258-i , 125-(1*i), 258-(1*i) ,COLOR_BLACK);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
 8002f34:	b299      	uxth	r1, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2005      	movs	r0, #5
 8002f4c:	9000      	str	r0, [sp, #0]
 8002f4e:	207d      	movs	r0, #125	; 0x7d
 8002f50:	f7ff fc50 	bl	80027f4 <LCD_Draw_Line>
		LCD_Draw_Line(125, 223+i , 125-i, 223+i ,COLOR_BLACK);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	33df      	adds	r3, #223	; 0xdf
 8002f5a:	b299      	uxth	r1, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	33df      	adds	r3, #223	; 0xdf
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2005      	movs	r0, #5
 8002f70:	9000      	str	r0, [sp, #0]
 8002f72:	207d      	movs	r0, #125	; 0x7d
 8002f74:	f7ff fc3e 	bl	80027f4 <LCD_Draw_Line>
	for(int i=0;i<18;i++)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b11      	cmp	r3, #17
 8002f82:	ddd3      	ble.n	8002f2c <LCD_Draw_Base+0x7c>
	}

	//재생상태
	LCD_Draw_Str(230, 174,"CYCLE",COLOR_RED,0);
 8002f84:	2300      	movs	r3, #0
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f8c:	4a84      	ldr	r2, [pc, #528]	; (80031a0 <LCD_Draw_Base+0x2f0>)
 8002f8e:	21ae      	movs	r1, #174	; 0xae
 8002f90:	20e6      	movs	r0, #230	; 0xe6
 8002f92:	f7ff fed5 	bl	8002d40 <LCD_Draw_Str>

	//재생 바 및 재생 시간 표시
	LCD_Draw_Box(60,298,180,300,COLOR_WHITE);
 8002f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002fa0:	22b4      	movs	r2, #180	; 0xb4
 8002fa2:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8002fa6:	203c      	movs	r0, #60	; 0x3c
 8002fa8:	f7ff fefc 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Str(48, 294, "00:00", COLOR_WHITE, 0);
 8002fac:	2300      	movs	r3, #0
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb4:	4a7b      	ldr	r2, [pc, #492]	; (80031a4 <LCD_Draw_Base+0x2f4>)
 8002fb6:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002fba:	2030      	movs	r0, #48	; 0x30
 8002fbc:	f7ff fec0 	bl	8002d40 <LCD_Draw_Str>
	LCD_Draw_Str(220, 294, "00:00",COLOR_WHITE, 0);
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fc8:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <LCD_Draw_Base+0x2f4>)
 8002fca:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002fce:	20dc      	movs	r0, #220	; 0xdc
 8002fd0:	f7ff feb6 	bl	8002d40 <LCD_Draw_Str>

	//볼륨 바 세팅
	LCD_Draw_Box(48, 26,70,150, COLOR_BLACK);
 8002fd4:	2305      	movs	r3, #5
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2396      	movs	r3, #150	; 0x96
 8002fda:	2246      	movs	r2, #70	; 0x46
 8002fdc:	211a      	movs	r1, #26
 8002fde:	2030      	movs	r0, #48	; 0x30
 8002fe0:	f7ff fee0 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Box(50, 28,68,148, COLOR_WHITE);
 8002fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2394      	movs	r3, #148	; 0x94
 8002fec:	2244      	movs	r2, #68	; 0x44
 8002fee:	211c      	movs	r1, #28
 8002ff0:	2032      	movs	r0, #50	; 0x32
 8002ff2:	f7ff fed7 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Str(46, 148, "+", COLOR_BLACK, 0);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2305      	movs	r3, #5
 8002ffc:	4a6a      	ldr	r2, [pc, #424]	; (80031a8 <LCD_Draw_Base+0x2f8>)
 8002ffe:	2194      	movs	r1, #148	; 0x94
 8003000:	202e      	movs	r0, #46	; 0x2e
 8003002:	f7ff fe9d 	bl	8002d40 <LCD_Draw_Str>
	LCD_Draw_Str(74, 148, "-", COLOR_BLACK, 0);
 8003006:	2300      	movs	r3, #0
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2305      	movs	r3, #5
 800300c:	4a67      	ldr	r2, [pc, #412]	; (80031ac <LCD_Draw_Base+0x2fc>)
 800300e:	2194      	movs	r1, #148	; 0x94
 8003010:	204a      	movs	r0, #74	; 0x4a
 8003012:	f7ff fe95 	bl	8002d40 <LCD_Draw_Str>

	//다음 곡 (>)
	for(int i=0;i<23;i++)
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	e02c      	b.n	8003076 <LCD_Draw_Base+0x1c6>
	{
		LCD_Draw_Line(60, 263-i , 60-(1*i), 263-i ,COLOR_WHITE);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f5c3 7383 	rsb	r3, r3, #262	; 0x106
 8003024:	3301      	adds	r3, #1
 8003026:	b299      	uxth	r1, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	b29b      	uxth	r3, r3
 800302c:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8003030:	b29a      	uxth	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f5c3 7383 	rsb	r3, r3, #262	; 0x106
 800303a:	3301      	adds	r3, #1
 800303c:	b29b      	uxth	r3, r3
 800303e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003042:	9000      	str	r0, [sp, #0]
 8003044:	203c      	movs	r0, #60	; 0x3c
 8003046:	f7ff fbd5 	bl	80027f4 <LCD_Draw_Line>
		LCD_Draw_Line(60, 218+i , 60-i, 218+i ,COLOR_WHITE);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	b29b      	uxth	r3, r3
 800304e:	33da      	adds	r3, #218	; 0xda
 8003050:	b299      	uxth	r1, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800305a:	b29a      	uxth	r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	b29b      	uxth	r3, r3
 8003060:	33da      	adds	r3, #218	; 0xda
 8003062:	b29b      	uxth	r3, r3
 8003064:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003068:	9000      	str	r0, [sp, #0]
 800306a:	203c      	movs	r0, #60	; 0x3c
 800306c:	f7ff fbc2 	bl	80027f4 <LCD_Draw_Line>
	for(int i=0;i<23;i++)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3301      	adds	r3, #1
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b16      	cmp	r3, #22
 800307a:	ddcf      	ble.n	800301c <LCD_Draw_Base+0x16c>
	}
	for(int i=0;i<15;i++)
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	e028      	b.n	80030d4 <LCD_Draw_Base+0x224>
	{
			LCD_Draw_Line(60, 255-i , 60-(1*i), 255-(1*i) ,COLOR_BLACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	b29b      	uxth	r3, r3
 8003086:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800308a:	b299      	uxth	r1, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2005      	movs	r0, #5
 80030a2:	9000      	str	r0, [sp, #0]
 80030a4:	203c      	movs	r0, #60	; 0x3c
 80030a6:	f7ff fba5 	bl	80027f4 <LCD_Draw_Line>
			LCD_Draw_Line(60, 226+i , 60-i, 226+i ,COLOR_BLACK);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	33e2      	adds	r3, #226	; 0xe2
 80030b0:	b299      	uxth	r1, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	33e2      	adds	r3, #226	; 0xe2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2005      	movs	r0, #5
 80030c6:	9000      	str	r0, [sp, #0]
 80030c8:	203c      	movs	r0, #60	; 0x3c
 80030ca:	f7ff fb93 	bl	80027f4 <LCD_Draw_Line>
	for(int i=0;i<15;i++)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b0e      	cmp	r3, #14
 80030d8:	ddd3      	ble.n	8003082 <LCD_Draw_Base+0x1d2>
	}

	//이전 곡 (<)
	for(int i=0;i<23;i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	e02a      	b.n	8003136 <LCD_Draw_Base+0x286>
	{
		LCD_Draw_Line(180, 263-i , 180+i, 263-i ,COLOR_WHITE);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f5c3 7383 	rsb	r3, r3, #262	; 0x106
 80030e8:	3301      	adds	r3, #1
 80030ea:	b299      	uxth	r1, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	33b4      	adds	r3, #180	; 0xb4
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f5c3 7383 	rsb	r3, r3, #262	; 0x106
 80030fc:	3301      	adds	r3, #1
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003104:	9000      	str	r0, [sp, #0]
 8003106:	20b4      	movs	r0, #180	; 0xb4
 8003108:	f7ff fb74 	bl	80027f4 <LCD_Draw_Line>
		LCD_Draw_Line(180, 218+i , 180+i, 218+i ,COLOR_WHITE);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	b29b      	uxth	r3, r3
 8003110:	33da      	adds	r3, #218	; 0xda
 8003112:	b299      	uxth	r1, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	b29b      	uxth	r3, r3
 8003118:	33b4      	adds	r3, #180	; 0xb4
 800311a:	b29a      	uxth	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	b29b      	uxth	r3, r3
 8003120:	33da      	adds	r3, #218	; 0xda
 8003122:	b29b      	uxth	r3, r3
 8003124:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003128:	9000      	str	r0, [sp, #0]
 800312a:	20b4      	movs	r0, #180	; 0xb4
 800312c:	f7ff fb62 	bl	80027f4 <LCD_Draw_Line>
	for(int i=0;i<23;i++)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	3301      	adds	r3, #1
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b16      	cmp	r3, #22
 800313a:	ddd1      	ble.n	80030e0 <LCD_Draw_Base+0x230>
	}
	for(int i=0;i<15;i++)
 800313c:	2300      	movs	r3, #0
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	e026      	b.n	8003190 <LCD_Draw_Base+0x2e0>
	{
			LCD_Draw_Line(180, 255-i , 180+i, 255-i ,COLOR_BLACK);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	b29b      	uxth	r3, r3
 8003146:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800314a:	b299      	uxth	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	b29b      	uxth	r3, r3
 8003150:	33b4      	adds	r3, #180	; 0xb4
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800315c:	b29b      	uxth	r3, r3
 800315e:	2005      	movs	r0, #5
 8003160:	9000      	str	r0, [sp, #0]
 8003162:	20b4      	movs	r0, #180	; 0xb4
 8003164:	f7ff fb46 	bl	80027f4 <LCD_Draw_Line>
			LCD_Draw_Line(180, 226+i , 180+i, 226+i ,COLOR_BLACK);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	b29b      	uxth	r3, r3
 800316c:	33e2      	adds	r3, #226	; 0xe2
 800316e:	b299      	uxth	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	b29b      	uxth	r3, r3
 8003174:	33b4      	adds	r3, #180	; 0xb4
 8003176:	b29a      	uxth	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	b29b      	uxth	r3, r3
 800317c:	33e2      	adds	r3, #226	; 0xe2
 800317e:	b29b      	uxth	r3, r3
 8003180:	2005      	movs	r0, #5
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	20b4      	movs	r0, #180	; 0xb4
 8003186:	f7ff fb35 	bl	80027f4 <LCD_Draw_Line>
	for(int i=0;i<15;i++)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3301      	adds	r3, #1
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b0e      	cmp	r3, #14
 8003194:	ddd5      	ble.n	8003142 <LCD_Draw_Base+0x292>
	}
}
 8003196:	bf00      	nop
 8003198:	bf00      	nop
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	0800f8c0 	.word	0x0800f8c0
 80031a4:	0800f8c8 	.word	0x0800f8c8
 80031a8:	0800f8d0 	.word	0x0800f8d0
 80031ac:	0800f8bc 	.word	0x0800f8bc

080031b0 <LCD_Draw_Resume>:
void LCD_Draw_Resume()		//재생표시
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af02      	add	r7, sp, #8
	//재생버튼 제거
	for(int i=0;i<18;i++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	e02a      	b.n	8003212 <LCD_Draw_Resume+0x62>
	{
		LCD_Draw_Line(125, 258-i , 125-(1*i), 258-(1*i) ,COLOR_WHITE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
 80031c4:	b299      	uxth	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031de:	9000      	str	r0, [sp, #0]
 80031e0:	207d      	movs	r0, #125	; 0x7d
 80031e2:	f7ff fb07 	bl	80027f4 <LCD_Draw_Line>
		LCD_Draw_Line(125, 223+i , 125-i, 223+i ,COLOR_WHITE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	33df      	adds	r3, #223	; 0xdf
 80031ec:	b299      	uxth	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	33df      	adds	r3, #223	; 0xdf
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003204:	9000      	str	r0, [sp, #0]
 8003206:	207d      	movs	r0, #125	; 0x7d
 8003208:	f7ff faf4 	bl	80027f4 <LCD_Draw_Line>
	for(int i=0;i<18;i++)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3301      	adds	r3, #1
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b11      	cmp	r3, #17
 8003216:	ddd1      	ble.n	80031bc <LCD_Draw_Resume+0xc>
	}
	//정지버튼 생성
	LCD_Draw_Box(123,230,128,250,COLOR_BLACK);
 8003218:	2305      	movs	r3, #5
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	23fa      	movs	r3, #250	; 0xfa
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	21e6      	movs	r1, #230	; 0xe6
 8003222:	207b      	movs	r0, #123	; 0x7b
 8003224:	f7ff fdbe 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Box(112,230,117,250,COLOR_BLACK);
 8003228:	2305      	movs	r3, #5
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	23fa      	movs	r3, #250	; 0xfa
 800322e:	2275      	movs	r2, #117	; 0x75
 8003230:	21e6      	movs	r1, #230	; 0xe6
 8003232:	2070      	movs	r0, #112	; 0x70
 8003234:	f7ff fdb6 	bl	8002da4 <LCD_Draw_Box>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <LCD_Draw_Pause>:
void LCD_Draw_Pause()		//정지표시
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af02      	add	r7, sp, #8
	//정지버튼 제거
	LCD_Draw_Box(123,230,128,250,COLOR_WHITE);
 8003246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	23fa      	movs	r3, #250	; 0xfa
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	21e6      	movs	r1, #230	; 0xe6
 8003252:	207b      	movs	r0, #123	; 0x7b
 8003254:	f7ff fda6 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Box(112,230,117,250,COLOR_WHITE);
 8003258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	23fa      	movs	r3, #250	; 0xfa
 8003260:	2275      	movs	r2, #117	; 0x75
 8003262:	21e6      	movs	r1, #230	; 0xe6
 8003264:	2070      	movs	r0, #112	; 0x70
 8003266:	f7ff fd9d 	bl	8002da4 <LCD_Draw_Box>

	//재생버튼 추가
	for(int i=0;i<18;i++)
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	e028      	b.n	80032c2 <LCD_Draw_Pause+0x82>
	{
		LCD_Draw_Line(125, 258-i , 125-(1*i), 258-(1*i) ,COLOR_BLACK);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
 8003278:	b299      	uxth	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8003282:	b29a      	uxth	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
 800328c:	b29b      	uxth	r3, r3
 800328e:	2005      	movs	r0, #5
 8003290:	9000      	str	r0, [sp, #0]
 8003292:	207d      	movs	r0, #125	; 0x7d
 8003294:	f7ff faae 	bl	80027f4 <LCD_Draw_Line>
		LCD_Draw_Line(125, 223+i , 125-i, 223+i ,COLOR_BLACK);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	b29b      	uxth	r3, r3
 800329c:	33df      	adds	r3, #223	; 0xdf
 800329e:	b299      	uxth	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	33df      	adds	r3, #223	; 0xdf
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2005      	movs	r0, #5
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	207d      	movs	r0, #125	; 0x7d
 80032b8:	f7ff fa9c 	bl	80027f4 <LCD_Draw_Line>
	for(int i=0;i<18;i++)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3301      	adds	r3, #1
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b11      	cmp	r3, #17
 80032c6:	ddd3      	ble.n	8003270 <LCD_Draw_Pause+0x30>
	}

}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <LCD_Play_Flow>:
void LCD_Play_Flow()		//현재 재생곡 표시
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af02      	add	r7, sp, #8
	//이전 파일의 정보 삭제
	LCD_Draw_Box(20, 287,50,306, COLOR_BLACK);
 80032da:	2305      	movs	r3, #5
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	f44f 7399 	mov.w	r3, #306	; 0x132
 80032e2:	2232      	movs	r2, #50	; 0x32
 80032e4:	f240 111f 	movw	r1, #287	; 0x11f
 80032e8:	2014      	movs	r0, #20
 80032ea:	f7ff fd5b 	bl	8002da4 <LCD_Draw_Box>
	LCD_Draw_Box(40,187,200,205,COLOR_BLACK);
 80032ee:	2305      	movs	r3, #5
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	23cd      	movs	r3, #205	; 0xcd
 80032f4:	22c8      	movs	r2, #200	; 0xc8
 80032f6:	21bb      	movs	r1, #187	; 0xbb
 80032f8:	2028      	movs	r0, #40	; 0x28
 80032fa:	f7ff fd53 	bl	8002da4 <LCD_Draw_Box>

	//재생 될 노래의 제목 표시
	LCD_Draw_Str(157, 187,filname[musicfil[playstate]],COLOR_WHITE,1);
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <LCD_Play_Flow+0x94>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <LCD_Play_Flow+0x98>)
 8003306:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800330a:	461a      	mov	r2, r3
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4a16      	ldr	r2, [pc, #88]	; (8003370 <LCD_Play_Flow+0x9c>)
 8003316:	441a      	add	r2, r3
 8003318:	2301      	movs	r3, #1
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003320:	21bb      	movs	r1, #187	; 0xbb
 8003322:	209d      	movs	r0, #157	; 0x9d
 8003324:	f7ff fd0c 	bl	8002d40 <LCD_Draw_Str>

	//재생 될 노래의 길이 표시
	playTime();
 8003328:	f000 fe6a 	bl	8004000 <playTime>

	//재생 될 노래의 번호 표시
	char playpoint[8];
	LCD_Draw_Box(100,172,160,183,COLOR_BLACK);
 800332c:	2305      	movs	r3, #5
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	23b7      	movs	r3, #183	; 0xb7
 8003332:	22a0      	movs	r2, #160	; 0xa0
 8003334:	21ac      	movs	r1, #172	; 0xac
 8003336:	2064      	movs	r0, #100	; 0x64
 8003338:	f7ff fd34 	bl	8002da4 <LCD_Draw_Box>
	sprintf(playpoint,"%d/%d",playstate+1,musiccnt);
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <LCD_Play_Flow+0x94>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <LCD_Play_Flow+0xa0>)
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	4638      	mov	r0, r7
 8003348:	490b      	ldr	r1, [pc, #44]	; (8003378 <LCD_Play_Flow+0xa4>)
 800334a:	f00b f8fd 	bl	800e548 <siprintf>
	LCD_Draw_Str(159, 171,playpoint,COLOR_WHITE,0);
 800334e:	463a      	mov	r2, r7
 8003350:	2300      	movs	r3, #0
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003358:	21ab      	movs	r1, #171	; 0xab
 800335a:	209f      	movs	r0, #159	; 0x9f
 800335c:	f7ff fcf0 	bl	8002d40 <LCD_Draw_Str>

}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20001340 	.word	0x20001340
 800336c:	20000eac 	.word	0x20000eac
 8003370:	20000598 	.word	0x20000598
 8003374:	200000be 	.word	0x200000be
 8003378:	0800f8b4 	.word	0x0800f8b4

0800337c <LCD_Vol_Display>:
void LCD_Vol_Display(bool change,bool voloff)	//볼륨 바 변경
{
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b094      	sub	sp, #80	; 0x50
 8003380:	af02      	add	r7, sp, #8
 8003382:	4603      	mov	r3, r0
 8003384:	460a      	mov	r2, r1
 8003386:	71fb      	strb	r3, [r7, #7]
 8003388:	4613      	mov	r3, r2
 800338a:	71bb      	strb	r3, [r7, #6]
	//볼륨 바 간격 조정
	int vol_bluck[16]={148,140,132,124,116,108,100,92,84,76,68,60,52,44,36,28};
 800338c:	4b68      	ldr	r3, [pc, #416]	; (8003530 <LCD_Vol_Display+0x1b4>)
 800338e:	f107 0408 	add.w	r4, r7, #8
 8003392:	461d      	mov	r5, r3
 8003394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800339a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800339c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800339e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	//볼륨 바가 존재하는 경우
	if(!voloff)
 80033a8:	79bb      	ldrb	r3, [r7, #6]
 80033aa:	f083 0301 	eor.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d054      	beq.n	800345e <LCD_Vol_Display+0xe2>
	{
		if(change==1&&vol_state!=15)	//볼륨바를 한칸 증가
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d023      	beq.n	8003402 <LCD_Vol_Display+0x86>
 80033ba:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	d01f      	beq.n	8003402 <LCD_Vol_Display+0x86>
		{
			Codex_Vol_up();
 80033c2:	f000 fcb9 	bl	8003d38 <Codex_Vol_up>
			vol_state++;
 80033c6:	4b5b      	ldr	r3, [pc, #364]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	4a59      	ldr	r2, [pc, #356]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80033ce:	6013      	str	r3, [r2, #0]
			LCD_Draw_Box(50, vol_bluck[vol_state],68,vol_bluck[vol_state-1], COLOR_BLACK);
 80033d0:	4b58      	ldr	r3, [pc, #352]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80033da:	4413      	add	r3, r2
 80033dc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80033e0:	b299      	uxth	r1, r3
 80033e2:	4b54      	ldr	r3, [pc, #336]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80033ee:	4413      	add	r3, r2
 80033f0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2205      	movs	r2, #5
 80033f8:	9200      	str	r2, [sp, #0]
 80033fa:	2244      	movs	r2, #68	; 0x44
 80033fc:	2032      	movs	r0, #50	; 0x32
 80033fe:	f7ff fcd1 	bl	8002da4 <LCD_Draw_Box>
		}
		if(change==0&&vol_state!=0)		//볼륨바를 한칸 감소
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	f083 0301 	eor.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 808c 	beq.w	8003528 <LCD_Vol_Display+0x1ac>
 8003410:	4b48      	ldr	r3, [pc, #288]	; (8003534 <LCD_Vol_Display+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8087 	beq.w	8003528 <LCD_Vol_Display+0x1ac>
		{
			Codex_Vol_down();
 800341a:	f000 fcb1 	bl	8003d80 <Codex_Vol_down>
			vol_state--;
 800341e:	4b45      	ldr	r3, [pc, #276]	; (8003534 <LCD_Vol_Display+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3b01      	subs	r3, #1
 8003424:	4a43      	ldr	r2, [pc, #268]	; (8003534 <LCD_Vol_Display+0x1b8>)
 8003426:	6013      	str	r3, [r2, #0]
			LCD_Draw_Box(50, vol_bluck[vol_state+1],68,vol_bluck[vol_state], COLOR_WHITE);
 8003428:	4b42      	ldr	r3, [pc, #264]	; (8003534 <LCD_Vol_Display+0x1b8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003434:	4413      	add	r3, r2
 8003436:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800343a:	b299      	uxth	r1, r3
 800343c:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <LCD_Vol_Display+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003446:	4413      	add	r3, r2
 8003448:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003452:	9200      	str	r2, [sp, #0]
 8003454:	2244      	movs	r2, #68	; 0x44
 8003456:	2032      	movs	r0, #50	; 0x32
 8003458:	f7ff fca4 	bl	8002da4 <LCD_Draw_Box>
		//볼륨바가 존재한다고 알림
		voloff=0;
	}


}
 800345c:	e064      	b.n	8003528 <LCD_Vol_Display+0x1ac>
		LCD_Draw_Char1(80, 60,COLOR_WHITE,20 ,31);
 800345e:	231f      	movs	r3, #31
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2314      	movs	r3, #20
 8003464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003468:	213c      	movs	r1, #60	; 0x3c
 800346a:	2050      	movs	r0, #80	; 0x50
 800346c:	f7ff fc06 	bl	8002c7c <LCD_Draw_Char1>
		LCD_Draw_Box(48, 26,70,150, COLOR_BLACK);
 8003470:	2305      	movs	r3, #5
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2396      	movs	r3, #150	; 0x96
 8003476:	2246      	movs	r2, #70	; 0x46
 8003478:	211a      	movs	r1, #26
 800347a:	2030      	movs	r0, #48	; 0x30
 800347c:	f7ff fc92 	bl	8002da4 <LCD_Draw_Box>
		LCD_Draw_Str(46, 148, "+", COLOR_BLACK, 0);
 8003480:	2300      	movs	r3, #0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2305      	movs	r3, #5
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <LCD_Vol_Display+0x1bc>)
 8003488:	2194      	movs	r1, #148	; 0x94
 800348a:	202e      	movs	r0, #46	; 0x2e
 800348c:	f7ff fc58 	bl	8002d40 <LCD_Draw_Str>
		LCD_Draw_Str(74, 148, "-", COLOR_BLACK, 0);
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2305      	movs	r3, #5
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <LCD_Vol_Display+0x1c0>)
 8003498:	2194      	movs	r1, #148	; 0x94
 800349a:	204a      	movs	r0, #74	; 0x4a
 800349c:	f7ff fc50 	bl	8002d40 <LCD_Draw_Str>
		if(change==1&&vol_state!=15)	//볼륨업
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01c      	beq.n	80034e0 <LCD_Vol_Display+0x164>
 80034a6:	4b23      	ldr	r3, [pc, #140]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b0f      	cmp	r3, #15
 80034ac:	d018      	beq.n	80034e0 <LCD_Vol_Display+0x164>
			Codex_Vol_up();
 80034ae:	f000 fc43 	bl	8003d38 <Codex_Vol_up>
			vol_state++;
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80034ba:	6013      	str	r3, [r2, #0]
			LCD_Draw_Box(50, 28,68,vol_bluck[vol_state], COLOR_WHITE);
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80034c6:	4413      	add	r3, r2
 80034c8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d2:	9200      	str	r2, [sp, #0]
 80034d4:	2244      	movs	r2, #68	; 0x44
 80034d6:	211c      	movs	r1, #28
 80034d8:	2032      	movs	r0, #50	; 0x32
 80034da:	f7ff fc63 	bl	8002da4 <LCD_Draw_Box>
 80034de:	e021      	b.n	8003524 <LCD_Vol_Display+0x1a8>
		else if(change==0&&vol_state!=0)//볼륨다운
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	f083 0301 	eor.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01b      	beq.n	8003524 <LCD_Vol_Display+0x1a8>
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d017      	beq.n	8003524 <LCD_Vol_Display+0x1a8>
			Codex_Vol_down();
 80034f4:	f000 fc44 	bl	8003d80 <Codex_Vol_down>
			vol_state--;
 80034f8:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <LCD_Vol_Display+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <LCD_Vol_Display+0x1b8>)
 8003500:	6013      	str	r3, [r2, #0]
			LCD_Draw_Box(50, 28,68,vol_bluck[vol_state], COLOR_WHITE);
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <LCD_Vol_Display+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800350c:	4413      	add	r3, r2
 800350e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003518:	9200      	str	r2, [sp, #0]
 800351a:	2244      	movs	r2, #68	; 0x44
 800351c:	211c      	movs	r1, #28
 800351e:	2032      	movs	r0, #50	; 0x32
 8003520:	f7ff fc40 	bl	8002da4 <LCD_Draw_Box>
		voloff=0;
 8003524:	2300      	movs	r3, #0
 8003526:	71bb      	strb	r3, [r7, #6]
}
 8003528:	bf00      	nop
 800352a:	3748      	adds	r7, #72	; 0x48
 800352c:	46bd      	mov	sp, r7
 800352e:	bdb0      	pop	{r4, r5, r7, pc}
 8003530:	0800f8d4 	.word	0x0800f8d4
 8003534:	200000d0 	.word	0x200000d0
 8003538:	0800f8d0 	.word	0x0800f8d0
 800353c:	0800f8bc 	.word	0x0800f8bc

08003540 <LCD_PlayBar>:
void LCD_PlayBar(int per)	//노래 재생량 표시 (크기가 작아 처음부터 재생 위치 까지 그림)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af02      	add	r7, sp, #8
 8003546:	6078      	str	r0, [r7, #4]
	if(per!=0)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d017      	beq.n	800357e <LCD_PlayBar+0x3e>
		LCD_Draw_Box(180-(per*12/10),298,180,300,COLOR_RED);
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <LCD_PlayBar+0x48>)
 800355a:	fb82 1203 	smull	r1, r2, r2, r3
 800355e:	1092      	asrs	r2, r2, #2
 8003560:	17db      	asrs	r3, r3, #31
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	b29b      	uxth	r3, r3
 8003566:	33b4      	adds	r3, #180	; 0xb4
 8003568:	b298      	uxth	r0, r3
 800356a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003574:	22b4      	movs	r2, #180	; 0xb4
 8003576:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800357a:	f7ff fc13 	bl	8002da4 <LCD_Draw_Box>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	66666667 	.word	0x66666667

0800358c <LCD_Out_Time>:
void LCD_Out_Time()	//마지막으로 작동시킨 시간 초기화
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
	timeout=0;
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <LCD_Out_Time+0x14>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
	LCD_BL_on();
 8003596:	f7fe ff7b 	bl	8002490 <LCD_BL_on>
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200000b4 	.word	0x200000b4

080035a4 <LCD_Type>:
void LCD_Type(int type)		//재생타입 표시
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
	//사이클이 일정하여 타입이 바뀌는 경우 이전 글자 제거 후 표시
	if(type==MUSIC_STOP)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d110      	bne.n	80035d4 <LCD_Type+0x30>
	{

		LCD_Draw_Str(230, 174,"REPLAY",COLOR_BLACK,0);
 80035b2:	2300      	movs	r3, #0
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2305      	movs	r3, #5
 80035b8:	4a26      	ldr	r2, [pc, #152]	; (8003654 <LCD_Type+0xb0>)
 80035ba:	21ae      	movs	r1, #174	; 0xae
 80035bc:	20e6      	movs	r0, #230	; 0xe6
 80035be:	f7ff fbbf 	bl	8002d40 <LCD_Draw_Str>
		LCD_Draw_Str(230, 174,"STOP",COLOR_RED,0);
 80035c2:	2300      	movs	r3, #0
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035ca:	4a23      	ldr	r2, [pc, #140]	; (8003658 <LCD_Type+0xb4>)
 80035cc:	21ae      	movs	r1, #174	; 0xae
 80035ce:	20e6      	movs	r0, #230	; 0xe6
 80035d0:	f7ff fbb6 	bl	8002d40 <LCD_Draw_Str>
	}
	if(type==MUSIC_CYCLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d110      	bne.n	80035fc <LCD_Type+0x58>
	{
		LCD_Draw_Str(230, 174,"STOP",COLOR_BLACK,0);
 80035da:	2300      	movs	r3, #0
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2305      	movs	r3, #5
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <LCD_Type+0xb4>)
 80035e2:	21ae      	movs	r1, #174	; 0xae
 80035e4:	20e6      	movs	r0, #230	; 0xe6
 80035e6:	f7ff fbab 	bl	8002d40 <LCD_Draw_Str>
		LCD_Draw_Str(230, 174,"CYCLE",COLOR_RED,0);
 80035ea:	2300      	movs	r3, #0
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <LCD_Type+0xb8>)
 80035f4:	21ae      	movs	r1, #174	; 0xae
 80035f6:	20e6      	movs	r0, #230	; 0xe6
 80035f8:	f7ff fba2 	bl	8002d40 <LCD_Draw_Str>
	}
	if(type==MUSIC_SHUFFLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d110      	bne.n	8003624 <LCD_Type+0x80>
	{
		LCD_Draw_Str(230, 174,"CYCLE",COLOR_BLACK,0);
 8003602:	2300      	movs	r3, #0
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2305      	movs	r3, #5
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <LCD_Type+0xb8>)
 800360a:	21ae      	movs	r1, #174	; 0xae
 800360c:	20e6      	movs	r0, #230	; 0xe6
 800360e:	f7ff fb97 	bl	8002d40 <LCD_Draw_Str>
		LCD_Draw_Str(230, 174,"RAMDOM",COLOR_RED,0);
 8003612:	2300      	movs	r3, #0
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800361a:	4a11      	ldr	r2, [pc, #68]	; (8003660 <LCD_Type+0xbc>)
 800361c:	21ae      	movs	r1, #174	; 0xae
 800361e:	20e6      	movs	r0, #230	; 0xe6
 8003620:	f7ff fb8e 	bl	8002d40 <LCD_Draw_Str>
	}
	if(type==MUSIC_RECYCLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d110      	bne.n	800364c <LCD_Type+0xa8>
	{
		LCD_Draw_Str(230, 174,"RAMDOM",COLOR_BLACK,0);
 800362a:	2300      	movs	r3, #0
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2305      	movs	r3, #5
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <LCD_Type+0xbc>)
 8003632:	21ae      	movs	r1, #174	; 0xae
 8003634:	20e6      	movs	r0, #230	; 0xe6
 8003636:	f7ff fb83 	bl	8002d40 <LCD_Draw_Str>
		LCD_Draw_Str(230, 174,"REPLAY",COLOR_RED,0);
 800363a:	2300      	movs	r3, #0
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003642:	4a04      	ldr	r2, [pc, #16]	; (8003654 <LCD_Type+0xb0>)
 8003644:	21ae      	movs	r1, #174	; 0xae
 8003646:	20e6      	movs	r0, #230	; 0xe6
 8003648:	f7ff fb7a 	bl	8002d40 <LCD_Draw_Str>
	}
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	0800f914 	.word	0x0800f914
 8003658:	0800f91c 	.word	0x0800f91c
 800365c:	0800f8c0 	.word	0x0800f8c0
 8003660:	0800f924 	.word	0x0800f924

08003664 <Codex_reg_write>:

	*data = (pRxData[2]<<8) | pRxData[3];
}

void Codex_reg_write(uint8_t addr, uint16_t data)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af02      	add	r7, sp, #8
 800366a:	4603      	mov	r3, r0
 800366c:	460a      	mov	r2, r1
 800366e:	71fb      	strb	r3, [r7, #7]
 8003670:	4613      	mov	r3, r2
 8003672:	80bb      	strh	r3, [r7, #4]
	uint8_t pTxData[4];
	uint8_t pRxData[4];

	pTxData[0] = CODEX_WRITE;
 8003674:	2302      	movs	r3, #2
 8003676:	733b      	strb	r3, [r7, #12]
	pTxData[1] = addr;
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	737b      	strb	r3, [r7, #13]
	pTxData[2] = 0xff & (data >> 8);
 800367c:	88bb      	ldrh	r3, [r7, #4]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	b29b      	uxth	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	73bb      	strb	r3, [r7, #14]
	pTxData[3] = 0xff & data;
 8003686:	88bb      	ldrh	r3, [r7, #4]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	73fb      	strb	r3, [r7, #15]


	while(HAL_GPIO_ReadPin(VS_DERQ_GPIO_Port, VS_DERQ_Pin) ==  GPIO_PIN_RESET);
 800368c:	bf00      	nop
 800368e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003692:	480f      	ldr	r0, [pc, #60]	; (80036d0 <Codex_reg_write+0x6c>)
 8003694:	f002 fbe6 	bl	8005e64 <HAL_GPIO_ReadPin>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f7      	beq.n	800368e <Codex_reg_write+0x2a>

	HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, GPIO_PIN_RESET);  //CS low
 800369e:	2200      	movs	r2, #0
 80036a0:	2180      	movs	r1, #128	; 0x80
 80036a2:	480c      	ldr	r0, [pc, #48]	; (80036d4 <Codex_reg_write+0x70>)
 80036a4:	f002 fbf5 	bl	8005e92 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 4, 100);
 80036a8:	f107 0208 	add.w	r2, r7, #8
 80036ac:	f107 010c 	add.w	r1, r7, #12
 80036b0:	2364      	movs	r3, #100	; 0x64
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2304      	movs	r3, #4
 80036b6:	4808      	ldr	r0, [pc, #32]	; (80036d8 <Codex_reg_write+0x74>)
 80036b8:	f005 f818 	bl	80086ec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, GPIO_PIN_SET);  //CS high
 80036bc:	2201      	movs	r2, #1
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	4804      	ldr	r0, [pc, #16]	; (80036d4 <Codex_reg_write+0x70>)
 80036c2:	f002 fbe6 	bl	8005e92 <HAL_GPIO_WritePin>

}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40011000 	.word	0x40011000
 80036d4:	40011c00 	.word	0x40011c00
 80036d8:	20001290 	.word	0x20001290

080036dc <Codex_Vol>:
{
	Codex_reg_write(CODEX_REG_VOL, 0xffff);
}

void Codex_Vol(uint16_t vol)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	80fb      	strh	r3, [r7, #6]
	Codex_reg_write(CODEX_REG_VOL, vol);
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	4619      	mov	r1, r3
 80036ea:	200b      	movs	r0, #11
 80036ec:	f7ff ffba 	bl	8003664 <Codex_reg_write>
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <Codex_Speaker_on>:

void Codex_Speaker_on()
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
	Codex_reg_write(CODEX_REG_WRAMADDR, CODEX_MEM_DDR);
 80036fc:	f24c 0117 	movw	r1, #49175	; 0xc017
 8003700:	2007      	movs	r0, #7
 8003702:	f7ff ffaf 	bl	8003664 <Codex_reg_write>
	Codex_reg_write(CODEX_REG_WRAM, 0x10);
 8003706:	2110      	movs	r1, #16
 8003708:	2006      	movs	r0, #6
 800370a:	f7ff ffab 	bl	8003664 <Codex_reg_write>

	Codex_reg_write(CODEX_REG_WRAMADDR, CODEX_MEM_ODATA);
 800370e:	f24c 0119 	movw	r1, #49177	; 0xc019
 8003712:	2007      	movs	r0, #7
 8003714:	f7ff ffa6 	bl	8003664 <Codex_reg_write>
	Codex_reg_write(CODEX_REG_WRAM, 0x10);
 8003718:	2110      	movs	r1, #16
 800371a:	2006      	movs	r0, #6
 800371c:	f7ff ffa2 	bl	8003664 <Codex_reg_write>
}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}

08003724 <downclick>:
	Codex_reg_write(CODEX_REG_WRAMADDR, CODEX_MEM_ODATA);
	Codex_reg_write(CODEX_REG_WRAM, 0x00);
}

void downclick()		//버튼식 이전곡으로 변경
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b087      	sub	sp, #28
 8003728:	af02      	add	r7, sp, #8


	//버튼식 커서 값 다운
	q-=1;
 800372a:	4b9c      	ldr	r3, [pc, #624]	; (800399c <downclick+0x278>)
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	4b9a      	ldr	r3, [pc, #616]	; (800399c <downclick+0x278>)
 8003734:	801a      	strh	r2, [r3, #0]

	//uint로 선언하여 65535(-1)로 이동할 경우 파일의 마지막 값으로 이동
	if(q==65535)
 8003736:	4b99      	ldr	r3, [pc, #612]	; (800399c <downclick+0x278>)
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800373e:	4293      	cmp	r3, r2
 8003740:	f040 8088 	bne.w	8003854 <downclick+0x130>
	{
		q=musiccnt-1;
 8003744:	4b96      	ldr	r3, [pc, #600]	; (80039a0 <downclick+0x27c>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	4b93      	ldr	r3, [pc, #588]	; (800399c <downclick+0x278>)
 800374e:	801a      	strh	r2, [r3, #0]

		//이전 메뉴 제거
		for(int i=0;i<MENUCNT;i++)
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	e01a      	b.n	800378c <downclick+0x68>
			LCD_Draw_Str(200, 40+16*i, filname[musicfil[i]],COLOR_WHITE,1);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	b29b      	uxth	r3, r3
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	b29b      	uxth	r3, r3
 800375e:	3328      	adds	r3, #40	; 0x28
 8003760:	b299      	uxth	r1, r3
 8003762:	4a90      	ldr	r2, [pc, #576]	; (80039a4 <downclick+0x280>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800376a:	461a      	mov	r2, r3
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4a8c      	ldr	r2, [pc, #560]	; (80039a8 <downclick+0x284>)
 8003776:	441a      	add	r2, r3
 8003778:	2301      	movs	r3, #1
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003780:	20c8      	movs	r0, #200	; 0xc8
 8003782:	f7ff fadd 	bl	8002d40 <LCD_Draw_Str>
		for(int i=0;i<MENUCNT;i++)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3301      	adds	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b05      	cmp	r3, #5
 8003790:	dde1      	ble.n	8003756 <downclick+0x32>
		LCD_Draw_Str(210, 40,"-",COLOR_WHITE,1);
 8003792:	2301      	movs	r3, #1
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800379a:	4a84      	ldr	r2, [pc, #528]	; (80039ac <downclick+0x288>)
 800379c:	2128      	movs	r1, #40	; 0x28
 800379e:	20d2      	movs	r0, #210	; 0xd2
 80037a0:	f7ff face 	bl	8002d40 <LCD_Draw_Str>

		//현재 메뉴 표시
		for(int i=0;i<(musiccnt%MENUCNT);i++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	e02b      	b.n	8003802 <downclick+0xde>
			LCD_Draw_Str(200, 40+16*i, filname[musicfil[musiccnt-(musiccnt%MENUCNT)+i]],COLOR_BLACK,1);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3328      	adds	r3, #40	; 0x28
 80037b4:	b298      	uxth	r0, r3
 80037b6:	4b7a      	ldr	r3, [pc, #488]	; (80039a0 <downclick+0x27c>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	461c      	mov	r4, r3
 80037bc:	4b78      	ldr	r3, [pc, #480]	; (80039a0 <downclick+0x27c>)
 80037be:	881a      	ldrh	r2, [r3, #0]
 80037c0:	4b7b      	ldr	r3, [pc, #492]	; (80039b0 <downclick+0x28c>)
 80037c2:	fba3 1302 	umull	r1, r3, r3, r2
 80037c6:	0899      	lsrs	r1, r3, #2
 80037c8:	460b      	mov	r3, r1
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	440b      	add	r3, r1
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	1ae2      	subs	r2, r4, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4413      	add	r3, r2
 80037da:	4a72      	ldr	r2, [pc, #456]	; (80039a4 <downclick+0x280>)
 80037dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4a6f      	ldr	r2, [pc, #444]	; (80039a8 <downclick+0x284>)
 80037ec:	441a      	add	r2, r3
 80037ee:	2301      	movs	r3, #1
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2305      	movs	r3, #5
 80037f4:	4601      	mov	r1, r0
 80037f6:	20c8      	movs	r0, #200	; 0xc8
 80037f8:	f7ff faa2 	bl	8002d40 <LCD_Draw_Str>
		for(int i=0;i<(musiccnt%MENUCNT);i++)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	3301      	adds	r3, #1
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	4b67      	ldr	r3, [pc, #412]	; (80039a0 <downclick+0x27c>)
 8003804:	881a      	ldrh	r2, [r3, #0]
 8003806:	4b6a      	ldr	r3, [pc, #424]	; (80039b0 <downclick+0x28c>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	0899      	lsrs	r1, r3, #2
 800380e:	460b      	mov	r3, r1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	440b      	add	r3, r1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	b29b      	uxth	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4293      	cmp	r3, r2
 8003820:	dbc3      	blt.n	80037aa <downclick+0x86>
		LCD_Draw_Str(210, 40+16*((musiccnt-1)%MENUCNT),"-",COLOR_BLACK,1);
 8003822:	4b5f      	ldr	r3, [pc, #380]	; (80039a0 <downclick+0x27c>)
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	1e5a      	subs	r2, r3, #1
 8003828:	4b62      	ldr	r3, [pc, #392]	; (80039b4 <downclick+0x290>)
 800382a:	fb83 3102 	smull	r3, r1, r3, r2
 800382e:	17d3      	asrs	r3, r2, #31
 8003830:	1ac9      	subs	r1, r1, r3
 8003832:	460b      	mov	r3, r1
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	440b      	add	r3, r1
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	1ad1      	subs	r1, r2, r3
 800383c:	b28b      	uxth	r3, r1
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	b29b      	uxth	r3, r3
 8003842:	3328      	adds	r3, #40	; 0x28
 8003844:	b299      	uxth	r1, r3
 8003846:	2301      	movs	r3, #1
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2305      	movs	r3, #5
 800384c:	4a57      	ldr	r2, [pc, #348]	; (80039ac <downclick+0x288>)
 800384e:	20d2      	movs	r0, #210	; 0xd2
 8003850:	f7ff fa76 	bl	8002d40 <LCD_Draw_Str>
	}

	//버튼식 커서의 위치를 표시하는  '-'위치만 이동
	LCD_Draw_Str(210, 40+16*((q+1)%MENUCNT),"-",COLOR_WHITE,1);
 8003854:	4b51      	ldr	r3, [pc, #324]	; (800399c <downclick+0x278>)
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	4b56      	ldr	r3, [pc, #344]	; (80039b4 <downclick+0x290>)
 800385c:	fb83 3102 	smull	r3, r1, r3, r2
 8003860:	17d3      	asrs	r3, r2, #31
 8003862:	1ac9      	subs	r1, r1, r3
 8003864:	460b      	mov	r3, r1
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	440b      	add	r3, r1
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	1ad1      	subs	r1, r2, r3
 800386e:	b28b      	uxth	r3, r1
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	b29b      	uxth	r3, r3
 8003874:	3328      	adds	r3, #40	; 0x28
 8003876:	b299      	uxth	r1, r3
 8003878:	2301      	movs	r3, #1
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003880:	4a4a      	ldr	r2, [pc, #296]	; (80039ac <downclick+0x288>)
 8003882:	20d2      	movs	r0, #210	; 0xd2
 8003884:	f7ff fa5c 	bl	8002d40 <LCD_Draw_Str>
	LCD_Draw_Str(210, 40+16*(q%MENUCNT),"-",COLOR_BLACK,1);
 8003888:	4b44      	ldr	r3, [pc, #272]	; (800399c <downclick+0x278>)
 800388a:	881a      	ldrh	r2, [r3, #0]
 800388c:	4b48      	ldr	r3, [pc, #288]	; (80039b0 <downclick+0x28c>)
 800388e:	fba3 1302 	umull	r1, r3, r3, r2
 8003892:	0899      	lsrs	r1, r3, #2
 8003894:	460b      	mov	r3, r1
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	440b      	add	r3, r1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3328      	adds	r3, #40	; 0x28
 80038a6:	b299      	uxth	r1, r3
 80038a8:	2301      	movs	r3, #1
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2305      	movs	r3, #5
 80038ae:	4a3f      	ldr	r2, [pc, #252]	; (80039ac <downclick+0x288>)
 80038b0:	20d2      	movs	r0, #210	; 0xd2
 80038b2:	f7ff fa45 	bl	8002d40 <LCD_Draw_Str>

	//MENUCNT칸의 메뉴를 벗어간 경우
	if((q%MENUCNT)==(MENUCNT-1)&&(int)q!=(65535))
 80038b6:	4b39      	ldr	r3, [pc, #228]	; (800399c <downclick+0x278>)
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	4b3d      	ldr	r3, [pc, #244]	; (80039b0 <downclick+0x28c>)
 80038bc:	fba3 1302 	umull	r1, r3, r3, r2
 80038c0:	0899      	lsrs	r1, r3, #2
 80038c2:	460b      	mov	r3, r1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	440b      	add	r3, r1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d146      	bne.n	8003960 <downclick+0x23c>
 80038d2:	4b32      	ldr	r3, [pc, #200]	; (800399c <downclick+0x278>)
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038da:	4293      	cmp	r3, r2
 80038dc:	d040      	beq.n	8003960 <downclick+0x23c>
	{
		for(int i=MENUCNT-1;i>=0;i--)
 80038de:	2305      	movs	r3, #5
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	e03a      	b.n	800395a <downclick+0x236>
		{
			LCD_Draw_Str(200, 40+16*i, filname[musicfil[q+1+i]],COLOR_WHITE,1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3328      	adds	r3, #40	; 0x28
 80038ee:	b299      	uxth	r1, r3
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <downclick+0x278>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <downclick+0x280>)
 80038fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003900:	461a      	mov	r2, r3
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <downclick+0x284>)
 800390c:	441a      	add	r2, r3
 800390e:	2301      	movs	r3, #1
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003916:	20c8      	movs	r0, #200	; 0xc8
 8003918:	f7ff fa12 	bl	8002d40 <LCD_Draw_Str>
			LCD_Draw_Str(200, 40+16*i, filname[musicfil[q+i-MENUCNT+1]],COLOR_BLACK,1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	b29b      	uxth	r3, r3
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	b29b      	uxth	r3, r3
 8003924:	3328      	adds	r3, #40	; 0x28
 8003926:	b299      	uxth	r1, r3
 8003928:	4b1c      	ldr	r3, [pc, #112]	; (800399c <downclick+0x278>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	3b05      	subs	r3, #5
 8003934:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <downclick+0x280>)
 8003936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800393a:	461a      	mov	r2, r3
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <downclick+0x284>)
 8003946:	441a      	add	r2, r3
 8003948:	2301      	movs	r3, #1
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2305      	movs	r3, #5
 800394e:	20c8      	movs	r0, #200	; 0xc8
 8003950:	f7ff f9f6 	bl	8002d40 <LCD_Draw_Str>
		for(int i=MENUCNT-1;i>=0;i--)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	dac1      	bge.n	80038e4 <downclick+0x1c0>
		}
	}

	//커서의 위치를 표현
	LCD_Draw_Str(200, 24,menu,COLOR_WHITE,0);
 8003960:	2300      	movs	r3, #0
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003968:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <downclick+0x294>)
 800396a:	2118      	movs	r1, #24
 800396c:	20c8      	movs	r0, #200	; 0xc8
 800396e:	f7ff f9e7 	bl	8002d40 <LCD_Draw_Str>
	sprintf(menu,"%d/%d",q+1,musiccnt);
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <downclick+0x278>)
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <downclick+0x27c>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	490f      	ldr	r1, [pc, #60]	; (80039bc <downclick+0x298>)
 800397e:	480e      	ldr	r0, [pc, #56]	; (80039b8 <downclick+0x294>)
 8003980:	f00a fde2 	bl	800e548 <siprintf>
	LCD_Draw_Str(200, 24,menu,COLOR_BLACK,0);
 8003984:	2300      	movs	r3, #0
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2305      	movs	r3, #5
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <downclick+0x294>)
 800398c:	2118      	movs	r1, #24
 800398e:	20c8      	movs	r0, #200	; 0xc8
 8003990:	f7ff f9d6 	bl	8002d40 <LCD_Draw_Str>
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}
 800399c:	200000ba 	.word	0x200000ba
 80039a0:	200000be 	.word	0x200000be
 80039a4:	20000eac 	.word	0x20000eac
 80039a8:	20000598 	.word	0x20000598
 80039ac:	0800f92c 	.word	0x0800f92c
 80039b0:	aaaaaaab 	.word	0xaaaaaaab
 80039b4:	2aaaaaab 	.word	0x2aaaaaab
 80039b8:	20001330 	.word	0x20001330
 80039bc:	0800f930 	.word	0x0800f930

080039c0 <upclick>:
void upclick()			//한칸 위로 커서 이동
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af02      	add	r7, sp, #8
	if(q==musiccnt-1)
 80039c6:	4b93      	ldr	r3, [pc, #588]	; (8003c14 <upclick+0x254>)
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b92      	ldr	r3, [pc, #584]	; (8003c18 <upclick+0x258>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d175      	bne.n	8003ac2 <upclick+0x102>
	{
		//이전 메뉴 제거
		for(int i=0;i<MENUCNT;i++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e044      	b.n	8003a66 <upclick+0xa6>
		{
			LCD_Draw_Str(200, 40+16*i, filname[musicfil[i+q-q%MENUCNT]],COLOR_WHITE,1);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3328      	adds	r3, #40	; 0x28
 80039e6:	b29c      	uxth	r4, r3
 80039e8:	4b8a      	ldr	r3, [pc, #552]	; (8003c14 <upclick+0x254>)
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	18d0      	adds	r0, r2, r3
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <upclick+0x254>)
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	4b89      	ldr	r3, [pc, #548]	; (8003c1c <upclick+0x25c>)
 80039f8:	fba3 1302 	umull	r1, r3, r3, r2
 80039fc:	0899      	lsrs	r1, r3, #2
 80039fe:	460b      	mov	r3, r1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	440b      	add	r3, r1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	1ac3      	subs	r3, r0, r3
 8003a0c:	4a84      	ldr	r2, [pc, #528]	; (8003c20 <upclick+0x260>)
 8003a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a12:	461a      	mov	r2, r3
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4a81      	ldr	r2, [pc, #516]	; (8003c24 <upclick+0x264>)
 8003a1e:	441a      	add	r2, r3
 8003a20:	2301      	movs	r3, #1
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a28:	4621      	mov	r1, r4
 8003a2a:	20c8      	movs	r0, #200	; 0xc8
 8003a2c:	f7ff f988 	bl	8002d40 <LCD_Draw_Str>
		 	LCD_Draw_Str(210, 40+16*((q)%MENUCNT),"-",COLOR_WHITE,1);
 8003a30:	4b78      	ldr	r3, [pc, #480]	; (8003c14 <upclick+0x254>)
 8003a32:	881a      	ldrh	r2, [r3, #0]
 8003a34:	4b79      	ldr	r3, [pc, #484]	; (8003c1c <upclick+0x25c>)
 8003a36:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3a:	0899      	lsrs	r1, r3, #2
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	440b      	add	r3, r1
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3328      	adds	r3, #40	; 0x28
 8003a4e:	b299      	uxth	r1, r3
 8003a50:	2301      	movs	r3, #1
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a58:	4a73      	ldr	r2, [pc, #460]	; (8003c28 <upclick+0x268>)
 8003a5a:	20d2      	movs	r0, #210	; 0xd2
 8003a5c:	f7ff f970 	bl	8002d40 <LCD_Draw_Str>
		for(int i=0;i<MENUCNT;i++)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	ddb7      	ble.n	80039dc <upclick+0x1c>
		}

		//현재 메뉴 표시
		for(int i=0;i<MENUCNT;i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	e021      	b.n	8003ab6 <upclick+0xf6>
		{
			LCD_Draw_Str(210, 40,"-",COLOR_BLACK,1);
 8003a72:	2301      	movs	r3, #1
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2305      	movs	r3, #5
 8003a78:	4a6b      	ldr	r2, [pc, #428]	; (8003c28 <upclick+0x268>)
 8003a7a:	2128      	movs	r1, #40	; 0x28
 8003a7c:	20d2      	movs	r0, #210	; 0xd2
 8003a7e:	f7ff f95f 	bl	8002d40 <LCD_Draw_Str>
			LCD_Draw_Str(200, 40+16*i, filname[musicfil[i]],COLOR_BLACK,1);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3328      	adds	r3, #40	; 0x28
 8003a8c:	b299      	uxth	r1, r3
 8003a8e:	4a64      	ldr	r2, [pc, #400]	; (8003c20 <upclick+0x260>)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a96:	461a      	mov	r2, r3
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4a60      	ldr	r2, [pc, #384]	; (8003c24 <upclick+0x264>)
 8003aa2:	441a      	add	r2, r3
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2305      	movs	r3, #5
 8003aaa:	20c8      	movs	r0, #200	; 0xc8
 8003aac:	f7ff f948 	bl	8002d40 <LCD_Draw_Str>
		for(int i=0;i<MENUCNT;i++)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	ddda      	ble.n	8003a72 <upclick+0xb2>
		}
		q=0;
 8003abc:	4b55      	ldr	r3, [pc, #340]	; (8003c14 <upclick+0x254>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	801a      	strh	r2, [r3, #0]
	}

	q+=1;
 8003ac2:	4b54      	ldr	r3, [pc, #336]	; (8003c14 <upclick+0x254>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	4b52      	ldr	r3, [pc, #328]	; (8003c14 <upclick+0x254>)
 8003acc:	801a      	strh	r2, [r3, #0]
	LCD_Draw_Str(210, 40+16*((q-1)%MENUCNT),"-",COLOR_WHITE,1);
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <upclick+0x254>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	1e5a      	subs	r2, r3, #1
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <upclick+0x26c>)
 8003ad6:	fb83 3102 	smull	r3, r1, r3, r2
 8003ada:	17d3      	asrs	r3, r2, #31
 8003adc:	1ac9      	subs	r1, r1, r3
 8003ade:	460b      	mov	r3, r1
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	440b      	add	r3, r1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	1ad1      	subs	r1, r2, r3
 8003ae8:	b28b      	uxth	r3, r1
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3328      	adds	r3, #40	; 0x28
 8003af0:	b299      	uxth	r1, r3
 8003af2:	2301      	movs	r3, #1
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003afa:	4a4b      	ldr	r2, [pc, #300]	; (8003c28 <upclick+0x268>)
 8003afc:	20d2      	movs	r0, #210	; 0xd2
 8003afe:	f7ff f91f 	bl	8002d40 <LCD_Draw_Str>
	LCD_Draw_Str(210, 40+16*(q%MENUCNT),"-",COLOR_BLACK,1);
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <upclick+0x254>)
 8003b04:	881a      	ldrh	r2, [r3, #0]
 8003b06:	4b45      	ldr	r3, [pc, #276]	; (8003c1c <upclick+0x25c>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	0899      	lsrs	r1, r3, #2
 8003b0e:	460b      	mov	r3, r1
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	440b      	add	r3, r1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3328      	adds	r3, #40	; 0x28
 8003b20:	b299      	uxth	r1, r3
 8003b22:	2301      	movs	r3, #1
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2305      	movs	r3, #5
 8003b28:	4a3f      	ldr	r2, [pc, #252]	; (8003c28 <upclick+0x268>)
 8003b2a:	20d2      	movs	r0, #210	; 0xd2
 8003b2c:	f7ff f908 	bl	8002d40 <LCD_Draw_Str>
	if((q%MENUCNT)==0&&q!=0)
 8003b30:	4b38      	ldr	r3, [pc, #224]	; (8003c14 <upclick+0x254>)
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <upclick+0x25c>)
 8003b36:	fba3 1302 	umull	r1, r3, r3, r2
 8003b3a:	0899      	lsrs	r1, r3, #2
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	440b      	add	r3, r1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d144      	bne.n	8003bd6 <upclick+0x216>
 8003b4c:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <upclick+0x254>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d040      	beq.n	8003bd6 <upclick+0x216>
	{
		for(int i=0;i<MENUCNT;i++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	e03a      	b.n	8003bd0 <upclick+0x210>
		{
			LCD_Draw_Str(200, 40+16*i, filname[musicfil[i+q-MENUCNT]],COLOR_WHITE,1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3328      	adds	r3, #40	; 0x28
 8003b64:	b299      	uxth	r1, r3
 8003b66:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <upclick+0x254>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3b06      	subs	r3, #6
 8003b72:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <upclick+0x260>)
 8003b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <upclick+0x264>)
 8003b84:	441a      	add	r2, r3
 8003b86:	2301      	movs	r3, #1
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b8e:	20c8      	movs	r0, #200	; 0xc8
 8003b90:	f7ff f8d6 	bl	8002d40 <LCD_Draw_Str>
			LCD_Draw_Str(200, 40+16*i, filname[musicfil[i+q]],COLOR_BLACK,1);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3328      	adds	r3, #40	; 0x28
 8003b9e:	b299      	uxth	r1, r3
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <upclick+0x254>)
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <upclick+0x260>)
 8003bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <upclick+0x264>)
 8003bbc:	441a      	add	r2, r3
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2305      	movs	r3, #5
 8003bc4:	20c8      	movs	r0, #200	; 0xc8
 8003bc6:	f7ff f8bb 	bl	8002d40 <LCD_Draw_Str>
		for(int i=0;i<MENUCNT;i++)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	ddc1      	ble.n	8003b5a <upclick+0x19a>
		}
	}

	//MENUCNT칸의 메뉴를 벗어간 경우
	LCD_Draw_Str(200, 24,menu,COLOR_WHITE,0);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bde:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <upclick+0x270>)
 8003be0:	2118      	movs	r1, #24
 8003be2:	20c8      	movs	r0, #200	; 0xc8
 8003be4:	f7ff f8ac 	bl	8002d40 <LCD_Draw_Str>
	sprintf(menu,"%d/%d",q+1,musiccnt);
 8003be8:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <upclick+0x254>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <upclick+0x258>)
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	4910      	ldr	r1, [pc, #64]	; (8003c34 <upclick+0x274>)
 8003bf4:	480e      	ldr	r0, [pc, #56]	; (8003c30 <upclick+0x270>)
 8003bf6:	f00a fca7 	bl	800e548 <siprintf>
	LCD_Draw_Str(200, 24,menu,COLOR_BLACK,0);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2305      	movs	r3, #5
 8003c00:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <upclick+0x270>)
 8003c02:	2118      	movs	r1, #24
 8003c04:	20c8      	movs	r0, #200	; 0xc8
 8003c06:	f7ff f89b 	bl	8002d40 <LCD_Draw_Str>
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd90      	pop	{r4, r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200000ba 	.word	0x200000ba
 8003c18:	200000be 	.word	0x200000be
 8003c1c:	aaaaaaab 	.word	0xaaaaaaab
 8003c20:	20000eac 	.word	0x20000eac
 8003c24:	20000598 	.word	0x20000598
 8003c28:	0800f92c 	.word	0x0800f92c
 8003c2c:	2aaaaaab 	.word	0x2aaaaaab
 8003c30:	20001330 	.word	0x20001330
 8003c34:	0800f930 	.word	0x0800f930

08003c38 <Sel_Music>:
void Sel_Music()		//커서 위치의 노래 재생
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	playstate=q;
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <Sel_Music+0x34>)
 8003c3e:	881a      	ldrh	r2, [r3, #0]
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <Sel_Music+0x38>)
 8003c42:	801a      	strh	r2, [r3, #0]
	MP3_Play(filname[musicfil[q]]);
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <Sel_Music+0x34>)
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <Sel_Music+0x3c>)
 8003c4c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003c50:	461a      	mov	r2, r3
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <Sel_Music+0x40>)
 8003c5c:	4413      	add	r3, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fd f83e 	bl	8000ce0 <MP3_Play>
	LCD_Draw_Resume();
 8003c64:	f7ff faa4 	bl	80031b0 <LCD_Draw_Resume>
}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200000ba 	.word	0x200000ba
 8003c70:	20001340 	.word	0x20001340
 8003c74:	20000eac 	.word	0x20000eac
 8003c78:	20000598 	.word	0x20000598

08003c7c <Next_Music>:
void Next_Music()		//다음곡 재생
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
	//playstate를 증가시켜 노래 재생
	playstate++;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <Next_Music+0x4c>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <Next_Music+0x4c>)
 8003c8a:	801a      	strh	r2, [r3, #0]
	if(playstate==musiccnt)
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <Next_Music+0x4c>)
 8003c8e:	881a      	ldrh	r2, [r3, #0]
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <Next_Music+0x50>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d102      	bne.n	8003c9e <Next_Music+0x22>
		playstate=0;
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <Next_Music+0x4c>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	801a      	strh	r2, [r3, #0]
	MP3_Play(filname[musicfil[playstate]]);
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <Next_Music+0x4c>)
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <Next_Music+0x54>)
 8003ca6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003caa:	461a      	mov	r2, r3
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <Next_Music+0x58>)
 8003cb6:	4413      	add	r3, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd f811 	bl	8000ce0 <MP3_Play>

	//노래 재생 디스플레이
	LCD_Draw_Resume();
 8003cbe:	f7ff fa77 	bl	80031b0 <LCD_Draw_Resume>
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20001340 	.word	0x20001340
 8003ccc:	200000be 	.word	0x200000be
 8003cd0:	20000eac 	.word	0x20000eac
 8003cd4:	20000598 	.word	0x20000598

08003cd8 <Before_Music>:
void Before_Music()		//이전곡 재생
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
	playstate--;
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <Before_Music+0x50>)
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <Before_Music+0x50>)
 8003ce6:	801a      	strh	r2, [r3, #0]
	if(playstate==65535)
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <Before_Music+0x50>)
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d105      	bne.n	8003d00 <Before_Music+0x28>
		playstate=musiccnt-1;
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <Before_Music+0x54>)
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <Before_Music+0x50>)
 8003cfe:	801a      	strh	r2, [r3, #0]
	MP3_Play(filname[musicfil[playstate]]);
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <Before_Music+0x50>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <Before_Music+0x58>)
 8003d08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <Before_Music+0x5c>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc ffe0 	bl	8000ce0 <MP3_Play>
	LCD_Draw_Resume();
 8003d20:	f7ff fa46 	bl	80031b0 <LCD_Draw_Resume>
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20001340 	.word	0x20001340
 8003d2c:	200000be 	.word	0x200000be
 8003d30:	20000eac 	.word	0x20000eac
 8003d34:	20000598 	.word	0x20000598

08003d38 <Codex_Vol_up>:
void Codex_Vol_up()		//볼륨 한칸 업 0x1c1c-0x7676를 max min로 설정
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
	if(vol_set==0xf0f0)
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <Codex_Vol_up+0x44>)
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d103      	bne.n	8003d50 <Codex_Vol_up+0x18>
		vol_set=0x7676;
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <Codex_Vol_up+0x44>)
 8003d4a:	f247 6276 	movw	r2, #30326	; 0x7676
 8003d4e:	801a      	strh	r2, [r3, #0]
	if(vol_set==0x1c1c)	//0x0000이 가장 큰 소리지만 0x0000의 경우 전류를 많이 먹어 디스플레이에 문제 발생
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <Codex_Vol_up+0x44>)
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	f641 421c 	movw	r2, #7196	; 0x1c1c
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00d      	beq.n	8003d78 <Codex_Vol_up+0x40>
		return ;
	vol_set-=0x0606;
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <Codex_Vol_up+0x44>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	f2a3 6306 	subw	r3, r3, #1542	; 0x606
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <Codex_Vol_up+0x44>)
 8003d68:	801a      	strh	r2, [r3, #0]

	Codex_reg_write(CODEX_REG_VOL, vol_set);
 8003d6a:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <Codex_Vol_up+0x44>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	200b      	movs	r0, #11
 8003d72:	f7ff fc77 	bl	8003664 <Codex_reg_write>
 8003d76:	e000      	b.n	8003d7a <Codex_Vol_up+0x42>
		return ;
 8003d78:	bf00      	nop
}
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	2000000c 	.word	0x2000000c

08003d80 <Codex_Vol_down>:
void Codex_Vol_down()	//볼륨 한칸 다운 0x1c1c-0x7676를 min max로 설정	(볼륨의 범위는 0x0000부터 0xffff까지지만 적당한 영역만 지정해도 충분하다 생각)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	if(vol_set==0xf0f0)	//0xffff가 아닌 이유는 0xffff로 설정될 경우 오디오가 켜지고 꺼지는 소리가 크게남
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <Codex_Vol_down+0x44>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d017      	beq.n	8003dc0 <Codex_Vol_down+0x40>
		return ;
	vol_set+=0x0606;
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <Codex_Vol_down+0x44>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	f203 6306 	addw	r3, r3, #1542	; 0x606
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <Codex_Vol_down+0x44>)
 8003d9c:	801a      	strh	r2, [r3, #0]

	if(vol_set==0x7676)	//0x7676도 매우 작은 소리
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <Codex_Vol_down+0x44>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	f247 6276 	movw	r2, #30326	; 0x7676
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d103      	bne.n	8003db2 <Codex_Vol_down+0x32>
		vol_set=0xf0f0;
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <Codex_Vol_down+0x44>)
 8003dac:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8003db0:	801a      	strh	r2, [r3, #0]

	Codex_reg_write(CODEX_REG_VOL, vol_set);
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <Codex_Vol_down+0x44>)
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	4619      	mov	r1, r3
 8003db8:	200b      	movs	r0, #11
 8003dba:	f7ff fc53 	bl	8003664 <Codex_reg_write>
 8003dbe:	e000      	b.n	8003dc2 <Codex_Vol_down+0x42>
		return ;
 8003dc0:	bf00      	nop
}
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	2000000c 	.word	0x2000000c

08003dc8 <SWAP_PLAY>:
void SWAP_PLAY()		//재생 정지 스왑
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
	if(isPlaying&&isFileOpen)
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <SWAP_PLAY+0x40>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <SWAP_PLAY+0x1e>
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <SWAP_PLAY+0x44>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <SWAP_PLAY+0x1e>
	{
		MP3_Pause();
 8003ddc:	f7fd f81e 	bl	8000e1c <MP3_Pause>
		LCD_Draw_Pause();
 8003de0:	f7ff fa2e 	bl	8003240 <LCD_Draw_Pause>
	else if(!isPlaying&&isFileOpen)
	{
		LCD_Draw_Resume();
		MP3_Resume();
	}
}
 8003de4:	e00e      	b.n	8003e04 <SWAP_PLAY+0x3c>
	else if(!isPlaying&&isFileOpen)
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <SWAP_PLAY+0x40>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	f083 0301 	eor.w	r3, r3, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <SWAP_PLAY+0x3c>
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <SWAP_PLAY+0x44>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <SWAP_PLAY+0x3c>
		LCD_Draw_Resume();
 8003dfc:	f7ff f9d8 	bl	80031b0 <LCD_Draw_Resume>
		MP3_Resume();
 8003e00:	f7fd f820 	bl	8000e44 <MP3_Resume>
}
 8003e04:	bf00      	nop
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	200000a0 	.word	0x200000a0
 8003e0c:	200000a1 	.word	0x200000a1

08003e10 <upTime>:
void upTime()			//노래 현재 재생시간 표시 (헤더파일을 읽지 못해 가장 기본인 128kbps로 고정 따라서 다른 bitrate를 가진 파일의 경우 재생시간이 크게 달라짐)
{
 8003e10:	b5b0      	push	{r4, r5, r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af02      	add	r7, sp, #8
	int per_play = t_cnt*10 / mp3sec;	//퍼센트
 8003e16:	4b65      	ldr	r3, [pc, #404]	; (8003fac <upTime+0x19c>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b62      	ldr	r3, [pc, #392]	; (8003fb0 <upTime+0x1a0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	60fb      	str	r3, [r7, #12]
	if(per_play>bef_per)
 8003e2e:	4b61      	ldr	r3, [pc, #388]	; (8003fb4 <upTime+0x1a4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dd02      	ble.n	8003e3e <upTime+0x2e>
	{
		LCD_PlayBar(per_play);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff fb81 	bl	8003540 <LCD_PlayBar>
	}
	bef_per=per_play;
 8003e3e:	4a5d      	ldr	r2, [pc, #372]	; (8003fb4 <upTime+0x1a4>)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6013      	str	r3, [r2, #0]
	char beftime[10];	//화면 출력을 위한 변수
	if(t_cnt==10)
 8003e44:	4b59      	ldr	r3, [pc, #356]	; (8003fac <upTime+0x19c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b0a      	cmp	r3, #10
 8003e4a:	d14d      	bne.n	8003ee8 <upTime+0xd8>
	{
		LCD_Draw_Str(220, 294, "00:00", COLOR_BLACK, 0);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	2305      	movs	r3, #5
 8003e52:	4a59      	ldr	r2, [pc, #356]	; (8003fb8 <upTime+0x1a8>)
 8003e54:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003e58:	20dc      	movs	r0, #220	; 0xdc
 8003e5a:	f7fe ff71 	bl	8002d40 <LCD_Draw_Str>
		sprintf(playingtime,"%d%d:%d%d",(t_cnt/6000)%6,(t_cnt/600)%10,(t_cnt/100)%6,(t_cnt/10)%10);
 8003e5e:	4b53      	ldr	r3, [pc, #332]	; (8003fac <upTime+0x19c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a56      	ldr	r2, [pc, #344]	; (8003fbc <upTime+0x1ac>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	09da      	lsrs	r2, r3, #7
 8003e6a:	4b55      	ldr	r3, [pc, #340]	; (8003fc0 <upTime+0x1b0>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	0898      	lsrs	r0, r3, #2
 8003e72:	4603      	mov	r3, r0
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4403      	add	r3, r0
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	1ad0      	subs	r0, r2, r3
 8003e7c:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <upTime+0x19c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a50      	ldr	r2, [pc, #320]	; (8003fc4 <upTime+0x1b4>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	099a      	lsrs	r2, r3, #6
 8003e88:	4b4f      	ldr	r3, [pc, #316]	; (8003fc8 <upTime+0x1b8>)
 8003e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8e:	08dc      	lsrs	r4, r3, #3
 8003e90:	4623      	mov	r3, r4
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4423      	add	r3, r4
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	1ad4      	subs	r4, r2, r3
 8003e9a:	4b44      	ldr	r3, [pc, #272]	; (8003fac <upTime+0x19c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a4b      	ldr	r2, [pc, #300]	; (8003fcc <upTime+0x1bc>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	0959      	lsrs	r1, r3, #5
 8003ea6:	4b46      	ldr	r3, [pc, #280]	; (8003fc0 <upTime+0x1b0>)
 8003ea8:	fba3 2301 	umull	r2, r3, r3, r1
 8003eac:	089a      	lsrs	r2, r3, #2
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	1aca      	subs	r2, r1, r3
 8003eb8:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <upTime+0x19c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4942      	ldr	r1, [pc, #264]	; (8003fc8 <upTime+0x1b8>)
 8003ebe:	fba1 1303 	umull	r1, r3, r1, r3
 8003ec2:	08dd      	lsrs	r5, r3, #3
 8003ec4:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <upTime+0x1b8>)
 8003ec6:	fba3 1305 	umull	r1, r3, r3, r5
 8003eca:	08d9      	lsrs	r1, r3, #3
 8003ecc:	460b      	mov	r3, r1
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	1ae9      	subs	r1, r5, r3
 8003ed6:	9101      	str	r1, [sp, #4]
 8003ed8:	9200      	str	r2, [sp, #0]
 8003eda:	4623      	mov	r3, r4
 8003edc:	4602      	mov	r2, r0
 8003ede:	493c      	ldr	r1, [pc, #240]	; (8003fd0 <upTime+0x1c0>)
 8003ee0:	483c      	ldr	r0, [pc, #240]	; (8003fd4 <upTime+0x1c4>)
 8003ee2:	f00a fb31 	bl	800e548 <siprintf>
 8003ee6:	e049      	b.n	8003f7c <upTime+0x16c>
	}
	else
	{
		sprintf(beftime,"%s",playingtime);
 8003ee8:	463b      	mov	r3, r7
 8003eea:	4a3a      	ldr	r2, [pc, #232]	; (8003fd4 <upTime+0x1c4>)
 8003eec:	493a      	ldr	r1, [pc, #232]	; (8003fd8 <upTime+0x1c8>)
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f00a fb2a 	bl	800e548 <siprintf>
		sprintf(playingtime,"%d%d:%d%d",(t_cnt/6000)%6,(t_cnt/600)%10,(t_cnt/100)%6,(t_cnt/10)%10);
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <upTime+0x19c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a30      	ldr	r2, [pc, #192]	; (8003fbc <upTime+0x1ac>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	09da      	lsrs	r2, r3, #7
 8003f00:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <upTime+0x1b0>)
 8003f02:	fba3 1302 	umull	r1, r3, r3, r2
 8003f06:	0898      	lsrs	r0, r3, #2
 8003f08:	4603      	mov	r3, r0
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4403      	add	r3, r0
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	1ad0      	subs	r0, r2, r3
 8003f12:	4b26      	ldr	r3, [pc, #152]	; (8003fac <upTime+0x19c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2b      	ldr	r2, [pc, #172]	; (8003fc4 <upTime+0x1b4>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	099a      	lsrs	r2, r3, #6
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <upTime+0x1b8>)
 8003f20:	fba3 1302 	umull	r1, r3, r3, r2
 8003f24:	08dc      	lsrs	r4, r3, #3
 8003f26:	4623      	mov	r3, r4
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4423      	add	r3, r4
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	1ad4      	subs	r4, r2, r3
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <upTime+0x19c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <upTime+0x1bc>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0959      	lsrs	r1, r3, #5
 8003f3c:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <upTime+0x1b0>)
 8003f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f42:	089a      	lsrs	r2, r3, #2
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	1aca      	subs	r2, r1, r3
 8003f4e:	4b17      	ldr	r3, [pc, #92]	; (8003fac <upTime+0x19c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	491d      	ldr	r1, [pc, #116]	; (8003fc8 <upTime+0x1b8>)
 8003f54:	fba1 1303 	umull	r1, r3, r1, r3
 8003f58:	08dd      	lsrs	r5, r3, #3
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <upTime+0x1b8>)
 8003f5c:	fba3 1305 	umull	r1, r3, r3, r5
 8003f60:	08d9      	lsrs	r1, r3, #3
 8003f62:	460b      	mov	r3, r1
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	1ae9      	subs	r1, r5, r3
 8003f6c:	9101      	str	r1, [sp, #4]
 8003f6e:	9200      	str	r2, [sp, #0]
 8003f70:	4623      	mov	r3, r4
 8003f72:	4602      	mov	r2, r0
 8003f74:	4916      	ldr	r1, [pc, #88]	; (8003fd0 <upTime+0x1c0>)
 8003f76:	4817      	ldr	r0, [pc, #92]	; (8003fd4 <upTime+0x1c4>)
 8003f78:	f00a fae6 	bl	800e548 <siprintf>
	}
	LCD_Draw_Str(220, 294, &beftime, COLOR_BLACK, 0);
 8003f7c:	463a      	mov	r2, r7
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2305      	movs	r3, #5
 8003f84:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003f88:	20dc      	movs	r0, #220	; 0xdc
 8003f8a:	f7fe fed9 	bl	8002d40 <LCD_Draw_Str>
	LCD_Draw_Str(220, 294, &playingtime, COLOR_WHITE, 0);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f96:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <upTime+0x1c4>)
 8003f98:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003f9c:	20dc      	movs	r0, #220	; 0xdc
 8003f9e:	f7fe fecf 	bl	8002d40 <LCD_Draw_Str>
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200000a4 	.word	0x200000a4
 8003fb0:	200000d4 	.word	0x200000d4
 8003fb4:	200000d8 	.word	0x200000d8
 8003fb8:	0800f938 	.word	0x0800f938
 8003fbc:	057619f1 	.word	0x057619f1
 8003fc0:	aaaaaaab 	.word	0xaaaaaaab
 8003fc4:	1b4e81b5 	.word	0x1b4e81b5
 8003fc8:	cccccccd 	.word	0xcccccccd
 8003fcc:	51eb851f 	.word	0x51eb851f
 8003fd0:	0800f940 	.word	0x0800f940
 8003fd4:	20000db8 	.word	0x20000db8
 8003fd8:	0800f94c 	.word	0x0800f94c

08003fdc <time_Reset>:
void time_Reset()		//이전 시간 초기화
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af02      	add	r7, sp, #8
	LCD_Draw_Str(220, 294, &playingtime, COLOR_BLACK, 0);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2305      	movs	r3, #5
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <time_Reset+0x20>)
 8003fea:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003fee:	20dc      	movs	r0, #220	; 0xdc
 8003ff0:	f7fe fea6 	bl	8002d40 <LCD_Draw_Str>
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000db8 	.word	0x20000db8

08004000 <playTime>:
void playTime()			//현재 노래 전체 길이 표시
{
 8004000:	b5b0      	push	{r4, r5, r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af02      	add	r7, sp, #8
	//시간 측정 후 화면 출력
	char playtime[10];
	mp3sec=filsize[musicfil[playstate]]*8/MP3_BITRATE;
 8004006:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <playTime+0xe0>)
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <playTime+0xe4>)
 800400e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004012:	461a      	mov	r2, r3
 8004014:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <playTime+0xe8>)
 8004016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4a33      	ldr	r2, [pc, #204]	; (80040ec <playTime+0xec>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	0b5b      	lsrs	r3, r3, #13
 8004024:	461a      	mov	r2, r3
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <playTime+0xf0>)
 8004028:	601a      	str	r2, [r3, #0]
	sprintf(playtime,"%d%d:%d%d",(mp3sec/600)%6,(mp3sec/60)%10,(mp3sec/10)%6,(mp3sec/1)%10);
 800402a:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <playTime+0xf0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a31      	ldr	r2, [pc, #196]	; (80040f4 <playTime+0xf4>)
 8004030:	fb82 1203 	smull	r1, r2, r2, r3
 8004034:	1192      	asrs	r2, r2, #6
 8004036:	17db      	asrs	r3, r3, #31
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	4b2f      	ldr	r3, [pc, #188]	; (80040f8 <playTime+0xf8>)
 800403c:	fb83 3102 	smull	r3, r1, r3, r2
 8004040:	17d3      	asrs	r3, r2, #31
 8004042:	1acc      	subs	r4, r1, r3
 8004044:	4623      	mov	r3, r4
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4423      	add	r3, r4
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	1ad4      	subs	r4, r2, r3
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <playTime+0xf0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <playTime+0xfc>)
 8004054:	fb82 1203 	smull	r1, r2, r2, r3
 8004058:	441a      	add	r2, r3
 800405a:	1152      	asrs	r2, r2, #5
 800405c:	17db      	asrs	r3, r3, #31
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	4b27      	ldr	r3, [pc, #156]	; (8004100 <playTime+0x100>)
 8004062:	fb83 1302 	smull	r1, r3, r3, r2
 8004066:	1099      	asrs	r1, r3, #2
 8004068:	17d3      	asrs	r3, r2, #31
 800406a:	1acd      	subs	r5, r1, r3
 800406c:	462b      	mov	r3, r5
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	442b      	add	r3, r5
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	1ad5      	subs	r5, r2, r3
 8004076:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <playTime+0xf0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a21      	ldr	r2, [pc, #132]	; (8004100 <playTime+0x100>)
 800407c:	fb82 1203 	smull	r1, r2, r2, r3
 8004080:	1092      	asrs	r2, r2, #2
 8004082:	17db      	asrs	r3, r3, #31
 8004084:	1ad1      	subs	r1, r2, r3
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <playTime+0xf8>)
 8004088:	fb83 3201 	smull	r3, r2, r3, r1
 800408c:	17cb      	asrs	r3, r1, #31
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	1aca      	subs	r2, r1, r3
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <playTime+0xf0>)
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	4b18      	ldr	r3, [pc, #96]	; (8004100 <playTime+0x100>)
 80040a0:	fb83 1300 	smull	r1, r3, r3, r0
 80040a4:	1099      	asrs	r1, r3, #2
 80040a6:	17c3      	asrs	r3, r0, #31
 80040a8:	1ac9      	subs	r1, r1, r3
 80040aa:	460b      	mov	r3, r1
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	1ac1      	subs	r1, r0, r3
 80040b4:	1d38      	adds	r0, r7, #4
 80040b6:	9101      	str	r1, [sp, #4]
 80040b8:	9200      	str	r2, [sp, #0]
 80040ba:	462b      	mov	r3, r5
 80040bc:	4622      	mov	r2, r4
 80040be:	4911      	ldr	r1, [pc, #68]	; (8004104 <playTime+0x104>)
 80040c0:	f00a fa42 	bl	800e548 <siprintf>
	LCD_Draw_Str(48, 294, playtime, COLOR_WHITE, 0);
 80040c4:	1d3a      	adds	r2, r7, #4
 80040c6:	2300      	movs	r3, #0
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040ce:	f44f 7193 	mov.w	r1, #294	; 0x126
 80040d2:	2030      	movs	r0, #48	; 0x30
 80040d4:	f7fe fe34 	bl	8002d40 <LCD_Draw_Str>
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bdb0      	pop	{r4, r5, r7, pc}
 80040e0:	20001340 	.word	0x20001340
 80040e4:	20000eac 	.word	0x20000eac
 80040e8:	200010e0 	.word	0x200010e0
 80040ec:	10624dd3 	.word	0x10624dd3
 80040f0:	200000d4 	.word	0x200000d4
 80040f4:	1b4e81b5 	.word	0x1b4e81b5
 80040f8:	2aaaaaab 	.word	0x2aaaaaab
 80040fc:	88888889 	.word	0x88888889
 8004100:	66666667 	.word	0x66666667
 8004104:	0800f940 	.word	0x0800f940

08004108 <Codex_type>:
void Codex_type(int type)//타입에 따른 재생
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af02      	add	r7, sp, #8
 800410e:	6078      	str	r0, [r7, #4]
	//노래를 정지
	if(type==MUSIC_STOP)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d132      	bne.n	800417c <Codex_type+0x74>
	{
		MP3_Stop();
 8004116:	f7fc fe4b 	bl	8000db0 <MP3_Stop>
		LCD_Draw_Pause();
 800411a:	f7ff f891 	bl	8003240 <LCD_Draw_Pause>
		LCD_Draw_Box(40,187,200,205,COLOR_BLACK);
 800411e:	2305      	movs	r3, #5
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	23cd      	movs	r3, #205	; 0xcd
 8004124:	22c8      	movs	r2, #200	; 0xc8
 8004126:	21bb      	movs	r1, #187	; 0xbb
 8004128:	2028      	movs	r0, #40	; 0x28
 800412a:	f7fe fe3b 	bl	8002da4 <LCD_Draw_Box>
		LCD_Draw_Box(60,298,180,300,COLOR_WHITE);
 800412e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004138:	22b4      	movs	r2, #180	; 0xb4
 800413a:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800413e:	203c      	movs	r0, #60	; 0x3c
 8004140:	f7fe fe30 	bl	8002da4 <LCD_Draw_Box>
		LCD_Draw_Str(48, 294, "00:00", COLOR_WHITE, 0);
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <Codex_type+0xc8>)
 800414e:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004152:	2030      	movs	r0, #48	; 0x30
 8004154:	f7fe fdf4 	bl	8002d40 <LCD_Draw_Str>
		LCD_Draw_Str(220, 294, "00:00",COLOR_WHITE, 0);
 8004158:	2300      	movs	r3, #0
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004160:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <Codex_type+0xc8>)
 8004162:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004166:	20dc      	movs	r0, #220	; 0xdc
 8004168:	f7fe fdea 	bl	8002d40 <LCD_Draw_Str>
		LCD_Draw_Box(100,172,160,183,COLOR_BLACK);
 800416c:	2305      	movs	r3, #5
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	23b7      	movs	r3, #183	; 0xb7
 8004172:	22a0      	movs	r2, #160	; 0xa0
 8004174:	21ac      	movs	r1, #172	; 0xac
 8004176:	2064      	movs	r0, #100	; 0x64
 8004178:	f7fe fe14 	bl	8002da4 <LCD_Draw_Box>
	}

	//노래 이어서 재생
	if(type==MUSIC_CYCLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <Codex_type+0x7e>
	{
		Next_Music();
 8004182:	f7ff fd7b 	bl	8003c7c <Next_Music>
	}

	//랜덤 노래 재생 (셔플구현은 못했음 + 별도의 조작이 없을 시 노래에 따라 randnum이 정해져 정확한 랜덤값은 아님)
	if(type==MUSIC_SHUFFLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d111      	bne.n	80041b0 <Codex_type+0xa8>
	{
		playstate=(rand()+randnum)%musiccnt;
 800418c:	f00a f99c 	bl	800e4c8 <rand>
 8004190:	4603      	mov	r3, r0
 8004192:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <Codex_type+0xcc>)
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	4413      	add	r3, r2
 8004198:	4a0f      	ldr	r2, [pc, #60]	; (80041d8 <Codex_type+0xd0>)
 800419a:	8812      	ldrh	r2, [r2, #0]
 800419c:	fb93 f1f2 	sdiv	r1, r3, r2
 80041a0:	fb02 f201 	mul.w	r2, r2, r1
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <Codex_type+0xd4>)
 80041aa:	801a      	strh	r2, [r3, #0]
		Next_Music();
 80041ac:	f7ff fd66 	bl	8003c7c <Next_Music>
	}

	//한 곡 반복 재생시 playstate를 증가하고 재생하기 떄문에 -1을 해줌
	if(type==MUSIC_RECYCLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d107      	bne.n	80041c6 <Codex_type+0xbe>
	{
		playstate--;
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <Codex_type+0xd4>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	4b07      	ldr	r3, [pc, #28]	; (80041dc <Codex_type+0xd4>)
 80041c0:	801a      	strh	r2, [r3, #0]
		Next_Music();
 80041c2:	f7ff fd5b 	bl	8003c7c <Next_Music>
	}
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	0800f938 	.word	0x0800f938
 80041d4:	200000ca 	.word	0x200000ca
 80041d8:	200000be 	.word	0x200000be
 80041dc:	20001340 	.word	0x20001340

080041e0 <Touch_read>:
uint8_t two_touch=0;
extern uint8_t vol_check;
extern uint8_t vol_flag;

void Touch_read()
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
	uint8_t dout[3] = {0};
 80041e6:	4bb7      	ldr	r3, [pc, #732]	; (80044c4 <Touch_read+0x2e4>)
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	82bb      	strh	r3, [r7, #20]
 80041ec:	2300      	movs	r3, #0
 80041ee:	75bb      	strb	r3, [r7, #22]
	uint8_t din[3];
	uint16_t z1, z2;
	int32_t z;
	uint16_t data[6] = {0};
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	609a      	str	r2, [r3, #8]

	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_RESET);
 80041fa:	2200      	movs	r2, #0
 80041fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004200:	48b1      	ldr	r0, [pc, #708]	; (80044c8 <Touch_read+0x2e8>)
 8004202:	f001 fe46 	bl	8005e92 <HAL_GPIO_WritePin>

	dout[0] = TOUCH_CMD_RDZ1;
 8004206:	23b1      	movs	r3, #177	; 0xb1
 8004208:	753b      	strb	r3, [r7, #20]
	Touch_spi(dout, din, 3);
 800420a:	f107 0110 	add.w	r1, r7, #16
 800420e:	f107 0314 	add.w	r3, r7, #20
 8004212:	2203      	movs	r2, #3
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f9c5 	bl	80045a4 <Touch_spi>

	dout[0] = TOUCH_CMD_RDZ2;
 800421a:	23c1      	movs	r3, #193	; 0xc1
 800421c:	753b      	strb	r3, [r7, #20]
	Touch_spi(dout, din, 3);
 800421e:	f107 0110 	add.w	r1, r7, #16
 8004222:	f107 0314 	add.w	r3, r7, #20
 8004226:	2203      	movs	r2, #3
 8004228:	4618      	mov	r0, r3
 800422a:	f000 f9bb 	bl	80045a4 <Touch_spi>
	z1 = ((din[1]<<8) | din[2])>>3;
 800422e:	7c7b      	ldrb	r3, [r7, #17]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	7cba      	ldrb	r2, [r7, #18]
 8004234:	4313      	orrs	r3, r2
 8004236:	10db      	asrs	r3, r3, #3
 8004238:	837b      	strh	r3, [r7, #26]
	z = z1 + 4095;
 800423a:	8b7b      	ldrh	r3, [r7, #26]
 800423c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004240:	61fb      	str	r3, [r7, #28]

	dout[0] = TOUCH_CMD_RDY;
 8004242:	2391      	movs	r3, #145	; 0x91
 8004244:	753b      	strb	r3, [r7, #20]
	Touch_spi(dout, din, 3);
 8004246:	f107 0110 	add.w	r1, r7, #16
 800424a:	f107 0314 	add.w	r3, r7, #20
 800424e:	2203      	movs	r2, #3
 8004250:	4618      	mov	r0, r3
 8004252:	f000 f9a7 	bl	80045a4 <Touch_spi>
	z2 = ((din[1]<<8) | din[2])>>3;
 8004256:	7c7b      	ldrb	r3, [r7, #17]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	7cba      	ldrb	r2, [r7, #18]
 800425c:	4313      	orrs	r3, r2
 800425e:	10db      	asrs	r3, r3, #3
 8004260:	833b      	strh	r3, [r7, #24]
	z -= z2;
 8004262:	8b3b      	ldrh	r3, [r7, #24]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	61fb      	str	r3, [r7, #28]

	if(z >= Z_THRESHOLD)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004270:	4293      	cmp	r3, r2
 8004272:	dd4d      	ble.n	8004310 <Touch_read+0x130>
	{
		dout[0] = TOUCH_CMD_RDY;
 8004274:	2391      	movs	r3, #145	; 0x91
 8004276:	753b      	strb	r3, [r7, #20]
		Touch_spi(dout, din, 3); //dummy
 8004278:	f107 0110 	add.w	r1, r7, #16
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	2203      	movs	r2, #3
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f98e 	bl	80045a4 <Touch_spi>

		dout[0] = TOUCH_CMD_RDX;
 8004288:	23d1      	movs	r3, #209	; 0xd1
 800428a:	753b      	strb	r3, [r7, #20]
		Touch_spi(dout, din, 3);
 800428c:	f107 0110 	add.w	r1, r7, #16
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	2203      	movs	r2, #3
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f984 	bl	80045a4 <Touch_spi>
		data[0] = ((din[1]<<8) | din[2])>>3;
 800429c:	7c7b      	ldrb	r3, [r7, #17]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	7cba      	ldrb	r2, [r7, #18]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	10db      	asrs	r3, r3, #3
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	80bb      	strh	r3, [r7, #4]

		dout[0] = TOUCH_CMD_RDY;
 80042aa:	2391      	movs	r3, #145	; 0x91
 80042ac:	753b      	strb	r3, [r7, #20]
		Touch_spi(dout, din, 3);
 80042ae:	f107 0110 	add.w	r1, r7, #16
 80042b2:	f107 0314 	add.w	r3, r7, #20
 80042b6:	2203      	movs	r2, #3
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f973 	bl	80045a4 <Touch_spi>
		data[1] = ((din[1]<<8) | din[2])>>3;
 80042be:	7c7b      	ldrb	r3, [r7, #17]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	7cba      	ldrb	r2, [r7, #18]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	10db      	asrs	r3, r3, #3
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	80fb      	strh	r3, [r7, #6]

		dout[0] = TOUCH_CMD_RDX;
 80042cc:	23d1      	movs	r3, #209	; 0xd1
 80042ce:	753b      	strb	r3, [r7, #20]
		Touch_spi(dout, din, 3);
 80042d0:	f107 0110 	add.w	r1, r7, #16
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	2203      	movs	r2, #3
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f962 	bl	80045a4 <Touch_spi>
		data[2] = ((din[1]<<8) | din[2])>>3;
 80042e0:	7c7b      	ldrb	r3, [r7, #17]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	7cba      	ldrb	r2, [r7, #18]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	10db      	asrs	r3, r3, #3
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	813b      	strh	r3, [r7, #8]

		dout[0] = TOUCH_CMD_RDY;
 80042ee:	2391      	movs	r3, #145	; 0x91
 80042f0:	753b      	strb	r3, [r7, #20]
		Touch_spi(dout, din, 3);
 80042f2:	f107 0110 	add.w	r1, r7, #16
 80042f6:	f107 0314 	add.w	r3, r7, #20
 80042fa:	2203      	movs	r2, #3
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f951 	bl	80045a4 <Touch_spi>
		data[3] = ((din[1]<<8) | din[2])>>3;
 8004302:	7c7b      	ldrb	r3, [r7, #17]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	7cba      	ldrb	r2, [r7, #18]
 8004308:	4313      	orrs	r3, r2
 800430a:	10db      	asrs	r3, r3, #3
 800430c:	b29b      	uxth	r3, r3
 800430e:	817b      	strh	r3, [r7, #10]
	}

	dout[0] = 0xd0;
 8004310:	23d0      	movs	r3, #208	; 0xd0
 8004312:	753b      	strb	r3, [r7, #20]
	Touch_spi(dout, din, 3);
 8004314:	f107 0110 	add.w	r1, r7, #16
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	2203      	movs	r2, #3
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f940 	bl	80045a4 <Touch_spi>
	data[4] = ((din[1]<<8) | din[2])>>3;
 8004324:	7c7b      	ldrb	r3, [r7, #17]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	7cba      	ldrb	r2, [r7, #18]
 800432a:	4313      	orrs	r3, r2
 800432c:	10db      	asrs	r3, r3, #3
 800432e:	b29b      	uxth	r3, r3
 8004330:	81bb      	strh	r3, [r7, #12]

	dout[0] = 0x00;
 8004332:	2300      	movs	r3, #0
 8004334:	753b      	strb	r3, [r7, #20]
	Touch_spi(dout, din, 3);
 8004336:	f107 0110 	add.w	r1, r7, #16
 800433a:	f107 0314 	add.w	r3, r7, #20
 800433e:	2203      	movs	r2, #3
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f92f 	bl	80045a4 <Touch_spi>
	data[5] = ((din[1]<<8) | din[2])>>3;
 8004346:	7c7b      	ldrb	r3, [r7, #17]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	7cba      	ldrb	r2, [r7, #18]
 800434c:	4313      	orrs	r3, r2
 800434e:	10db      	asrs	r3, r3, #3
 8004350:	b29b      	uxth	r3, r3
 8004352:	81fb      	strh	r3, [r7, #14]

	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_SET);
 8004354:	2201      	movs	r2, #1
 8004356:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800435a:	485b      	ldr	r0, [pc, #364]	; (80044c8 <Touch_read+0x2e8>)
 800435c:	f001 fd99 	bl	8005e92 <HAL_GPIO_WritePin>

	if( z < 0 ) z = 0;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	2b00      	cmp	r3, #0
 8004364:	da01      	bge.n	800436a <Touch_read+0x18a>
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
	if( z < Z_THRESHOLD)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004370:	4293      	cmp	r3, r2
 8004372:	dc03      	bgt.n	800437c <Touch_read+0x19c>
	{
		zraw = 0;
 8004374:	4b55      	ldr	r3, [pc, #340]	; (80044cc <Touch_read+0x2ec>)
 8004376:	2200      	movs	r2, #0
 8004378:	801a      	strh	r2, [r3, #0]
		return;
 800437a:	e105      	b.n	8004588 <Touch_read+0x3a8>
	}

	if( z > 6000)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004382:	4293      	cmp	r3, r2
 8004384:	f300 80ff 	bgt.w	8004586 <Touch_read+0x3a6>
	{
		return;
	}
	zraw = z;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	b29a      	uxth	r2, r3
 800438c:	4b4f      	ldr	r3, [pc, #316]	; (80044cc <Touch_read+0x2ec>)
 800438e:	801a      	strh	r2, [r3, #0]

	xraw = (data[0] + data[2])/2;
 8004390:	88bb      	ldrh	r3, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	893b      	ldrh	r3, [r7, #8]
 8004396:	4413      	add	r3, r2
 8004398:	0fda      	lsrs	r2, r3, #31
 800439a:	4413      	add	r3, r2
 800439c:	105b      	asrs	r3, r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	4b4b      	ldr	r3, [pc, #300]	; (80044d0 <Touch_read+0x2f0>)
 80043a2:	801a      	strh	r2, [r3, #0]
	yraw = (data[1] + data[3])/2;
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	461a      	mov	r2, r3
 80043a8:	897b      	ldrh	r3, [r7, #10]
 80043aa:	4413      	add	r3, r2
 80043ac:	0fda      	lsrs	r2, r3, #31
 80043ae:	4413      	add	r3, r2
 80043b0:	105b      	asrs	r3, r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <Touch_read+0x2f4>)
 80043b6:	801a      	strh	r2, [r3, #0]

	if(xraw>1650&&xraw<2500&&yraw>2700&&yraw<3250)//스탑,재생
 80043b8:	4b45      	ldr	r3, [pc, #276]	; (80044d0 <Touch_read+0x2f0>)
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	f240 6272 	movw	r2, #1650	; 0x672
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d926      	bls.n	8004412 <Touch_read+0x232>
 80043c4:	4b42      	ldr	r3, [pc, #264]	; (80044d0 <Touch_read+0x2f0>)
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d820      	bhi.n	8004412 <Touch_read+0x232>
 80043d0:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <Touch_read+0x2f4>)
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	f640 228c 	movw	r2, #2700	; 0xa8c
 80043d8:	4293      	cmp	r3, r2
 80043da:	d91a      	bls.n	8004412 <Touch_read+0x232>
 80043dc:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <Touch_read+0x2f4>)
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	f640 42b1 	movw	r2, #3249	; 0xcb1
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d814      	bhi.n	8004412 <Touch_read+0x232>
	{
		SWAP_PLAY();
 80043e8:	f7ff fcee 	bl	8003dc8 <SWAP_PLAY>
		HAL_Delay(50);
 80043ec:	2032      	movs	r0, #50	; 0x32
 80043ee:	f000 fc9d 	bl	8004d2c <HAL_Delay>
		if(!isPlaying&&!isFileOpen)
 80043f2:	4b39      	ldr	r3, [pc, #228]	; (80044d8 <Touch_read+0x2f8>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	f083 0301 	eor.w	r3, r3, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <Touch_read+0x232>
 8004400:	4b36      	ldr	r3, [pc, #216]	; (80044dc <Touch_read+0x2fc>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f083 0301 	eor.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <Touch_read+0x232>
			Sel_Music();
 800440e:	f7ff fc13 	bl	8003c38 <Sel_Music>
	}
	if(xraw>2900&&xraw<3400&&yraw>2600&&yraw<3300)//다음곡
 8004412:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <Touch_read+0x2f0>)
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	f640 3254 	movw	r2, #2900	; 0xb54
 800441a:	4293      	cmp	r3, r2
 800441c:	d916      	bls.n	800444c <Touch_read+0x26c>
 800441e:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <Touch_read+0x2f0>)
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	f640 5247 	movw	r2, #3399	; 0xd47
 8004426:	4293      	cmp	r3, r2
 8004428:	d810      	bhi.n	800444c <Touch_read+0x26c>
 800442a:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <Touch_read+0x2f4>)
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	f640 2228 	movw	r2, #2600	; 0xa28
 8004432:	4293      	cmp	r3, r2
 8004434:	d90a      	bls.n	800444c <Touch_read+0x26c>
 8004436:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <Touch_read+0x2f4>)
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	f640 42e3 	movw	r2, #3299	; 0xce3
 800443e:	4293      	cmp	r3, r2
 8004440:	d804      	bhi.n	800444c <Touch_read+0x26c>
	{
		HAL_Delay(50);
 8004442:	2032      	movs	r0, #50	; 0x32
 8004444:	f000 fc72 	bl	8004d2c <HAL_Delay>
		Next_Music();
 8004448:	f7ff fc18 	bl	8003c7c <Next_Music>
	}
	if(xraw>500&&xraw<1250&&yraw>2600&&yraw<3300)//이전곡
 800444c:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <Touch_read+0x2f0>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004454:	d916      	bls.n	8004484 <Touch_read+0x2a4>
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <Touch_read+0x2f0>)
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800445e:	4293      	cmp	r3, r2
 8004460:	d810      	bhi.n	8004484 <Touch_read+0x2a4>
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <Touch_read+0x2f4>)
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	f640 2228 	movw	r2, #2600	; 0xa28
 800446a:	4293      	cmp	r3, r2
 800446c:	d90a      	bls.n	8004484 <Touch_read+0x2a4>
 800446e:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <Touch_read+0x2f4>)
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	f640 42e3 	movw	r2, #3299	; 0xce3
 8004476:	4293      	cmp	r3, r2
 8004478:	d804      	bhi.n	8004484 <Touch_read+0x2a4>
	{
		HAL_Delay(50);
 800447a:	2032      	movs	r0, #50	; 0x32
 800447c:	f000 fc56 	bl	8004d2c <HAL_Delay>
		Before_Music();
 8004480:	f7ff fc2a 	bl	8003cd8 <Before_Music>
	}
	if(xraw>3300&&xraw<3700&&yraw>1000&&yraw<1650)	//볼륨업
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <Touch_read+0x2f0>)
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	f640 42e4 	movw	r2, #3300	; 0xce4
 800448c:	4293      	cmp	r3, r2
 800448e:	d933      	bls.n	80044f8 <Touch_read+0x318>
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <Touch_read+0x2f0>)
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	f640 6273 	movw	r2, #3699	; 0xe73
 8004498:	4293      	cmp	r3, r2
 800449a:	d82d      	bhi.n	80044f8 <Touch_read+0x318>
 800449c:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <Touch_read+0x2f4>)
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a4:	d928      	bls.n	80044f8 <Touch_read+0x318>
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <Touch_read+0x2f4>)
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	f240 6271 	movw	r2, #1649	; 0x671
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d822      	bhi.n	80044f8 <Touch_read+0x318>
	{
		if(vol_flag>=2)
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <Touch_read+0x300>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d914      	bls.n	80044e4 <Touch_read+0x304>
			LCD_Vol_Display(true,true);
 80044ba:	2101      	movs	r1, #1
 80044bc:	2001      	movs	r0, #1
 80044be:	f7fe ff5d 	bl	800337c <LCD_Vol_Display>
 80044c2:	e013      	b.n	80044ec <Touch_read+0x30c>
 80044c4:	0800f950 	.word	0x0800f950
 80044c8:	40011c00 	.word	0x40011c00
 80044cc:	20001346 	.word	0x20001346
 80044d0:	20001344 	.word	0x20001344
 80044d4:	20001342 	.word	0x20001342
 80044d8:	200000a0 	.word	0x200000a0
 80044dc:	200000a1 	.word	0x200000a1
 80044e0:	200000bc 	.word	0x200000bc
		else
			LCD_Vol_Display(true,false);
 80044e4:	2100      	movs	r1, #0
 80044e6:	2001      	movs	r0, #1
 80044e8:	f7fe ff48 	bl	800337c <LCD_Vol_Display>
		vol_check=0;
 80044ec:	4b28      	ldr	r3, [pc, #160]	; (8004590 <Touch_read+0x3b0>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
		vol_flag=0;
 80044f2:	4b28      	ldr	r3, [pc, #160]	; (8004594 <Touch_read+0x3b4>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]

	}
	if(xraw>2200&&xraw<2700&&yraw>1000&&yraw<1650)	//볼륨다운
 80044f8:	4b27      	ldr	r3, [pc, #156]	; (8004598 <Touch_read+0x3b8>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	f640 0298 	movw	r2, #2200	; 0x898
 8004500:	4293      	cmp	r3, r2
 8004502:	d923      	bls.n	800454c <Touch_read+0x36c>
 8004504:	4b24      	ldr	r3, [pc, #144]	; (8004598 <Touch_read+0x3b8>)
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	f640 228b 	movw	r2, #2699	; 0xa8b
 800450c:	4293      	cmp	r3, r2
 800450e:	d81d      	bhi.n	800454c <Touch_read+0x36c>
 8004510:	4b22      	ldr	r3, [pc, #136]	; (800459c <Touch_read+0x3bc>)
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004518:	d918      	bls.n	800454c <Touch_read+0x36c>
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <Touch_read+0x3bc>)
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	f240 6271 	movw	r2, #1649	; 0x671
 8004522:	4293      	cmp	r3, r2
 8004524:	d812      	bhi.n	800454c <Touch_read+0x36c>
	{
		if(vol_flag==2)
 8004526:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <Touch_read+0x3b4>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d104      	bne.n	8004538 <Touch_read+0x358>
			LCD_Vol_Display(false,true);
 800452e:	2101      	movs	r1, #1
 8004530:	2000      	movs	r0, #0
 8004532:	f7fe ff23 	bl	800337c <LCD_Vol_Display>
 8004536:	e003      	b.n	8004540 <Touch_read+0x360>
		else
			LCD_Vol_Display(false,false);
 8004538:	2100      	movs	r1, #0
 800453a:	2000      	movs	r0, #0
 800453c:	f7fe ff1e 	bl	800337c <LCD_Vol_Display>
		vol_check=0;
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <Touch_read+0x3b0>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
		vol_flag=0;
 8004546:	4b13      	ldr	r3, [pc, #76]	; (8004594 <Touch_read+0x3b4>)
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
	}
	if(xraw>800&&xraw<1800&&yraw>670&&yraw<1500)	// 투 터치를 위한 보조수단
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <Touch_read+0x3b8>)
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004554:	d918      	bls.n	8004588 <Touch_read+0x3a8>
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <Touch_read+0x3b8>)
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800455e:	d213      	bcs.n	8004588 <Touch_read+0x3a8>
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <Touch_read+0x3bc>)
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	f240 229e 	movw	r2, #670	; 0x29e
 8004568:	4293      	cmp	r3, r2
 800456a:	d90d      	bls.n	8004588 <Touch_read+0x3a8>
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <Touch_read+0x3bc>)
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	f240 52db 	movw	r2, #1499	; 0x5db
 8004574:	4293      	cmp	r3, r2
 8004576:	d807      	bhi.n	8004588 <Touch_read+0x3a8>
	{
		two_touch++;
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <Touch_read+0x3c0>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <Touch_read+0x3c0>)
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e000      	b.n	8004588 <Touch_read+0x3a8>
		return;
 8004586:	bf00      	nop
	}


}
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	200000c8 	.word	0x200000c8
 8004594:	200000bc 	.word	0x200000bc
 8004598:	20001344 	.word	0x20001344
 800459c:	20001342 	.word	0x20001342
 80045a0:	200000dc 	.word	0x200000dc

080045a4 <Touch_spi>:


void Touch_spi(uint8_t *dout, uint8_t *din, uint8_t size)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	71fb      	strb	r3, [r7, #7]
	int i, j;


	for(j = 0 ; j < size ; j++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	e045      	b.n	8004644 <Touch_spi+0xa0>
	{
		for(i = 7 ; i >= 0 ; i--)
 80045b8:	2307      	movs	r3, #7
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e03c      	b.n	8004638 <Touch_spi+0x94>
		{
			HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, ((dout[j] >> i) & 0x01));
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa42 f303 	asr.w	r3, r2, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045dc:	481e      	ldr	r0, [pc, #120]	; (8004658 <Touch_spi+0xb4>)
 80045de:	f001 fc58 	bl	8005e92 <HAL_GPIO_WritePin>

			//HAL_Delay(1);
			Touch_delay();
 80045e2:	f000 f83d 	bl	8004660 <Touch_delay>
			HAL_GPIO_WritePin(T_SCL_GPIO_Port, T_SCL_Pin, GPIO_PIN_SET);
 80045e6:	2201      	movs	r2, #1
 80045e8:	2102      	movs	r1, #2
 80045ea:	481c      	ldr	r0, [pc, #112]	; (800465c <Touch_spi+0xb8>)
 80045ec:	f001 fc51 	bl	8005e92 <HAL_GPIO_WritePin>
			din[j] <<= 1;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	4413      	add	r3, r2
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	440b      	add	r3, r1
 80045fe:	0052      	lsls	r2, r2, #1
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
			din[j] |= HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin);
 8004604:	2104      	movs	r1, #4
 8004606:	4815      	ldr	r0, [pc, #84]	; (800465c <Touch_spi+0xb8>)
 8004608:	f001 fc2c 	bl	8005e64 <HAL_GPIO_ReadPin>
 800460c:	4603      	mov	r3, r0
 800460e:	4618      	mov	r0, r3
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4413      	add	r3, r2
 8004616:	781a      	ldrb	r2, [r3, #0]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	440b      	add	r3, r1
 800461e:	4302      	orrs	r2, r0
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

			//HAL_Delay(1);
			Touch_delay();
 8004624:	f000 f81c 	bl	8004660 <Touch_delay>
			HAL_GPIO_WritePin(T_SCL_GPIO_Port, T_SCL_Pin, GPIO_PIN_RESET);
 8004628:	2200      	movs	r2, #0
 800462a:	2102      	movs	r1, #2
 800462c:	480b      	ldr	r0, [pc, #44]	; (800465c <Touch_spi+0xb8>)
 800462e:	f001 fc30 	bl	8005e92 <HAL_GPIO_WritePin>
		for(i = 7 ; i >= 0 ; i--)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	3b01      	subs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	dabf      	bge.n	80045be <Touch_spi+0x1a>
	for(j = 0 ; j < size ; j++)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3301      	adds	r3, #1
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	429a      	cmp	r2, r3
 800464a:	dbb5      	blt.n	80045b8 <Touch_spi+0x14>

		}
	}

	//HAL_Delay(1);
	Touch_delay();
 800464c:	f000 f808 	bl	8004660 <Touch_delay>




}
 8004650:	bf00      	nop
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40011c00 	.word	0x40011c00
 800465c:	40010c00 	.word	0x40010c00

08004660 <Touch_delay>:




void Touch_delay()
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
	int i;
	for(i = 0 ; i < 100 ; i++);
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
 800466a:	e002      	b.n	8004672 <Touch_delay+0x12>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3301      	adds	r3, #1
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b63      	cmp	r3, #99	; 0x63
 8004676:	ddf9      	ble.n	800466c <Touch_delay+0xc>
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <VS1053_Init>:
/* endFill byte is required to stop playing */
uint8_t endFillByte;

/* Initialize VS1053 */
bool VS1053_Init()
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
	uint16_t status = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	80fb      	strh	r3, [r7, #6]

	XCS_HIGH;		    /* XCS High */
 800468e:	2201      	movs	r2, #1
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	4860      	ldr	r0, [pc, #384]	; (8004814 <VS1053_Init+0x190>)
 8004694:	f001 fbfd 	bl	8005e92 <HAL_GPIO_WritePin>
	XDCS_HIGH;		    /* XDCS High */
 8004698:	2201      	movs	r2, #1
 800469a:	2140      	movs	r1, #64	; 0x40
 800469c:	485d      	ldr	r0, [pc, #372]	; (8004814 <VS1053_Init+0x190>)
 800469e:	f001 fbf8 	bl	8005e92 <HAL_GPIO_WritePin>
	VS1053_Reset();     /* Hard Reset */
 80046a2:	f000 f8bd 	bl	8004820 <VS1053_Reset>

	/* x 1.0 Clock, 12MHz / 7, SPI Baudrate should be less than 1.75MHz */
	(HSPI_VS1053)->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;  /* 42MHz / 32 = 1.31MHz */
 80046a6:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <VS1053_Init+0x194>)
 80046a8:	2220      	movs	r2, #32
 80046aa:	61da      	str	r2, [r3, #28]
	if(HAL_SPI_Init(HSPI_VS1053) != HAL_OK) return false;
 80046ac:	485a      	ldr	r0, [pc, #360]	; (8004818 <VS1053_Init+0x194>)
 80046ae:	f003 fe5d 	bl	800836c <HAL_SPI_Init>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <VS1053_Init+0x38>
 80046b8:	2300      	movs	r3, #0
 80046ba:	e0a7      	b.n	800480c <VS1053_Init+0x188>

	/* Read Status to check SPI */
	if(!VS1053_SciRead(VS1053_REG_STATUS, &status)) return false;
 80046bc:	2201      	movs	r2, #1
 80046be:	1dbb      	adds	r3, r7, #6
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f000 f9de 	bl	8004a84 <VS1053_SciRead>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f083 0301 	eor.w	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <VS1053_Init+0x54>
 80046d4:	2300      	movs	r3, #0
 80046d6:	e099      	b.n	800480c <VS1053_Init+0x188>
	if(((status >> 4) & 0x0F) != 0x04) return false;
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d001      	beq.n	80046ea <VS1053_Init+0x66>
 80046e6:	2300      	movs	r3, #0
 80046e8:	e090      	b.n	800480c <VS1053_Init+0x188>

	/* MP3 Mode GPIO configuration */
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC017)) return false; /* GPIO direction */
 80046ea:	2307      	movs	r3, #7
 80046ec:	f24c 0117 	movw	r1, #49175	; 0xc017
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f97f 	bl	80049f4 <VS1053_SciWrite>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f083 0301 	eor.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <VS1053_Init+0x82>
 8004702:	2300      	movs	r3, #0
 8004704:	e082      	b.n	800480c <VS1053_Init+0x188>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 3)) return false;
 8004706:	2306      	movs	r3, #6
 8004708:	2103      	movs	r1, #3
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f972 	bl	80049f4 <VS1053_SciWrite>
 8004710:	4603      	mov	r3, r0
 8004712:	f083 0301 	eor.w	r3, r3, #1
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <VS1053_Init+0x9c>
 800471c:	2300      	movs	r3, #0
 800471e:	e075      	b.n	800480c <VS1053_Init+0x188>
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0xC019)) return false; /* GPIO output */
 8004720:	2307      	movs	r3, #7
 8004722:	f24c 0119 	movw	r1, #49177	; 0xc019
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f964 	bl	80049f4 <VS1053_SciWrite>
 800472c:	4603      	mov	r3, r0
 800472e:	f083 0301 	eor.w	r3, r3, #1
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <VS1053_Init+0xb8>
 8004738:	2300      	movs	r3, #0
 800473a:	e067      	b.n	800480c <VS1053_Init+0x188>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 800473c:	2306      	movs	r3, #6
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f957 	bl	80049f4 <VS1053_SciWrite>
 8004746:	4603      	mov	r3, r0
 8004748:	f083 0301 	eor.w	r3, r3, #1
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <VS1053_Init+0xd2>
 8004752:	2300      	movs	r3, #0
 8004754:	e05a      	b.n	800480c <VS1053_Init+0x188>

	/* Soft reset */
	if(!VS1053_SoftReset()) return false;
 8004756:	f000 f887 	bl	8004868 <VS1053_SoftReset>
 800475a:	4603      	mov	r3, r0
 800475c:	f083 0301 	eor.w	r3, r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <VS1053_Init+0xe6>
 8004766:	2300      	movs	r3, #0
 8004768:	e050      	b.n	800480c <VS1053_Init+0x188>

	/* x3.0 Clock, 36MHz / 7, SPI Baudrate should be less than 5.14MHz */
	if(!VS1053_SciWrite(VS1053_REG_CLOCKF, 0x6000)) return false;
 800476a:	2303      	movs	r3, #3
 800476c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004770:	4618      	mov	r0, r3
 8004772:	f000 f93f 	bl	80049f4 <VS1053_SciWrite>
 8004776:	4603      	mov	r3, r0
 8004778:	f083 0301 	eor.w	r3, r3, #1
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <VS1053_Init+0x102>
 8004782:	2300      	movs	r3, #0
 8004784:	e042      	b.n	800480c <VS1053_Init+0x188>

	(HSPI_VS1053)->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;  /* 42MHz / 16 = 2.625MHz */
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <VS1053_Init+0x194>)
 8004788:	2218      	movs	r2, #24
 800478a:	61da      	str	r2, [r3, #28]
	if(HAL_SPI_Init(HSPI_VS1053) != HAL_OK) return false;
 800478c:	4822      	ldr	r0, [pc, #136]	; (8004818 <VS1053_Init+0x194>)
 800478e:	f003 fded 	bl	800836c <HAL_SPI_Init>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <VS1053_Init+0x118>
 8004798:	2300      	movs	r3, #0
 800479a:	e037      	b.n	800480c <VS1053_Init+0x188>

	/* Read Status to check SPI */
	if(!VS1053_SciRead(VS1053_REG_STATUS, &status)) return false;
 800479c:	2201      	movs	r2, #1
 800479e:	1dbb      	adds	r3, r7, #6
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f000 f96e 	bl	8004a84 <VS1053_SciRead>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f083 0301 	eor.w	r3, r3, #1
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <VS1053_Init+0x134>
 80047b4:	2300      	movs	r3, #0
 80047b6:	e029      	b.n	800480c <VS1053_Init+0x188>
	if(((status >> 4) & 0x0F) != 0x04) return false;
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d001      	beq.n	80047ca <VS1053_Init+0x146>
 80047c6:	2300      	movs	r3, #0
 80047c8:	e020      	b.n	800480c <VS1053_Init+0x188>

	/* Read endFill Byte */
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 80047ca:	2307      	movs	r3, #7
 80047cc:	f641 6106 	movw	r1, #7686	; 0x1e06
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f90f 	bl	80049f4 <VS1053_SciWrite>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f083 0301 	eor.w	r3, r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <VS1053_Init+0x162>
 80047e2:	2300      	movs	r3, #0
 80047e4:	e012      	b.n	800480c <VS1053_Init+0x188>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 80047e6:	2206      	movs	r2, #6
 80047e8:	1d3b      	adds	r3, r7, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f000 f949 	bl	8004a84 <VS1053_SciRead>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f083 0301 	eor.w	r3, r3, #1
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <VS1053_Init+0x17e>
 80047fe:	2300      	movs	r3, #0
 8004800:	e004      	b.n	800480c <VS1053_Init+0x188>
	endFillByte = regVal & 0xFF;
 8004802:	88bb      	ldrh	r3, [r7, #4]
 8004804:	b2da      	uxtb	r2, r3
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <VS1053_Init+0x198>)
 8004808:	701a      	strb	r2, [r3, #0]

	return true;
 800480a:	2301      	movs	r3, #1
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40011c00 	.word	0x40011c00
 8004818:	20001290 	.word	0x20001290
 800481c:	20001348 	.word	0x20001348

08004820 <VS1053_Reset>:

/* Hard reset */
void VS1053_Reset()
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
 8004826:	23ff      	movs	r3, #255	; 0xff
 8004828:	71fb      	strb	r3, [r7, #7]
	XRST_LOW;		                                    /* XRST Low */
 800482a:	2200      	movs	r2, #0
 800482c:	2140      	movs	r1, #64	; 0x40
 800482e:	480c      	ldr	r0, [pc, #48]	; (8004860 <VS1053_Reset+0x40>)
 8004830:	f001 fb2f 	bl	8005e92 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(HSPI_VS1053, &dummy, 1, 10);       /* Tx Dummy */
 8004834:	1df9      	adds	r1, r7, #7
 8004836:	230a      	movs	r3, #10
 8004838:	2201      	movs	r2, #1
 800483a:	480a      	ldr	r0, [pc, #40]	; (8004864 <VS1053_Reset+0x44>)
 800483c:	f003 fe1a 	bl	8008474 <HAL_SPI_Transmit>
	HAL_Delay(10);										/* 10ms Delay */
 8004840:	200a      	movs	r0, #10
 8004842:	f000 fa73 	bl	8004d2c <HAL_Delay>
	XRST_HIGH;			                                /* XRST High */
 8004846:	2201      	movs	r2, #1
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	4805      	ldr	r0, [pc, #20]	; (8004860 <VS1053_Reset+0x40>)
 800484c:	f001 fb21 	bl	8005e92 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8004850:	200a      	movs	r0, #10
 8004852:	f000 fa6b 	bl	8004d2c <HAL_Delay>
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40011800 	.word	0x40011800
 8004864:	20001290 	.word	0x20001290

08004868 <VS1053_SoftReset>:

/* Soft reset */
bool VS1053_SoftReset()
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_MODE, 0x4804)) return false;	/* SM LINE1 | SM SDINEW | SM RESET */
 800486c:	2300      	movs	r3, #0
 800486e:	f644 0104 	movw	r1, #18436	; 0x4804
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f8be 	bl	80049f4 <VS1053_SciWrite>
 8004878:	4603      	mov	r3, r0
 800487a:	f083 0301 	eor.w	r3, r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <VS1053_SoftReset+0x20>
 8004884:	2300      	movs	r3, #0
 8004886:	e003      	b.n	8004890 <VS1053_SoftReset+0x28>
	HAL_Delay(100);
 8004888:	2064      	movs	r0, #100	; 0x64
 800488a:	f000 fa4f 	bl	8004d2c <HAL_Delay>
	return true;
 800488e:	2301      	movs	r3, #1
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}

08004894 <VS1053_SetMode>:
    return true;
}

/* Mode control */
bool VS1053_SetMode(uint16_t mode)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_MODE, mode)) return false;
 800489e:	2200      	movs	r2, #0
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 f8a5 	bl	80049f4 <VS1053_SciWrite>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f083 0301 	eor.w	r3, r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <VS1053_SetMode+0x26>
 80048b6:	2300      	movs	r3, #0
 80048b8:	e000      	b.n	80048bc <VS1053_SetMode+0x28>
	return true;
 80048ba:	2301      	movs	r3, #1
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <VS1053_GetMode>:

bool VS1053_GetMode(uint16_t *mode)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	if(!VS1053_SciRead(VS1053_REG_MODE, mode)) return false;
 80048cc:	2300      	movs	r3, #0
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 f8d7 	bl	8004a84 <VS1053_SciRead>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f083 0301 	eor.w	r3, r3, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <VS1053_GetMode+0x22>
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <VS1053_GetMode+0x24>
	return true;
 80048e6:	2301      	movs	r3, #1
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <VS1053_AutoResync>:

/* Resync control */
bool VS1053_AutoResync()
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E29)) return false; /* Auto Resync */
 80048f4:	2307      	movs	r3, #7
 80048f6:	f641 6129 	movw	r1, #7721	; 0x1e29
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f87a 	bl	80049f4 <VS1053_SciWrite>
 8004900:	4603      	mov	r3, r0
 8004902:	f083 0301 	eor.w	r3, r3, #1
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <VS1053_AutoResync+0x20>
 800490c:	2300      	movs	r3, #0
 800490e:	e00d      	b.n	800492c <VS1053_AutoResync+0x3c>
	if(!VS1053_SciWrite(VS1053_REG_WRAM, 0)) return false;
 8004910:	2306      	movs	r3, #6
 8004912:	2100      	movs	r1, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f000 f86d 	bl	80049f4 <VS1053_SciWrite>
 800491a:	4603      	mov	r3, r0
 800491c:	f083 0301 	eor.w	r3, r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <VS1053_AutoResync+0x3a>
 8004926:	2300      	movs	r3, #0
 8004928:	e000      	b.n	800492c <VS1053_AutoResync+0x3c>
	return true;
 800492a:	2301      	movs	r3, #1
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}

08004930 <VS1053_SetDecodeTime>:

/* Set decode time */
bool VS1053_SetDecodeTime(uint16_t time)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	80fb      	strh	r3, [r7, #6]
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 800493a:	2204      	movs	r2, #4
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f000 f857 	bl	80049f4 <VS1053_SciWrite>
 8004946:	4603      	mov	r3, r0
 8004948:	f083 0301 	eor.w	r3, r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <VS1053_SetDecodeTime+0x26>
 8004952:	2300      	movs	r3, #0
 8004954:	e00e      	b.n	8004974 <VS1053_SetDecodeTime+0x44>
	if(!VS1053_SciWrite(VS1053_REG_DECODE_TIME, time)) return false;
 8004956:	2204      	movs	r2, #4
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f000 f849 	bl	80049f4 <VS1053_SciWrite>
 8004962:	4603      	mov	r3, r0
 8004964:	f083 0301 	eor.w	r3, r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <VS1053_SetDecodeTime+0x42>
 800496e:	2300      	movs	r3, #0
 8004970:	e000      	b.n	8004974 <VS1053_SetDecodeTime+0x44>
	return true;
 8004972:	2301      	movs	r3, #1
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <VS1053_SendEndFill>:

/* Send endfill bytes */
bool VS1053_SendEndFill(uint16_t num)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	80fb      	strh	r3, [r7, #6]
	uint16_t regVal;
	if(!VS1053_SciWrite(VS1053_REG_WRAMADDR, 0x1E06)) return false;	/* endFill */
 8004986:	2307      	movs	r3, #7
 8004988:	f641 6106 	movw	r1, #7686	; 0x1e06
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f831 	bl	80049f4 <VS1053_SciWrite>
 8004992:	4603      	mov	r3, r0
 8004994:	f083 0301 	eor.w	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <VS1053_SendEndFill+0x26>
 800499e:	2300      	movs	r3, #0
 80049a0:	e022      	b.n	80049e8 <VS1053_SendEndFill+0x6c>
	if(!VS1053_SciRead(VS1053_REG_WRAM, &regVal)) return false;
 80049a2:	2206      	movs	r2, #6
 80049a4:	f107 030c 	add.w	r3, r7, #12
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 f86a 	bl	8004a84 <VS1053_SciRead>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f083 0301 	eor.w	r3, r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <VS1053_SendEndFill+0x44>
 80049bc:	2300      	movs	r3, #0
 80049be:	e013      	b.n	80049e8 <VS1053_SendEndFill+0x6c>
	endFillByte = regVal & 0xFF;
 80049c0:	89bb      	ldrh	r3, [r7, #12]
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <VS1053_SendEndFill+0x74>)
 80049c6:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < num; i++)
 80049c8:	2300      	movs	r3, #0
 80049ca:	81fb      	strh	r3, [r7, #14]
 80049cc:	e007      	b.n	80049de <VS1053_SendEndFill+0x62>
	{
		VS1053_SdiWrite(endFillByte);
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <VS1053_SendEndFill+0x74>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f8c6 	bl	8004b64 <VS1053_SdiWrite>
	for(uint16_t i = 0; i < num; i++)
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	3301      	adds	r3, #1
 80049dc:	81fb      	strh	r3, [r7, #14]
 80049de:	89fa      	ldrh	r2, [r7, #14]
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3f3      	bcc.n	80049ce <VS1053_SendEndFill+0x52>
	}
	return true;
 80049e6:	2301      	movs	r3, #1
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20001348 	.word	0x20001348

080049f4 <VS1053_SciWrite>:
	else return true;   /* Busy */
}

/* SCI Tx */
bool VS1053_SciWrite( uint8_t address, uint16_t input )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	460a      	mov	r2, r1
 80049fe:	71fb      	strb	r3, [r7, #7]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	buffer[0] = VS1053_WRITE_CMD;
 8004a04:	2302      	movs	r3, #2
 8004a06:	733b      	strb	r3, [r7, #12]
	buffer[1] = address;
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	737b      	strb	r3, [r7, #13]
	buffer[2] = input >> 8;			/* Input MSB */
 8004a0c:	88bb      	ldrh	r3, [r7, #4]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	73bb      	strb	r3, [r7, #14]
	buffer[3] = input & 0x00FF;		/* Input LSB */
 8004a16:	88bb      	ldrh	r3, [r7, #4]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	73fb      	strb	r3, [r7, #15]

	while (HAL_GPIO_ReadPin(VS1053_DREQ_PORT, VS1053_DREQ_PIN) == GPIO_PIN_RESET);	/* Wait DREQ High */
 8004a1c:	bf00      	nop
 8004a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a22:	4815      	ldr	r0, [pc, #84]	; (8004a78 <VS1053_SciWrite+0x84>)
 8004a24:	f001 fa1e 	bl	8005e64 <HAL_GPIO_ReadPin>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f7      	beq.n	8004a1e <VS1053_SciWrite+0x2a>

	XCS_LOW;			/* XCS Low */
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2180      	movs	r1, #128	; 0x80
 8004a32:	4812      	ldr	r0, [pc, #72]	; (8004a7c <VS1053_SciWrite+0x88>)
 8004a34:	f001 fa2d 	bl	8005e92 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(HSPI_VS1053, buffer, sizeof(buffer), 10) != HAL_OK) return false;
 8004a38:	f107 010c 	add.w	r1, r7, #12
 8004a3c:	230a      	movs	r3, #10
 8004a3e:	2204      	movs	r2, #4
 8004a40:	480f      	ldr	r0, [pc, #60]	; (8004a80 <VS1053_SciWrite+0x8c>)
 8004a42:	f003 fd17 	bl	8008474 <HAL_SPI_Transmit>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <VS1053_SciWrite+0x5c>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e00e      	b.n	8004a6e <VS1053_SciWrite+0x7a>
	XCS_HIGH;			/* XCS High */
 8004a50:	2201      	movs	r2, #1
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	4809      	ldr	r0, [pc, #36]	; (8004a7c <VS1053_SciWrite+0x88>)
 8004a56:	f001 fa1c 	bl	8005e92 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(VS1053_DREQ_PORT, VS1053_DREQ_PIN) == GPIO_PIN_RESET);	/* Wait DREQ High */
 8004a5a:	bf00      	nop
 8004a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a60:	4805      	ldr	r0, [pc, #20]	; (8004a78 <VS1053_SciWrite+0x84>)
 8004a62:	f001 f9ff 	bl	8005e64 <HAL_GPIO_ReadPin>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f7      	beq.n	8004a5c <VS1053_SciWrite+0x68>
	return true;
 8004a6c:	2301      	movs	r3, #1
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40011c00 	.word	0x40011c00
 8004a80:	20001290 	.word	0x20001290

08004a84 <VS1053_SciRead>:

/* SCI TxRx */
bool VS1053_SciRead( uint8_t address, uint16_t *res)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	6039      	str	r1, [r7, #0]
 8004a8e:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0xFF;
 8004a90:	23ff      	movs	r3, #255	; 0xff
 8004a92:	73fb      	strb	r3, [r7, #15]
	uint8_t txBuffer[2];
	uint8_t rxBuffer[2];

	txBuffer[0] = VS1053_READ_CMD;
 8004a94:	2303      	movs	r3, #3
 8004a96:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = address;
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	737b      	strb	r3, [r7, #13]

	while(HAL_GPIO_ReadPin(VS1053_DREQ_PORT, VS1053_DREQ_PIN) == GPIO_PIN_RESET);	/* Wait DREQ High */
 8004a9c:	bf00      	nop
 8004a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004aa2:	482d      	ldr	r0, [pc, #180]	; (8004b58 <VS1053_SciRead+0xd4>)
 8004aa4:	f001 f9de 	bl	8005e64 <HAL_GPIO_ReadPin>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f7      	beq.n	8004a9e <VS1053_SciRead+0x1a>

	XCS_LOW;        /* XCS Low */
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2180      	movs	r1, #128	; 0x80
 8004ab2:	482a      	ldr	r0, [pc, #168]	; (8004b5c <VS1053_SciRead+0xd8>)
 8004ab4:	f001 f9ed 	bl	8005e92 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(HSPI_VS1053, txBuffer, sizeof(txBuffer), 10) != HAL_OK) return false;
 8004ab8:	f107 010c 	add.w	r1, r7, #12
 8004abc:	230a      	movs	r3, #10
 8004abe:	2202      	movs	r2, #2
 8004ac0:	4827      	ldr	r0, [pc, #156]	; (8004b60 <VS1053_SciRead+0xdc>)
 8004ac2:	f003 fcd7 	bl	8008474 <HAL_SPI_Transmit>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <VS1053_SciRead+0x4c>
 8004acc:	2300      	movs	r3, #0
 8004ace:	e03f      	b.n	8004b50 <VS1053_SciRead+0xcc>
	if(HAL_SPI_TransmitReceive(HSPI_VS1053, &dummy, &rxBuffer[0], 1, 10) != HAL_OK) return false;
 8004ad0:	f107 0208 	add.w	r2, r7, #8
 8004ad4:	f107 010f 	add.w	r1, r7, #15
 8004ad8:	230a      	movs	r3, #10
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2301      	movs	r3, #1
 8004ade:	4820      	ldr	r0, [pc, #128]	; (8004b60 <VS1053_SciRead+0xdc>)
 8004ae0:	f003 fe04 	bl	80086ec <HAL_SPI_TransmitReceive>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <VS1053_SciRead+0x6a>
 8004aea:	2300      	movs	r3, #0
 8004aec:	e030      	b.n	8004b50 <VS1053_SciRead+0xcc>
	if(HAL_SPI_TransmitReceive(HSPI_VS1053, &dummy, &rxBuffer[1], 1, 10) != HAL_OK) return false;
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	f107 010f 	add.w	r1, r7, #15
 8004af8:	230a      	movs	r3, #10
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2301      	movs	r3, #1
 8004afe:	4818      	ldr	r0, [pc, #96]	; (8004b60 <VS1053_SciRead+0xdc>)
 8004b00:	f003 fdf4 	bl	80086ec <HAL_SPI_TransmitReceive>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <VS1053_SciRead+0x8a>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e020      	b.n	8004b50 <VS1053_SciRead+0xcc>
	XCS_HIGH;       /* XCS High */
 8004b0e:	2201      	movs	r2, #1
 8004b10:	2180      	movs	r1, #128	; 0x80
 8004b12:	4812      	ldr	r0, [pc, #72]	; (8004b5c <VS1053_SciRead+0xd8>)
 8004b14:	f001 f9bd 	bl	8005e92 <HAL_GPIO_WritePin>

	*res = rxBuffer[0];     /* Received data */
 8004b18:	7a3b      	ldrb	r3, [r7, #8]
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	801a      	strh	r2, [r3, #0]
	*res <<= 8;				/* MSB */
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	801a      	strh	r2, [r3, #0]
	*res |= rxBuffer[1];	/* LSB */
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	7a7b      	ldrb	r3, [r7, #9]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	4313      	orrs	r3, r2
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	801a      	strh	r2, [r3, #0]

	while (HAL_GPIO_ReadPin(VS1053_DREQ_PORT, VS1053_DREQ_PIN) == GPIO_PIN_RESET);	/* Wait DREQ High */
 8004b3c:	bf00      	nop
 8004b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b42:	4805      	ldr	r0, [pc, #20]	; (8004b58 <VS1053_SciRead+0xd4>)
 8004b44:	f001 f98e 	bl	8005e64 <HAL_GPIO_ReadPin>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f7      	beq.n	8004b3e <VS1053_SciRead+0xba>
	return true;
 8004b4e:	2301      	movs	r3, #1
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40011000 	.word	0x40011000
 8004b5c:	40011c00 	.word	0x40011c00
 8004b60:	20001290 	.word	0x20001290

08004b64 <VS1053_SdiWrite>:

/* SDI Tx */
bool VS1053_SdiWrite( uint8_t input )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	71fb      	strb	r3, [r7, #7]
	while (HAL_GPIO_ReadPin(VS1053_DREQ_PORT, VS1053_DREQ_PIN) == GPIO_PIN_RESET);	/* Wait DREQ High */
 8004b6e:	bf00      	nop
 8004b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b74:	480f      	ldr	r0, [pc, #60]	; (8004bb4 <VS1053_SdiWrite+0x50>)
 8004b76:	f001 f975 	bl	8005e64 <HAL_GPIO_ReadPin>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f7      	beq.n	8004b70 <VS1053_SdiWrite+0xc>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8004b80:	2200      	movs	r2, #0
 8004b82:	2140      	movs	r1, #64	; 0x40
 8004b84:	480c      	ldr	r0, [pc, #48]	; (8004bb8 <VS1053_SdiWrite+0x54>)
 8004b86:	f001 f984 	bl	8005e92 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(HSPI_VS1053, &input, 1, 10) != HAL_OK) return false;		/* SPI Tx 1 byte */
 8004b8a:	1df9      	adds	r1, r7, #7
 8004b8c:	230a      	movs	r3, #10
 8004b8e:	2201      	movs	r2, #1
 8004b90:	480a      	ldr	r0, [pc, #40]	; (8004bbc <VS1053_SdiWrite+0x58>)
 8004b92:	f003 fc6f 	bl	8008474 <HAL_SPI_Transmit>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <VS1053_SdiWrite+0x3c>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e005      	b.n	8004bac <VS1053_SdiWrite+0x48>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	2140      	movs	r1, #64	; 0x40
 8004ba4:	4804      	ldr	r0, [pc, #16]	; (8004bb8 <VS1053_SdiWrite+0x54>)
 8004ba6:	f001 f974 	bl	8005e92 <HAL_GPIO_WritePin>

	return true;
 8004baa:	2301      	movs	r3, #1
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40011000 	.word	0x40011000
 8004bb8:	40011c00 	.word	0x40011c00
 8004bbc:	20001290 	.word	0x20001290

08004bc0 <VS1053_SdiWrite32>:

/* SDI Tx 32 bytes */
bool VS1053_SdiWrite32( uint8_t *input32 )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(VS1053_DREQ_PORT, VS1053_DREQ_PIN) == GPIO_PIN_RESET);	/* Wait DREQ High */
 8004bc8:	bf00      	nop
 8004bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bce:	4810      	ldr	r0, [pc, #64]	; (8004c10 <VS1053_SdiWrite32+0x50>)
 8004bd0:	f001 f948 	bl	8005e64 <HAL_GPIO_ReadPin>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f7      	beq.n	8004bca <VS1053_SdiWrite32+0xa>

	XDCS_LOW;			/* XDCS Low(SDI) */
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2140      	movs	r1, #64	; 0x40
 8004bde:	480d      	ldr	r0, [pc, #52]	; (8004c14 <VS1053_SdiWrite32+0x54>)
 8004be0:	f001 f957 	bl	8005e92 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(HSPI_VS1053, input32, 32, 100) != HAL_OK) return false;		/* SPI Tx 32 bytes */
 8004be4:	2364      	movs	r3, #100	; 0x64
 8004be6:	2220      	movs	r2, #32
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	480b      	ldr	r0, [pc, #44]	; (8004c18 <VS1053_SdiWrite32+0x58>)
 8004bec:	f003 fc42 	bl	8008474 <HAL_SPI_Transmit>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <VS1053_SdiWrite32+0x3a>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e005      	b.n	8004c06 <VS1053_SdiWrite32+0x46>
	XDCS_HIGH;			/* XDCS High(SDI) */
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	4805      	ldr	r0, [pc, #20]	; (8004c14 <VS1053_SdiWrite32+0x54>)
 8004c00:	f001 f947 	bl	8005e92 <HAL_GPIO_WritePin>

	return true;
 8004c04:	2301      	movs	r3, #1
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40011000 	.word	0x40011000
 8004c14:	40011c00 	.word	0x40011c00
 8004c18:	20001290 	.word	0x20001290

08004c1c <Reset_Handler>:
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	e003      	b.n	8004c28 <LoopCopyDataInit>

08004c20 <CopyDataInit>:
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <LoopFillZerobss+0x14>)
 8004c22:	585b      	ldr	r3, [r3, r1]
 8004c24:	5043      	str	r3, [r0, r1]
 8004c26:	3104      	adds	r1, #4

08004c28 <LoopCopyDataInit>:
 8004c28:	480a      	ldr	r0, [pc, #40]	; (8004c54 <LoopFillZerobss+0x18>)
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <LoopFillZerobss+0x1c>)
 8004c2c:	1842      	adds	r2, r0, r1
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d3f6      	bcc.n	8004c20 <CopyDataInit>
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <LoopFillZerobss+0x20>)
 8004c34:	e002      	b.n	8004c3c <LoopFillZerobss>

08004c36 <FillZerobss>:
 8004c36:	2300      	movs	r3, #0
 8004c38:	f842 3b04 	str.w	r3, [r2], #4

08004c3c <LoopFillZerobss>:
 8004c3c:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <LoopFillZerobss+0x24>)
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d3f9      	bcc.n	8004c36 <FillZerobss>
 8004c42:	f7fd fc1f 	bl	8002484 <SystemInit>
 8004c46:	f009 fc13 	bl	800e470 <__libc_init_array>
 8004c4a:	f7fc f97d 	bl	8000f48 <main>
 8004c4e:	4770      	bx	lr
 8004c50:	08014590 	.word	0x08014590
 8004c54:	20000000 	.word	0x20000000
 8004c58:	2000007c 	.word	0x2000007c
 8004c5c:	2000007c 	.word	0x2000007c
 8004c60:	200017c4 	.word	0x200017c4

08004c64 <ADC1_2_IRQHandler>:
 8004c64:	e7fe      	b.n	8004c64 <ADC1_2_IRQHandler>
	...

08004c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_Init+0x28>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <HAL_Init+0x28>)
 8004c72:	f043 0310 	orr.w	r3, r3, #16
 8004c76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c78:	2003      	movs	r0, #3
 8004c7a:	f000 fb63 	bl	8005344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f000 f808 	bl	8004c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c84:	f7fc ff80 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40022000 	.word	0x40022000

08004c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_InitTick+0x54>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_InitTick+0x58>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fb7b 	bl	80053ae <HAL_SYSTICK_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e00e      	b.n	8004ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b0f      	cmp	r3, #15
 8004cc6:	d80a      	bhi.n	8004cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	f000 fb43 	bl	800535a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cd4:	4a06      	ldr	r2, [pc, #24]	; (8004cf0 <HAL_InitTick+0x5c>)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000008 	.word	0x20000008
 8004cec:	20000014 	.word	0x20000014
 8004cf0:	20000010 	.word	0x20000010

08004cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_IncTick+0x1c>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_IncTick+0x20>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4413      	add	r3, r2
 8004d04:	4a03      	ldr	r2, [pc, #12]	; (8004d14 <HAL_IncTick+0x20>)
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr
 8004d10:	20000014 	.word	0x20000014
 8004d14:	2000134c 	.word	0x2000134c

08004d18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <HAL_GetTick+0x10>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	2000134c 	.word	0x2000134c

08004d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d34:	f7ff fff0 	bl	8004d18 <HAL_GetTick>
 8004d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d005      	beq.n	8004d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_Delay+0x44>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d52:	bf00      	nop
 8004d54:	f7ff ffe0 	bl	8004d18 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d8f7      	bhi.n	8004d54 <HAL_Delay+0x28>
  {
  }
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000014 	.word	0x20000014

08004d74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0ce      	b.n	8004f34 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc ff16 	bl	8001be4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f9bd 	bl	8005138 <ADC_ConversionStop_Disable>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f040 80a9 	bne.w	8004f22 <HAL_ADC_Init+0x1ae>
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 80a5 	bne.w	8004f22 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004de0:	f023 0302 	bic.w	r3, r3, #2
 8004de4:	f043 0202 	orr.w	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4951      	ldr	r1, [pc, #324]	; (8004f3c <HAL_ADC_Init+0x1c8>)
 8004df6:	428b      	cmp	r3, r1
 8004df8:	d10a      	bne.n	8004e10 <HAL_ADC_Init+0x9c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e02:	d002      	beq.n	8004e0a <HAL_ADC_Init+0x96>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	e004      	b.n	8004e14 <HAL_ADC_Init+0xa0>
 8004e0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e0e:	e001      	b.n	8004e14 <HAL_ADC_Init+0xa0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7b1b      	ldrb	r3, [r3, #12]
 8004e1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2c:	d003      	beq.n	8004e36 <HAL_ADC_Init+0xc2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d102      	bne.n	8004e3c <HAL_ADC_Init+0xc8>
 8004e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e3a:	e000      	b.n	8004e3e <HAL_ADC_Init+0xca>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7d1b      	ldrb	r3, [r3, #20]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d119      	bne.n	8004e80 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7b1b      	ldrb	r3, [r3, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	035a      	lsls	r2, r3, #13
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	e00b      	b.n	8004e80 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <HAL_ADC_Init+0x1cc>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb0:	d003      	beq.n	8004eba <HAL_ADC_Init+0x146>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d104      	bne.n	8004ec4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	051b      	lsls	r3, r3, #20
 8004ec2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <HAL_ADC_Init+0x1d0>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d10b      	bne.n	8004f00 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	f043 0201 	orr.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004efe:	e018      	b.n	8004f32 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f023 0312 	bic.w	r3, r3, #18
 8004f08:	f043 0210 	orr.w	r2, r3, #16
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	f043 0201 	orr.w	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f20:	e007      	b.n	8004f32 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	f043 0210 	orr.w	r2, r3, #16
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40013c00 	.word	0x40013c00
 8004f40:	ffe1f7fd 	.word	0xffe1f7fd
 8004f44:	ff1f0efe 	.word	0xff1f0efe

08004f48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x20>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e0dc      	b.n	8005122 <HAL_ADC_ConfigChannel+0x1da>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b06      	cmp	r3, #6
 8004f76:	d81c      	bhi.n	8004fb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	3b05      	subs	r3, #5
 8004f8a:	221f      	movs	r2, #31
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	4019      	ands	r1, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3b05      	subs	r3, #5
 8004fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	635a      	str	r2, [r3, #52]	; 0x34
 8004fb0:	e03c      	b.n	800502c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d81c      	bhi.n	8004ff4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	3b23      	subs	r3, #35	; 0x23
 8004fcc:	221f      	movs	r2, #31
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	4019      	ands	r1, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3b23      	subs	r3, #35	; 0x23
 8004fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff2:	e01b      	b.n	800502c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	3b41      	subs	r3, #65	; 0x41
 8005006:	221f      	movs	r2, #31
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	4019      	ands	r1, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	3b41      	subs	r3, #65	; 0x41
 8005020:	fa00 f203 	lsl.w	r2, r0, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b09      	cmp	r3, #9
 8005032:	d91c      	bls.n	800506e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68d9      	ldr	r1, [r3, #12]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	4413      	add	r3, r2
 8005044:	3b1e      	subs	r3, #30
 8005046:	2207      	movs	r2, #7
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	4019      	ands	r1, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6898      	ldr	r0, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4413      	add	r3, r2
 800505e:	3b1e      	subs	r3, #30
 8005060:	fa00 f203 	lsl.w	r2, r0, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	60da      	str	r2, [r3, #12]
 800506c:	e019      	b.n	80050a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6919      	ldr	r1, [r3, #16]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	2207      	movs	r2, #7
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	4019      	ands	r1, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	6898      	ldr	r0, [r3, #8]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	4413      	add	r3, r2
 8005096:	fa00 f203 	lsl.w	r2, r0, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d003      	beq.n	80050b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80050ae:	2b11      	cmp	r3, #17
 80050b0:	d132      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_ADC_ConfigChannel+0x1e4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d125      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d126      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80050d8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d11a      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80050e2:	4b13      	ldr	r3, [pc, #76]	; (8005130 <HAL_ADC_ConfigChannel+0x1e8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a13      	ldr	r2, [pc, #76]	; (8005134 <HAL_ADC_ConfigChannel+0x1ec>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	0c9a      	lsrs	r2, r3, #18
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80050f8:	e002      	b.n	8005100 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f9      	bne.n	80050fa <HAL_ADC_ConfigChannel+0x1b2>
 8005106:	e007      	b.n	8005118 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	f043 0220 	orr.w	r2, r3, #32
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr
 800512c:	40012400 	.word	0x40012400
 8005130:	20000008 	.word	0x20000008
 8005134:	431bde83 	.word	0x431bde83

08005138 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d127      	bne.n	80051a2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005162:	f7ff fdd9 	bl	8004d18 <HAL_GetTick>
 8005166:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005168:	e014      	b.n	8005194 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800516a:	f7ff fdd5 	bl	8004d18 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d90d      	bls.n	8005194 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	f043 0210 	orr.w	r2, r3, #16
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	f043 0201 	orr.w	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e007      	b.n	80051a4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d0e3      	beq.n	800516a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051bc:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <__NVIC_SetPriorityGrouping+0x44>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051c8:	4013      	ands	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051de:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <__NVIC_SetPriorityGrouping+0x44>)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	60d3      	str	r3, [r2, #12]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	e000ed00 	.word	0xe000ed00

080051f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <__NVIC_GetPriorityGrouping+0x18>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	f003 0307 	and.w	r3, r3, #7
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	e000ed00 	.word	0xe000ed00

08005210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800521a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521e:	2b00      	cmp	r3, #0
 8005220:	db0b      	blt.n	800523a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	f003 021f 	and.w	r2, r3, #31
 8005228:	4906      	ldr	r1, [pc, #24]	; (8005244 <__NVIC_EnableIRQ+0x34>)
 800522a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2001      	movs	r0, #1
 8005232:	fa00 f202 	lsl.w	r2, r0, r2
 8005236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	e000e100 	.word	0xe000e100

08005248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	6039      	str	r1, [r7, #0]
 8005252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005258:	2b00      	cmp	r3, #0
 800525a:	db0a      	blt.n	8005272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	490c      	ldr	r1, [pc, #48]	; (8005294 <__NVIC_SetPriority+0x4c>)
 8005262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005266:	0112      	lsls	r2, r2, #4
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	440b      	add	r3, r1
 800526c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005270:	e00a      	b.n	8005288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4908      	ldr	r1, [pc, #32]	; (8005298 <__NVIC_SetPriority+0x50>)
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	3b04      	subs	r3, #4
 8005280:	0112      	lsls	r2, r2, #4
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	440b      	add	r3, r1
 8005286:	761a      	strb	r2, [r3, #24]
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	e000e100 	.word	0xe000e100
 8005298:	e000ed00 	.word	0xe000ed00

0800529c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f1c3 0307 	rsb	r3, r3, #7
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	bf28      	it	cs
 80052ba:	2304      	movcs	r3, #4
 80052bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	3304      	adds	r3, #4
 80052c2:	2b06      	cmp	r3, #6
 80052c4:	d902      	bls.n	80052cc <NVIC_EncodePriority+0x30>
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	3b03      	subs	r3, #3
 80052ca:	e000      	b.n	80052ce <NVIC_EncodePriority+0x32>
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43da      	mvns	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	401a      	ands	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052e4:	f04f 31ff 	mov.w	r1, #4294967295
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	43d9      	mvns	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f4:	4313      	orrs	r3, r2
         );
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3724      	adds	r7, #36	; 0x24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3b01      	subs	r3, #1
 800530c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005310:	d301      	bcc.n	8005316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005312:	2301      	movs	r3, #1
 8005314:	e00f      	b.n	8005336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005316:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <SysTick_Config+0x40>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3b01      	subs	r3, #1
 800531c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800531e:	210f      	movs	r1, #15
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	f7ff ff90 	bl	8005248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <SysTick_Config+0x40>)
 800532a:	2200      	movs	r2, #0
 800532c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800532e:	4b04      	ldr	r3, [pc, #16]	; (8005340 <SysTick_Config+0x40>)
 8005330:	2207      	movs	r2, #7
 8005332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	e000e010 	.word	0xe000e010

08005344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff2d 	bl	80051ac <__NVIC_SetPriorityGrouping>
}
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	4603      	mov	r3, r0
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800536c:	f7ff ff42 	bl	80051f4 <__NVIC_GetPriorityGrouping>
 8005370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	f7ff ff90 	bl	800529c <NVIC_EncodePriority>
 800537c:	4602      	mov	r2, r0
 800537e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005382:	4611      	mov	r1, r2
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff ff5f 	bl	8005248 <__NVIC_SetPriority>
}
 800538a:	bf00      	nop
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	4603      	mov	r3, r0
 800539a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800539c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff ff35 	bl	8005210 <__NVIC_EnableIRQ>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff ffa2 	bl	8005300 <SysTick_Config>
 80053bc:	4603      	mov	r3, r0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e059      	b.n	8005492 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	4b2d      	ldr	r3, [pc, #180]	; (800549c <HAL_DMA_Init+0xd4>)
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d80f      	bhi.n	800540a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	4b2b      	ldr	r3, [pc, #172]	; (80054a0 <HAL_DMA_Init+0xd8>)
 80053f2:	4413      	add	r3, r2
 80053f4:	4a2b      	ldr	r2, [pc, #172]	; (80054a4 <HAL_DMA_Init+0xdc>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	091b      	lsrs	r3, r3, #4
 80053fc:	009a      	lsls	r2, r3, #2
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a28      	ldr	r2, [pc, #160]	; (80054a8 <HAL_DMA_Init+0xe0>)
 8005406:	63da      	str	r2, [r3, #60]	; 0x3c
 8005408:	e00e      	b.n	8005428 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	4b26      	ldr	r3, [pc, #152]	; (80054ac <HAL_DMA_Init+0xe4>)
 8005412:	4413      	add	r3, r2
 8005414:	4a23      	ldr	r2, [pc, #140]	; (80054a4 <HAL_DMA_Init+0xdc>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	091b      	lsrs	r3, r3, #4
 800541c:	009a      	lsls	r2, r3, #2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a22      	ldr	r2, [pc, #136]	; (80054b0 <HAL_DMA_Init+0xe8>)
 8005426:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800543e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005442:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800544c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	40020407 	.word	0x40020407
 80054a0:	bffdfff8 	.word	0xbffdfff8
 80054a4:	cccccccd 	.word	0xcccccccd
 80054a8:	40020000 	.word	0x40020000
 80054ac:	bffdfbf8 	.word	0xbffdfbf8
 80054b0:	40020400 	.word	0x40020400

080054b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d005      	beq.n	80054d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2204      	movs	r2, #4
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
 80054d4:	e0d6      	b.n	8005684 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 020e 	bic.w	r2, r2, #14
 80054e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	4b64      	ldr	r3, [pc, #400]	; (8005690 <HAL_DMA_Abort_IT+0x1dc>)
 80054fe:	429a      	cmp	r2, r3
 8005500:	d958      	bls.n	80055b4 <HAL_DMA_Abort_IT+0x100>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a63      	ldr	r2, [pc, #396]	; (8005694 <HAL_DMA_Abort_IT+0x1e0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d04f      	beq.n	80055ac <HAL_DMA_Abort_IT+0xf8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a61      	ldr	r2, [pc, #388]	; (8005698 <HAL_DMA_Abort_IT+0x1e4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d048      	beq.n	80055a8 <HAL_DMA_Abort_IT+0xf4>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a60      	ldr	r2, [pc, #384]	; (800569c <HAL_DMA_Abort_IT+0x1e8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d040      	beq.n	80055a2 <HAL_DMA_Abort_IT+0xee>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a5e      	ldr	r2, [pc, #376]	; (80056a0 <HAL_DMA_Abort_IT+0x1ec>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d038      	beq.n	800559c <HAL_DMA_Abort_IT+0xe8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a5d      	ldr	r2, [pc, #372]	; (80056a4 <HAL_DMA_Abort_IT+0x1f0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d030      	beq.n	8005596 <HAL_DMA_Abort_IT+0xe2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5b      	ldr	r2, [pc, #364]	; (80056a8 <HAL_DMA_Abort_IT+0x1f4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d028      	beq.n	8005590 <HAL_DMA_Abort_IT+0xdc>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a53      	ldr	r2, [pc, #332]	; (8005690 <HAL_DMA_Abort_IT+0x1dc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d020      	beq.n	800558a <HAL_DMA_Abort_IT+0xd6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a57      	ldr	r2, [pc, #348]	; (80056ac <HAL_DMA_Abort_IT+0x1f8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d019      	beq.n	8005586 <HAL_DMA_Abort_IT+0xd2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a56      	ldr	r2, [pc, #344]	; (80056b0 <HAL_DMA_Abort_IT+0x1fc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d012      	beq.n	8005582 <HAL_DMA_Abort_IT+0xce>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a54      	ldr	r2, [pc, #336]	; (80056b4 <HAL_DMA_Abort_IT+0x200>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00a      	beq.n	800557c <HAL_DMA_Abort_IT+0xc8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a53      	ldr	r2, [pc, #332]	; (80056b8 <HAL_DMA_Abort_IT+0x204>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d102      	bne.n	8005576 <HAL_DMA_Abort_IT+0xc2>
 8005570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005574:	e01b      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 8005576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800557a:	e018      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 800557c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005580:	e015      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 8005582:	2310      	movs	r3, #16
 8005584:	e013      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 8005586:	2301      	movs	r3, #1
 8005588:	e011      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 800558a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800558e:	e00e      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 8005590:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005594:	e00b      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 8005596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800559a:	e008      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 800559c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055a0:	e005      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 80055a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055a6:	e002      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 80055a8:	2310      	movs	r3, #16
 80055aa:	e000      	b.n	80055ae <HAL_DMA_Abort_IT+0xfa>
 80055ac:	2301      	movs	r3, #1
 80055ae:	4a43      	ldr	r2, [pc, #268]	; (80056bc <HAL_DMA_Abort_IT+0x208>)
 80055b0:	6053      	str	r3, [r2, #4]
 80055b2:	e057      	b.n	8005664 <HAL_DMA_Abort_IT+0x1b0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a36      	ldr	r2, [pc, #216]	; (8005694 <HAL_DMA_Abort_IT+0x1e0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d04f      	beq.n	800565e <HAL_DMA_Abort_IT+0x1aa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a35      	ldr	r2, [pc, #212]	; (8005698 <HAL_DMA_Abort_IT+0x1e4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d048      	beq.n	800565a <HAL_DMA_Abort_IT+0x1a6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a33      	ldr	r2, [pc, #204]	; (800569c <HAL_DMA_Abort_IT+0x1e8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d040      	beq.n	8005654 <HAL_DMA_Abort_IT+0x1a0>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a32      	ldr	r2, [pc, #200]	; (80056a0 <HAL_DMA_Abort_IT+0x1ec>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d038      	beq.n	800564e <HAL_DMA_Abort_IT+0x19a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a30      	ldr	r2, [pc, #192]	; (80056a4 <HAL_DMA_Abort_IT+0x1f0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d030      	beq.n	8005648 <HAL_DMA_Abort_IT+0x194>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2f      	ldr	r2, [pc, #188]	; (80056a8 <HAL_DMA_Abort_IT+0x1f4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d028      	beq.n	8005642 <HAL_DMA_Abort_IT+0x18e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <HAL_DMA_Abort_IT+0x1dc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d020      	beq.n	800563c <HAL_DMA_Abort_IT+0x188>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2b      	ldr	r2, [pc, #172]	; (80056ac <HAL_DMA_Abort_IT+0x1f8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d019      	beq.n	8005638 <HAL_DMA_Abort_IT+0x184>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a29      	ldr	r2, [pc, #164]	; (80056b0 <HAL_DMA_Abort_IT+0x1fc>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d012      	beq.n	8005634 <HAL_DMA_Abort_IT+0x180>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a28      	ldr	r2, [pc, #160]	; (80056b4 <HAL_DMA_Abort_IT+0x200>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00a      	beq.n	800562e <HAL_DMA_Abort_IT+0x17a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a26      	ldr	r2, [pc, #152]	; (80056b8 <HAL_DMA_Abort_IT+0x204>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d102      	bne.n	8005628 <HAL_DMA_Abort_IT+0x174>
 8005622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005626:	e01b      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 8005628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800562c:	e018      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 800562e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005632:	e015      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 8005634:	2310      	movs	r3, #16
 8005636:	e013      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 8005638:	2301      	movs	r3, #1
 800563a:	e011      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 800563c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005640:	e00e      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 8005642:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005646:	e00b      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 8005648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800564c:	e008      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 800564e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005652:	e005      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 8005654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005658:	e002      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 800565a:	2310      	movs	r3, #16
 800565c:	e000      	b.n	8005660 <HAL_DMA_Abort_IT+0x1ac>
 800565e:	2301      	movs	r3, #1
 8005660:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <HAL_DMA_Abort_IT+0x20c>)
 8005662:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
    } 
  }
  return status;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40020080 	.word	0x40020080
 8005694:	40020008 	.word	0x40020008
 8005698:	4002001c 	.word	0x4002001c
 800569c:	40020030 	.word	0x40020030
 80056a0:	40020044 	.word	0x40020044
 80056a4:	40020058 	.word	0x40020058
 80056a8:	4002006c 	.word	0x4002006c
 80056ac:	40020408 	.word	0x40020408
 80056b0:	4002041c 	.word	0x4002041c
 80056b4:	40020430 	.word	0x40020430
 80056b8:	40020444 	.word	0x40020444
 80056bc:	40020400 	.word	0x40020400
 80056c0:	40020000 	.word	0x40020000

080056c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	2204      	movs	r2, #4
 80056e2:	409a      	lsls	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80d6 	beq.w	800589a <HAL_DMA_IRQHandler+0x1d6>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80d0 	beq.w	800589a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d107      	bne.n	8005718 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0204 	bic.w	r2, r2, #4
 8005716:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	4b9b      	ldr	r3, [pc, #620]	; (800598c <HAL_DMA_IRQHandler+0x2c8>)
 8005720:	429a      	cmp	r2, r3
 8005722:	d958      	bls.n	80057d6 <HAL_DMA_IRQHandler+0x112>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a99      	ldr	r2, [pc, #612]	; (8005990 <HAL_DMA_IRQHandler+0x2cc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d04f      	beq.n	80057ce <HAL_DMA_IRQHandler+0x10a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a98      	ldr	r2, [pc, #608]	; (8005994 <HAL_DMA_IRQHandler+0x2d0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d048      	beq.n	80057ca <HAL_DMA_IRQHandler+0x106>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a96      	ldr	r2, [pc, #600]	; (8005998 <HAL_DMA_IRQHandler+0x2d4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d040      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x100>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a95      	ldr	r2, [pc, #596]	; (800599c <HAL_DMA_IRQHandler+0x2d8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d038      	beq.n	80057be <HAL_DMA_IRQHandler+0xfa>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a93      	ldr	r2, [pc, #588]	; (80059a0 <HAL_DMA_IRQHandler+0x2dc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d030      	beq.n	80057b8 <HAL_DMA_IRQHandler+0xf4>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a92      	ldr	r2, [pc, #584]	; (80059a4 <HAL_DMA_IRQHandler+0x2e0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d028      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xee>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a89      	ldr	r2, [pc, #548]	; (800598c <HAL_DMA_IRQHandler+0x2c8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d020      	beq.n	80057ac <HAL_DMA_IRQHandler+0xe8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a8e      	ldr	r2, [pc, #568]	; (80059a8 <HAL_DMA_IRQHandler+0x2e4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d019      	beq.n	80057a8 <HAL_DMA_IRQHandler+0xe4>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a8c      	ldr	r2, [pc, #560]	; (80059ac <HAL_DMA_IRQHandler+0x2e8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d012      	beq.n	80057a4 <HAL_DMA_IRQHandler+0xe0>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a8b      	ldr	r2, [pc, #556]	; (80059b0 <HAL_DMA_IRQHandler+0x2ec>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00a      	beq.n	800579e <HAL_DMA_IRQHandler+0xda>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a89      	ldr	r2, [pc, #548]	; (80059b4 <HAL_DMA_IRQHandler+0x2f0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d102      	bne.n	8005798 <HAL_DMA_IRQHandler+0xd4>
 8005792:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005796:	e01b      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 8005798:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800579c:	e018      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 800579e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a2:	e015      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	e013      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 80057a8:	2304      	movs	r3, #4
 80057aa:	e011      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 80057ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80057b0:	e00e      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 80057b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057b6:	e00b      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 80057b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057bc:	e008      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 80057be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057c2:	e005      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 80057c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c8:	e002      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 80057ca:	2340      	movs	r3, #64	; 0x40
 80057cc:	e000      	b.n	80057d0 <HAL_DMA_IRQHandler+0x10c>
 80057ce:	2304      	movs	r3, #4
 80057d0:	4a79      	ldr	r2, [pc, #484]	; (80059b8 <HAL_DMA_IRQHandler+0x2f4>)
 80057d2:	6053      	str	r3, [r2, #4]
 80057d4:	e057      	b.n	8005886 <HAL_DMA_IRQHandler+0x1c2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a6d      	ldr	r2, [pc, #436]	; (8005990 <HAL_DMA_IRQHandler+0x2cc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d04f      	beq.n	8005880 <HAL_DMA_IRQHandler+0x1bc>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a6b      	ldr	r2, [pc, #428]	; (8005994 <HAL_DMA_IRQHandler+0x2d0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d048      	beq.n	800587c <HAL_DMA_IRQHandler+0x1b8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a6a      	ldr	r2, [pc, #424]	; (8005998 <HAL_DMA_IRQHandler+0x2d4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d040      	beq.n	8005876 <HAL_DMA_IRQHandler+0x1b2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a68      	ldr	r2, [pc, #416]	; (800599c <HAL_DMA_IRQHandler+0x2d8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d038      	beq.n	8005870 <HAL_DMA_IRQHandler+0x1ac>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a67      	ldr	r2, [pc, #412]	; (80059a0 <HAL_DMA_IRQHandler+0x2dc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d030      	beq.n	800586a <HAL_DMA_IRQHandler+0x1a6>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a65      	ldr	r2, [pc, #404]	; (80059a4 <HAL_DMA_IRQHandler+0x2e0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d028      	beq.n	8005864 <HAL_DMA_IRQHandler+0x1a0>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a5d      	ldr	r2, [pc, #372]	; (800598c <HAL_DMA_IRQHandler+0x2c8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d020      	beq.n	800585e <HAL_DMA_IRQHandler+0x19a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a61      	ldr	r2, [pc, #388]	; (80059a8 <HAL_DMA_IRQHandler+0x2e4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d019      	beq.n	800585a <HAL_DMA_IRQHandler+0x196>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a60      	ldr	r2, [pc, #384]	; (80059ac <HAL_DMA_IRQHandler+0x2e8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d012      	beq.n	8005856 <HAL_DMA_IRQHandler+0x192>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a5e      	ldr	r2, [pc, #376]	; (80059b0 <HAL_DMA_IRQHandler+0x2ec>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00a      	beq.n	8005850 <HAL_DMA_IRQHandler+0x18c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a5d      	ldr	r2, [pc, #372]	; (80059b4 <HAL_DMA_IRQHandler+0x2f0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d102      	bne.n	800584a <HAL_DMA_IRQHandler+0x186>
 8005844:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005848:	e01b      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 800584a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800584e:	e018      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 8005850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005854:	e015      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 8005856:	2340      	movs	r3, #64	; 0x40
 8005858:	e013      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 800585a:	2304      	movs	r3, #4
 800585c:	e011      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 800585e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005862:	e00e      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 8005864:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005868:	e00b      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 800586a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800586e:	e008      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 8005870:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005874:	e005      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 8005876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800587a:	e002      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	e000      	b.n	8005882 <HAL_DMA_IRQHandler+0x1be>
 8005880:	2304      	movs	r3, #4
 8005882:	4a4e      	ldr	r2, [pc, #312]	; (80059bc <HAL_DMA_IRQHandler+0x2f8>)
 8005884:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8136 	beq.w	8005afc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005898:	e130      	b.n	8005afc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	2202      	movs	r2, #2
 80058a0:	409a      	lsls	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80f8 	beq.w	8005a9c <HAL_DMA_IRQHandler+0x3d8>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80f2 	beq.w	8005a9c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 020a 	bic.w	r2, r2, #10
 80058d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	4b29      	ldr	r3, [pc, #164]	; (800598c <HAL_DMA_IRQHandler+0x2c8>)
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d973      	bls.n	80059d2 <HAL_DMA_IRQHandler+0x30e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a28      	ldr	r2, [pc, #160]	; (8005990 <HAL_DMA_IRQHandler+0x2cc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d06a      	beq.n	80059ca <HAL_DMA_IRQHandler+0x306>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a26      	ldr	r2, [pc, #152]	; (8005994 <HAL_DMA_IRQHandler+0x2d0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d063      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x302>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a25      	ldr	r2, [pc, #148]	; (8005998 <HAL_DMA_IRQHandler+0x2d4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d05b      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x2fc>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a23      	ldr	r2, [pc, #140]	; (800599c <HAL_DMA_IRQHandler+0x2d8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d038      	beq.n	8005984 <HAL_DMA_IRQHandler+0x2c0>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <HAL_DMA_IRQHandler+0x2dc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d030      	beq.n	800597e <HAL_DMA_IRQHandler+0x2ba>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <HAL_DMA_IRQHandler+0x2e0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d028      	beq.n	8005978 <HAL_DMA_IRQHandler+0x2b4>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <HAL_DMA_IRQHandler+0x2c8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d020      	beq.n	8005972 <HAL_DMA_IRQHandler+0x2ae>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <HAL_DMA_IRQHandler+0x2e4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d019      	beq.n	800596e <HAL_DMA_IRQHandler+0x2aa>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1b      	ldr	r2, [pc, #108]	; (80059ac <HAL_DMA_IRQHandler+0x2e8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d012      	beq.n	800596a <HAL_DMA_IRQHandler+0x2a6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a19      	ldr	r2, [pc, #100]	; (80059b0 <HAL_DMA_IRQHandler+0x2ec>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00a      	beq.n	8005964 <HAL_DMA_IRQHandler+0x2a0>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <HAL_DMA_IRQHandler+0x2f0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d102      	bne.n	800595e <HAL_DMA_IRQHandler+0x29a>
 8005958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800595c:	e036      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 800595e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005962:	e033      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 8005964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005968:	e030      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 800596a:	2320      	movs	r3, #32
 800596c:	e02e      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 800596e:	2302      	movs	r3, #2
 8005970:	e02c      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 8005972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005976:	e029      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 8005978:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800597c:	e026      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 800597e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005982:	e023      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 8005984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005988:	e020      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 800598a:	bf00      	nop
 800598c:	40020080 	.word	0x40020080
 8005990:	40020008 	.word	0x40020008
 8005994:	4002001c 	.word	0x4002001c
 8005998:	40020030 	.word	0x40020030
 800599c:	40020044 	.word	0x40020044
 80059a0:	40020058 	.word	0x40020058
 80059a4:	4002006c 	.word	0x4002006c
 80059a8:	40020408 	.word	0x40020408
 80059ac:	4002041c 	.word	0x4002041c
 80059b0:	40020430 	.word	0x40020430
 80059b4:	40020444 	.word	0x40020444
 80059b8:	40020400 	.word	0x40020400
 80059bc:	40020000 	.word	0x40020000
 80059c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059c4:	e002      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 80059c6:	2320      	movs	r3, #32
 80059c8:	e000      	b.n	80059cc <HAL_DMA_IRQHandler+0x308>
 80059ca:	2302      	movs	r3, #2
 80059cc:	4a4e      	ldr	r2, [pc, #312]	; (8005b08 <HAL_DMA_IRQHandler+0x444>)
 80059ce:	6053      	str	r3, [r2, #4]
 80059d0:	e057      	b.n	8005a82 <HAL_DMA_IRQHandler+0x3be>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a4d      	ldr	r2, [pc, #308]	; (8005b0c <HAL_DMA_IRQHandler+0x448>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d04f      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x3b8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a4b      	ldr	r2, [pc, #300]	; (8005b10 <HAL_DMA_IRQHandler+0x44c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d048      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x3b4>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a4a      	ldr	r2, [pc, #296]	; (8005b14 <HAL_DMA_IRQHandler+0x450>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d040      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x3ae>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a48      	ldr	r2, [pc, #288]	; (8005b18 <HAL_DMA_IRQHandler+0x454>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d038      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x3a8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a47      	ldr	r2, [pc, #284]	; (8005b1c <HAL_DMA_IRQHandler+0x458>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d030      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x3a2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a45      	ldr	r2, [pc, #276]	; (8005b20 <HAL_DMA_IRQHandler+0x45c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d028      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x39c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a44      	ldr	r2, [pc, #272]	; (8005b24 <HAL_DMA_IRQHandler+0x460>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d020      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x396>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a42      	ldr	r2, [pc, #264]	; (8005b28 <HAL_DMA_IRQHandler+0x464>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d019      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x392>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a41      	ldr	r2, [pc, #260]	; (8005b2c <HAL_DMA_IRQHandler+0x468>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d012      	beq.n	8005a52 <HAL_DMA_IRQHandler+0x38e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a3f      	ldr	r2, [pc, #252]	; (8005b30 <HAL_DMA_IRQHandler+0x46c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00a      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x388>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a3e      	ldr	r2, [pc, #248]	; (8005b34 <HAL_DMA_IRQHandler+0x470>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d102      	bne.n	8005a46 <HAL_DMA_IRQHandler+0x382>
 8005a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a44:	e01b      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a4a:	e018      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a50:	e015      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a52:	2320      	movs	r3, #32
 8005a54:	e013      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e011      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5e:	e00e      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a64:	e00b      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a6a:	e008      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a70:	e005      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a76:	e002      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a78:	2320      	movs	r3, #32
 8005a7a:	e000      	b.n	8005a7e <HAL_DMA_IRQHandler+0x3ba>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	4a2e      	ldr	r2, [pc, #184]	; (8005b38 <HAL_DMA_IRQHandler+0x474>)
 8005a80:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d034      	beq.n	8005afc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005a9a:	e02f      	b.n	8005afc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d028      	beq.n	8005afe <HAL_DMA_IRQHandler+0x43a>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d023      	beq.n	8005afe <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 020e 	bic.w	r2, r2, #14
 8005ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	2101      	movs	r1, #1
 8005ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	4798      	blx	r3
    }
  }
  return;
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
}
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40020400 	.word	0x40020400
 8005b0c:	40020008 	.word	0x40020008
 8005b10:	4002001c 	.word	0x4002001c
 8005b14:	40020030 	.word	0x40020030
 8005b18:	40020044 	.word	0x40020044
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	4002006c 	.word	0x4002006c
 8005b24:	40020080 	.word	0x40020080
 8005b28:	40020408 	.word	0x40020408
 8005b2c:	4002041c 	.word	0x4002041c
 8005b30:	40020430 	.word	0x40020430
 8005b34:	40020444 	.word	0x40020444
 8005b38:	40020000 	.word	0x40020000

08005b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b08b      	sub	sp, #44	; 0x2c
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b4e:	e179      	b.n	8005e44 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005b50:	2201      	movs	r2, #1
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	4013      	ands	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	f040 8168 	bne.w	8005e3e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4aa0      	ldr	r2, [pc, #640]	; (8005df4 <HAL_GPIO_Init+0x2b8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d05e      	beq.n	8005c36 <HAL_GPIO_Init+0xfa>
 8005b78:	4a9e      	ldr	r2, [pc, #632]	; (8005df4 <HAL_GPIO_Init+0x2b8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d875      	bhi.n	8005c6a <HAL_GPIO_Init+0x12e>
 8005b7e:	4a9e      	ldr	r2, [pc, #632]	; (8005df8 <HAL_GPIO_Init+0x2bc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d058      	beq.n	8005c36 <HAL_GPIO_Init+0xfa>
 8005b84:	4a9c      	ldr	r2, [pc, #624]	; (8005df8 <HAL_GPIO_Init+0x2bc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d86f      	bhi.n	8005c6a <HAL_GPIO_Init+0x12e>
 8005b8a:	4a9c      	ldr	r2, [pc, #624]	; (8005dfc <HAL_GPIO_Init+0x2c0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d052      	beq.n	8005c36 <HAL_GPIO_Init+0xfa>
 8005b90:	4a9a      	ldr	r2, [pc, #616]	; (8005dfc <HAL_GPIO_Init+0x2c0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d869      	bhi.n	8005c6a <HAL_GPIO_Init+0x12e>
 8005b96:	4a9a      	ldr	r2, [pc, #616]	; (8005e00 <HAL_GPIO_Init+0x2c4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d04c      	beq.n	8005c36 <HAL_GPIO_Init+0xfa>
 8005b9c:	4a98      	ldr	r2, [pc, #608]	; (8005e00 <HAL_GPIO_Init+0x2c4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d863      	bhi.n	8005c6a <HAL_GPIO_Init+0x12e>
 8005ba2:	4a98      	ldr	r2, [pc, #608]	; (8005e04 <HAL_GPIO_Init+0x2c8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d046      	beq.n	8005c36 <HAL_GPIO_Init+0xfa>
 8005ba8:	4a96      	ldr	r2, [pc, #600]	; (8005e04 <HAL_GPIO_Init+0x2c8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d85d      	bhi.n	8005c6a <HAL_GPIO_Init+0x12e>
 8005bae:	2b12      	cmp	r3, #18
 8005bb0:	d82a      	bhi.n	8005c08 <HAL_GPIO_Init+0xcc>
 8005bb2:	2b12      	cmp	r3, #18
 8005bb4:	d859      	bhi.n	8005c6a <HAL_GPIO_Init+0x12e>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <HAL_GPIO_Init+0x80>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005c37 	.word	0x08005c37
 8005bc0:	08005c11 	.word	0x08005c11
 8005bc4:	08005c23 	.word	0x08005c23
 8005bc8:	08005c65 	.word	0x08005c65
 8005bcc:	08005c6b 	.word	0x08005c6b
 8005bd0:	08005c6b 	.word	0x08005c6b
 8005bd4:	08005c6b 	.word	0x08005c6b
 8005bd8:	08005c6b 	.word	0x08005c6b
 8005bdc:	08005c6b 	.word	0x08005c6b
 8005be0:	08005c6b 	.word	0x08005c6b
 8005be4:	08005c6b 	.word	0x08005c6b
 8005be8:	08005c6b 	.word	0x08005c6b
 8005bec:	08005c6b 	.word	0x08005c6b
 8005bf0:	08005c6b 	.word	0x08005c6b
 8005bf4:	08005c6b 	.word	0x08005c6b
 8005bf8:	08005c6b 	.word	0x08005c6b
 8005bfc:	08005c6b 	.word	0x08005c6b
 8005c00:	08005c19 	.word	0x08005c19
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	4a7f      	ldr	r2, [pc, #508]	; (8005e08 <HAL_GPIO_Init+0x2cc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005c0e:	e02c      	b.n	8005c6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	623b      	str	r3, [r7, #32]
          break;
 8005c16:	e029      	b.n	8005c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	623b      	str	r3, [r7, #32]
          break;
 8005c20:	e024      	b.n	8005c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	3308      	adds	r3, #8
 8005c28:	623b      	str	r3, [r7, #32]
          break;
 8005c2a:	e01f      	b.n	8005c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	330c      	adds	r3, #12
 8005c32:	623b      	str	r3, [r7, #32]
          break;
 8005c34:	e01a      	b.n	8005c6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005c3e:	2304      	movs	r3, #4
 8005c40:	623b      	str	r3, [r7, #32]
          break;
 8005c42:	e013      	b.n	8005c6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d105      	bne.n	8005c58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	611a      	str	r2, [r3, #16]
          break;
 8005c56:	e009      	b.n	8005c6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c58:	2308      	movs	r3, #8
 8005c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	615a      	str	r2, [r3, #20]
          break;
 8005c62:	e003      	b.n	8005c6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005c64:	2300      	movs	r3, #0
 8005c66:	623b      	str	r3, [r7, #32]
          break;
 8005c68:	e000      	b.n	8005c6c <HAL_GPIO_Init+0x130>
          break;
 8005c6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	2bff      	cmp	r3, #255	; 0xff
 8005c70:	d801      	bhi.n	8005c76 <HAL_GPIO_Init+0x13a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	e001      	b.n	8005c7a <HAL_GPIO_Init+0x13e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2bff      	cmp	r3, #255	; 0xff
 8005c80:	d802      	bhi.n	8005c88 <HAL_GPIO_Init+0x14c>
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	e002      	b.n	8005c8e <HAL_GPIO_Init+0x152>
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	3b08      	subs	r3, #8
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	210f      	movs	r1, #15
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	6a39      	ldr	r1, [r7, #32]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 80c1 	beq.w	8005e3e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005cbc:	4b53      	ldr	r3, [pc, #332]	; (8005e0c <HAL_GPIO_Init+0x2d0>)
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	4a52      	ldr	r2, [pc, #328]	; (8005e0c <HAL_GPIO_Init+0x2d0>)
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	6193      	str	r3, [r2, #24]
 8005cc8:	4b50      	ldr	r3, [pc, #320]	; (8005e0c <HAL_GPIO_Init+0x2d0>)
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	60bb      	str	r3, [r7, #8]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005cd4:	4a4e      	ldr	r2, [pc, #312]	; (8005e10 <HAL_GPIO_Init+0x2d4>)
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	089b      	lsrs	r3, r3, #2
 8005cda:	3302      	adds	r3, #2
 8005cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	220f      	movs	r2, #15
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a46      	ldr	r2, [pc, #280]	; (8005e14 <HAL_GPIO_Init+0x2d8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d01f      	beq.n	8005d40 <HAL_GPIO_Init+0x204>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a45      	ldr	r2, [pc, #276]	; (8005e18 <HAL_GPIO_Init+0x2dc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d019      	beq.n	8005d3c <HAL_GPIO_Init+0x200>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a44      	ldr	r2, [pc, #272]	; (8005e1c <HAL_GPIO_Init+0x2e0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <HAL_GPIO_Init+0x1fc>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a43      	ldr	r2, [pc, #268]	; (8005e20 <HAL_GPIO_Init+0x2e4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00d      	beq.n	8005d34 <HAL_GPIO_Init+0x1f8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a42      	ldr	r2, [pc, #264]	; (8005e24 <HAL_GPIO_Init+0x2e8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d007      	beq.n	8005d30 <HAL_GPIO_Init+0x1f4>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a41      	ldr	r2, [pc, #260]	; (8005e28 <HAL_GPIO_Init+0x2ec>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d101      	bne.n	8005d2c <HAL_GPIO_Init+0x1f0>
 8005d28:	2305      	movs	r3, #5
 8005d2a:	e00a      	b.n	8005d42 <HAL_GPIO_Init+0x206>
 8005d2c:	2306      	movs	r3, #6
 8005d2e:	e008      	b.n	8005d42 <HAL_GPIO_Init+0x206>
 8005d30:	2304      	movs	r3, #4
 8005d32:	e006      	b.n	8005d42 <HAL_GPIO_Init+0x206>
 8005d34:	2303      	movs	r3, #3
 8005d36:	e004      	b.n	8005d42 <HAL_GPIO_Init+0x206>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e002      	b.n	8005d42 <HAL_GPIO_Init+0x206>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <HAL_GPIO_Init+0x206>
 8005d40:	2300      	movs	r3, #0
 8005d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d44:	f002 0203 	and.w	r2, r2, #3
 8005d48:	0092      	lsls	r2, r2, #2
 8005d4a:	4093      	lsls	r3, r2
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005d52:	492f      	ldr	r1, [pc, #188]	; (8005e10 <HAL_GPIO_Init+0x2d4>)
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	089b      	lsrs	r3, r3, #2
 8005d58:	3302      	adds	r3, #2
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d006      	beq.n	8005d7a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005d6c:	4b2f      	ldr	r3, [pc, #188]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	492e      	ldr	r1, [pc, #184]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	600b      	str	r3, [r1, #0]
 8005d78:	e006      	b.n	8005d88 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	492a      	ldr	r1, [pc, #168]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d006      	beq.n	8005da2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	4924      	ldr	r1, [pc, #144]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	604b      	str	r3, [r1, #4]
 8005da0:	e006      	b.n	8005db0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005da2:	4b22      	ldr	r3, [pc, #136]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	4920      	ldr	r1, [pc, #128]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d006      	beq.n	8005dca <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005dbc:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	491a      	ldr	r1, [pc, #104]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]
 8005dc8:	e006      	b.n	8005dd8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005dca:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	4916      	ldr	r1, [pc, #88]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d025      	beq.n	8005e30 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005de4:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	4910      	ldr	r1, [pc, #64]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60cb      	str	r3, [r1, #12]
 8005df0:	e025      	b.n	8005e3e <HAL_GPIO_Init+0x302>
 8005df2:	bf00      	nop
 8005df4:	10320000 	.word	0x10320000
 8005df8:	10310000 	.word	0x10310000
 8005dfc:	10220000 	.word	0x10220000
 8005e00:	10210000 	.word	0x10210000
 8005e04:	10120000 	.word	0x10120000
 8005e08:	10110000 	.word	0x10110000
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40010800 	.word	0x40010800
 8005e18:	40010c00 	.word	0x40010c00
 8005e1c:	40011000 	.word	0x40011000
 8005e20:	40011400 	.word	0x40011400
 8005e24:	40011800 	.word	0x40011800
 8005e28:	40011c00 	.word	0x40011c00
 8005e2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <HAL_GPIO_Init+0x324>)
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	43db      	mvns	r3, r3
 8005e38:	4909      	ldr	r1, [pc, #36]	; (8005e60 <HAL_GPIO_Init+0x324>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	3301      	adds	r3, #1
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f47f ae7e 	bne.w	8005b50 <HAL_GPIO_Init+0x14>
  }
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	372c      	adds	r7, #44	; 0x2c
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr
 8005e60:	40010400 	.word	0x40010400

08005e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	887b      	ldrh	r3, [r7, #2]
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	73fb      	strb	r3, [r7, #15]
 8005e80:	e001      	b.n	8005e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	807b      	strh	r3, [r7, #2]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ea2:	787b      	ldrb	r3, [r7, #1]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ea8:	887a      	ldrh	r2, [r7, #2]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005eae:	e003      	b.n	8005eb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	041a      	lsls	r2, r3, #16
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	611a      	str	r2, [r3, #16]
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
	...

08005ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ece:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d006      	beq.n	8005ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eda:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 f806 	bl	8005ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e12b      	b.n	8006172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb feaa 	bl	8001c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2224      	movs	r2, #36	; 0x24
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f6c:	f000 fce4 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 8005f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4a81      	ldr	r2, [pc, #516]	; (800617c <HAL_I2C_Init+0x274>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d807      	bhi.n	8005f8c <HAL_I2C_Init+0x84>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a80      	ldr	r2, [pc, #512]	; (8006180 <HAL_I2C_Init+0x278>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	bf94      	ite	ls
 8005f84:	2301      	movls	r3, #1
 8005f86:	2300      	movhi	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	e006      	b.n	8005f9a <HAL_I2C_Init+0x92>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a7d      	ldr	r2, [pc, #500]	; (8006184 <HAL_I2C_Init+0x27c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	bf94      	ite	ls
 8005f94:	2301      	movls	r3, #1
 8005f96:	2300      	movhi	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e0e7      	b.n	8006172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a78      	ldr	r2, [pc, #480]	; (8006188 <HAL_I2C_Init+0x280>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	0c9b      	lsrs	r3, r3, #18
 8005fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a6a      	ldr	r2, [pc, #424]	; (800617c <HAL_I2C_Init+0x274>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d802      	bhi.n	8005fdc <HAL_I2C_Init+0xd4>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	e009      	b.n	8005ff0 <HAL_I2C_Init+0xe8>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	4a69      	ldr	r2, [pc, #420]	; (800618c <HAL_I2C_Init+0x284>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	099b      	lsrs	r3, r3, #6
 8005fee:	3301      	adds	r3, #1
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	495c      	ldr	r1, [pc, #368]	; (800617c <HAL_I2C_Init+0x274>)
 800600c:	428b      	cmp	r3, r1
 800600e:	d819      	bhi.n	8006044 <HAL_I2C_Init+0x13c>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1e59      	subs	r1, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	fbb1 f3f3 	udiv	r3, r1, r3
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006024:	400b      	ands	r3, r1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <HAL_I2C_Init+0x138>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1e59      	subs	r1, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	fbb1 f3f3 	udiv	r3, r1, r3
 8006038:	3301      	adds	r3, #1
 800603a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603e:	e051      	b.n	80060e4 <HAL_I2C_Init+0x1dc>
 8006040:	2304      	movs	r3, #4
 8006042:	e04f      	b.n	80060e4 <HAL_I2C_Init+0x1dc>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d111      	bne.n	8006070 <HAL_I2C_Init+0x168>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1e58      	subs	r0, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	440b      	add	r3, r1
 800605a:	fbb0 f3f3 	udiv	r3, r0, r3
 800605e:	3301      	adds	r3, #1
 8006060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e012      	b.n	8006096 <HAL_I2C_Init+0x18e>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	1e58      	subs	r0, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	0099      	lsls	r1, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	fbb0 f3f3 	udiv	r3, r0, r3
 8006086:	3301      	adds	r3, #1
 8006088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608c:	2b00      	cmp	r3, #0
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_I2C_Init+0x196>
 800609a:	2301      	movs	r3, #1
 800609c:	e022      	b.n	80060e4 <HAL_I2C_Init+0x1dc>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10e      	bne.n	80060c4 <HAL_I2C_Init+0x1bc>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1e58      	subs	r0, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6859      	ldr	r1, [r3, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	440b      	add	r3, r1
 80060b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80060b8:	3301      	adds	r3, #1
 80060ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c2:	e00f      	b.n	80060e4 <HAL_I2C_Init+0x1dc>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1e58      	subs	r0, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	0099      	lsls	r1, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060da:	3301      	adds	r3, #1
 80060dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	6809      	ldr	r1, [r1, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6911      	ldr	r1, [r2, #16]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68d2      	ldr	r2, [r2, #12]
 800611e:	4311      	orrs	r1, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	430b      	orrs	r3, r1
 8006126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	000186a0 	.word	0x000186a0
 8006180:	001e847f 	.word	0x001e847f
 8006184:	003d08ff 	.word	0x003d08ff
 8006188:	431bde83 	.word	0x431bde83
 800618c:	10624dd3 	.word	0x10624dd3

08006190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e26c      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8087 	beq.w	80062be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061b0:	4b92      	ldr	r3, [pc, #584]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 030c 	and.w	r3, r3, #12
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d00c      	beq.n	80061d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061bc:	4b8f      	ldr	r3, [pc, #572]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f003 030c 	and.w	r3, r3, #12
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d112      	bne.n	80061ee <HAL_RCC_OscConfig+0x5e>
 80061c8:	4b8c      	ldr	r3, [pc, #560]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d4:	d10b      	bne.n	80061ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d6:	4b89      	ldr	r3, [pc, #548]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d06c      	beq.n	80062bc <HAL_RCC_OscConfig+0x12c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d168      	bne.n	80062bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e246      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f6:	d106      	bne.n	8006206 <HAL_RCC_OscConfig+0x76>
 80061f8:	4b80      	ldr	r3, [pc, #512]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a7f      	ldr	r2, [pc, #508]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80061fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e02e      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <HAL_RCC_OscConfig+0x98>
 800620e:	4b7b      	ldr	r3, [pc, #492]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a7a      	ldr	r2, [pc, #488]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b78      	ldr	r3, [pc, #480]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a77      	ldr	r2, [pc, #476]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e01d      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0xbc>
 8006232:	4b72      	ldr	r3, [pc, #456]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a71      	ldr	r2, [pc, #452]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b6f      	ldr	r3, [pc, #444]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a6e      	ldr	r2, [pc, #440]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e00b      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 800624c:	4b6b      	ldr	r3, [pc, #428]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a6a      	ldr	r2, [pc, #424]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4b68      	ldr	r3, [pc, #416]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a67      	ldr	r2, [pc, #412]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 800625e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d013      	beq.n	8006294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626c:	f7fe fd54 	bl	8004d18 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006274:	f7fe fd50 	bl	8004d18 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b64      	cmp	r3, #100	; 0x64
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e1fa      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006286:	4b5d      	ldr	r3, [pc, #372]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0f0      	beq.n	8006274 <HAL_RCC_OscConfig+0xe4>
 8006292:	e014      	b.n	80062be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fe fd40 	bl	8004d18 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800629c:	f7fe fd3c 	bl	8004d18 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	; 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e1e6      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ae:	4b53      	ldr	r3, [pc, #332]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x10c>
 80062ba:	e000      	b.n	80062be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d063      	beq.n	8006392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062ca:	4b4c      	ldr	r3, [pc, #304]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062d6:	4b49      	ldr	r3, [pc, #292]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b08      	cmp	r3, #8
 80062e0:	d11c      	bne.n	800631c <HAL_RCC_OscConfig+0x18c>
 80062e2:	4b46      	ldr	r3, [pc, #280]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d116      	bne.n	800631c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ee:	4b43      	ldr	r3, [pc, #268]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_RCC_OscConfig+0x176>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d001      	beq.n	8006306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e1ba      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006306:	4b3d      	ldr	r3, [pc, #244]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4939      	ldr	r1, [pc, #228]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006316:	4313      	orrs	r3, r2
 8006318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800631a:	e03a      	b.n	8006392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d020      	beq.n	8006366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006324:	4b36      	ldr	r3, [pc, #216]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632a:	f7fe fcf5 	bl	8004d18 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006332:	f7fe fcf1 	bl	8004d18 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e19b      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006344:	4b2d      	ldr	r3, [pc, #180]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006350:	4b2a      	ldr	r3, [pc, #168]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4927      	ldr	r1, [pc, #156]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006360:	4313      	orrs	r3, r2
 8006362:	600b      	str	r3, [r1, #0]
 8006364:	e015      	b.n	8006392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006366:	4b26      	ldr	r3, [pc, #152]	; (8006400 <HAL_RCC_OscConfig+0x270>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636c:	f7fe fcd4 	bl	8004d18 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006374:	f7fe fcd0 	bl	8004d18 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e17a      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006386:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d03a      	beq.n	8006414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d019      	beq.n	80063da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a6:	4b17      	ldr	r3, [pc, #92]	; (8006404 <HAL_RCC_OscConfig+0x274>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ac:	f7fe fcb4 	bl	8004d18 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b4:	f7fe fcb0 	bl	8004d18 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e15a      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <HAL_RCC_OscConfig+0x26c>)
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063d2:	2001      	movs	r0, #1
 80063d4:	f000 fad8 	bl	8006988 <RCC_Delay>
 80063d8:	e01c      	b.n	8006414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063da:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <HAL_RCC_OscConfig+0x274>)
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e0:	f7fe fc9a 	bl	8004d18 <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e6:	e00f      	b.n	8006408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063e8:	f7fe fc96 	bl	8004d18 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d908      	bls.n	8006408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e140      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
 80063fa:	bf00      	nop
 80063fc:	40021000 	.word	0x40021000
 8006400:	42420000 	.word	0x42420000
 8006404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006408:	4b9e      	ldr	r3, [pc, #632]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e9      	bne.n	80063e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80a6 	beq.w	800656e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006426:	4b97      	ldr	r3, [pc, #604]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	4b94      	ldr	r3, [pc, #592]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	4a93      	ldr	r2, [pc, #588]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643c:	61d3      	str	r3, [r2, #28]
 800643e:	4b91      	ldr	r3, [pc, #580]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006446:	60bb      	str	r3, [r7, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800644e:	4b8e      	ldr	r3, [pc, #568]	; (8006688 <HAL_RCC_OscConfig+0x4f8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d118      	bne.n	800648c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800645a:	4b8b      	ldr	r3, [pc, #556]	; (8006688 <HAL_RCC_OscConfig+0x4f8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a8a      	ldr	r2, [pc, #552]	; (8006688 <HAL_RCC_OscConfig+0x4f8>)
 8006460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006466:	f7fe fc57 	bl	8004d18 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646c:	e008      	b.n	8006480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800646e:	f7fe fc53 	bl	8004d18 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b64      	cmp	r3, #100	; 0x64
 800647a:	d901      	bls.n	8006480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e0fd      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006480:	4b81      	ldr	r3, [pc, #516]	; (8006688 <HAL_RCC_OscConfig+0x4f8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0f0      	beq.n	800646e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d106      	bne.n	80064a2 <HAL_RCC_OscConfig+0x312>
 8006494:	4b7b      	ldr	r3, [pc, #492]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	4a7a      	ldr	r2, [pc, #488]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	6213      	str	r3, [r2, #32]
 80064a0:	e02d      	b.n	80064fe <HAL_RCC_OscConfig+0x36e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10c      	bne.n	80064c4 <HAL_RCC_OscConfig+0x334>
 80064aa:	4b76      	ldr	r3, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	4a75      	ldr	r2, [pc, #468]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	6213      	str	r3, [r2, #32]
 80064b6:	4b73      	ldr	r3, [pc, #460]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	4a72      	ldr	r2, [pc, #456]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064bc:	f023 0304 	bic.w	r3, r3, #4
 80064c0:	6213      	str	r3, [r2, #32]
 80064c2:	e01c      	b.n	80064fe <HAL_RCC_OscConfig+0x36e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d10c      	bne.n	80064e6 <HAL_RCC_OscConfig+0x356>
 80064cc:	4b6d      	ldr	r3, [pc, #436]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	4a6c      	ldr	r2, [pc, #432]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064d2:	f043 0304 	orr.w	r3, r3, #4
 80064d6:	6213      	str	r3, [r2, #32]
 80064d8:	4b6a      	ldr	r3, [pc, #424]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	4a69      	ldr	r2, [pc, #420]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	6213      	str	r3, [r2, #32]
 80064e4:	e00b      	b.n	80064fe <HAL_RCC_OscConfig+0x36e>
 80064e6:	4b67      	ldr	r3, [pc, #412]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	4a66      	ldr	r2, [pc, #408]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	6213      	str	r3, [r2, #32]
 80064f2:	4b64      	ldr	r3, [pc, #400]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	4a63      	ldr	r2, [pc, #396]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80064f8:	f023 0304 	bic.w	r3, r3, #4
 80064fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d015      	beq.n	8006532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006506:	f7fe fc07 	bl	8004d18 <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650c:	e00a      	b.n	8006524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650e:	f7fe fc03 	bl	8004d18 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f241 3288 	movw	r2, #5000	; 0x1388
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e0ab      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006524:	4b57      	ldr	r3, [pc, #348]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0ee      	beq.n	800650e <HAL_RCC_OscConfig+0x37e>
 8006530:	e014      	b.n	800655c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006532:	f7fe fbf1 	bl	8004d18 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006538:	e00a      	b.n	8006550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653a:	f7fe fbed 	bl	8004d18 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	f241 3288 	movw	r2, #5000	; 0x1388
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e095      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006550:	4b4c      	ldr	r3, [pc, #304]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1ee      	bne.n	800653a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d105      	bne.n	800656e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006562:	4b48      	ldr	r3, [pc, #288]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	4a47      	ldr	r2, [pc, #284]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800656c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8081 	beq.w	800667a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006578:	4b42      	ldr	r3, [pc, #264]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	2b08      	cmp	r3, #8
 8006582:	d061      	beq.n	8006648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d146      	bne.n	800661a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658c:	4b3f      	ldr	r3, [pc, #252]	; (800668c <HAL_RCC_OscConfig+0x4fc>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006592:	f7fe fbc1 	bl	8004d18 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800659a:	f7fe fbbd 	bl	8004d18 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e067      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ac:	4b35      	ldr	r3, [pc, #212]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f0      	bne.n	800659a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c0:	d108      	bne.n	80065d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065c2:	4b30      	ldr	r3, [pc, #192]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	492d      	ldr	r1, [pc, #180]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065d4:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a19      	ldr	r1, [r3, #32]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	430b      	orrs	r3, r1
 80065e6:	4927      	ldr	r1, [pc, #156]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ec:	4b27      	ldr	r3, [pc, #156]	; (800668c <HAL_RCC_OscConfig+0x4fc>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f2:	f7fe fb91 	bl	8004d18 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065fa:	f7fe fb8d 	bl	8004d18 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e037      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800660c:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <HAL_RCC_OscConfig+0x46a>
 8006618:	e02f      	b.n	800667a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661a:	4b1c      	ldr	r3, [pc, #112]	; (800668c <HAL_RCC_OscConfig+0x4fc>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006620:	f7fe fb7a 	bl	8004d18 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006628:	f7fe fb76 	bl	8004d18 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e020      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800663a:	4b12      	ldr	r3, [pc, #72]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x498>
 8006646:	e018      	b.n	800667a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e013      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <HAL_RCC_OscConfig+0x4f4>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	429a      	cmp	r2, r3
 8006666:	d106      	bne.n	8006676 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006672:	429a      	cmp	r2, r3
 8006674:	d001      	beq.n	800667a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40021000 	.word	0x40021000
 8006688:	40007000 	.word	0x40007000
 800668c:	42420060 	.word	0x42420060

08006690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0d0      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066a4:	4b6a      	ldr	r3, [pc, #424]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d910      	bls.n	80066d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b2:	4b67      	ldr	r3, [pc, #412]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 0207 	bic.w	r2, r3, #7
 80066ba:	4965      	ldr	r1, [pc, #404]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	4313      	orrs	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b63      	ldr	r3, [pc, #396]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0b8      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d020      	beq.n	8006722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066ec:	4b59      	ldr	r3, [pc, #356]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4a58      	ldr	r2, [pc, #352]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006704:	4b53      	ldr	r3, [pc, #332]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4a52      	ldr	r2, [pc, #328]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800670a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800670e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006710:	4b50      	ldr	r3, [pc, #320]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	494d      	ldr	r1, [pc, #308]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d040      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d107      	bne.n	8006746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006736:	4b47      	ldr	r3, [pc, #284]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d115      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e07f      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d107      	bne.n	800675e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674e:	4b41      	ldr	r3, [pc, #260]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e073      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675e:	4b3d      	ldr	r3, [pc, #244]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e06b      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800676e:	4b39      	ldr	r3, [pc, #228]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f023 0203 	bic.w	r2, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	4936      	ldr	r1, [pc, #216]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800677c:	4313      	orrs	r3, r2
 800677e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006780:	f7fe faca 	bl	8004d18 <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006786:	e00a      	b.n	800679e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006788:	f7fe fac6 	bl	8004d18 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f241 3288 	movw	r2, #5000	; 0x1388
 8006796:	4293      	cmp	r3, r2
 8006798:	d901      	bls.n	800679e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e053      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679e:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f003 020c 	and.w	r2, r3, #12
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d1eb      	bne.n	8006788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067b0:	4b27      	ldr	r3, [pc, #156]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d210      	bcs.n	80067e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067be:	4b24      	ldr	r3, [pc, #144]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f023 0207 	bic.w	r2, r3, #7
 80067c6:	4922      	ldr	r1, [pc, #136]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ce:	4b20      	ldr	r3, [pc, #128]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d001      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e032      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067ec:	4b19      	ldr	r3, [pc, #100]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4916      	ldr	r1, [pc, #88]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800680a:	4b12      	ldr	r3, [pc, #72]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	490e      	ldr	r1, [pc, #56]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800681a:	4313      	orrs	r3, r2
 800681c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800681e:	f000 f821 	bl	8006864 <HAL_RCC_GetSysClockFreq>
 8006822:	4602      	mov	r2, r0
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	490a      	ldr	r1, [pc, #40]	; (8006858 <HAL_RCC_ClockConfig+0x1c8>)
 8006830:	5ccb      	ldrb	r3, [r1, r3]
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	4a09      	ldr	r2, [pc, #36]	; (800685c <HAL_RCC_ClockConfig+0x1cc>)
 8006838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800683a:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RCC_ClockConfig+0x1d0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fa28 	bl	8004c94 <HAL_InitTick>

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40022000 	.word	0x40022000
 8006854:	40021000 	.word	0x40021000
 8006858:	0800f9a8 	.word	0x0800f9a8
 800685c:	20000008 	.word	0x20000008
 8006860:	20000010 	.word	0x20000010

08006864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006864:	b490      	push	{r4, r7}
 8006866:	b08a      	sub	sp, #40	; 0x28
 8006868:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800686a:	4b2a      	ldr	r3, [pc, #168]	; (8006914 <HAL_RCC_GetSysClockFreq+0xb0>)
 800686c:	1d3c      	adds	r4, r7, #4
 800686e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006874:	f240 2301 	movw	r3, #513	; 0x201
 8006878:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800688e:	4b22      	ldr	r3, [pc, #136]	; (8006918 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f003 030c 	and.w	r3, r3, #12
 800689a:	2b04      	cmp	r3, #4
 800689c:	d002      	beq.n	80068a4 <HAL_RCC_GetSysClockFreq+0x40>
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d003      	beq.n	80068aa <HAL_RCC_GetSysClockFreq+0x46>
 80068a2:	e02d      	b.n	8006900 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068a4:	4b1d      	ldr	r3, [pc, #116]	; (800691c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068a6:	623b      	str	r3, [r7, #32]
      break;
 80068a8:	e02d      	b.n	8006906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	0c9b      	lsrs	r3, r3, #18
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80068b6:	4413      	add	r3, r2
 80068b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d013      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068c8:	4b13      	ldr	r3, [pc, #76]	; (8006918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	0c5b      	lsrs	r3, r3, #17
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80068d6:	4413      	add	r3, r2
 80068d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4a0e      	ldr	r2, [pc, #56]	; (800691c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068e2:	fb02 f203 	mul.w	r2, r2, r3
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
 80068ee:	e004      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4a0b      	ldr	r2, [pc, #44]	; (8006920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068f4:	fb02 f303 	mul.w	r3, r2, r3
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	623b      	str	r3, [r7, #32]
      break;
 80068fe:	e002      	b.n	8006906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006900:	4b06      	ldr	r3, [pc, #24]	; (800691c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006902:	623b      	str	r3, [r7, #32]
      break;
 8006904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006906:	6a3b      	ldr	r3, [r7, #32]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	; 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bc90      	pop	{r4, r7}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	0800f954 	.word	0x0800f954
 8006918:	40021000 	.word	0x40021000
 800691c:	007a1200 	.word	0x007a1200
 8006920:	003d0900 	.word	0x003d0900

08006924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006928:	4b02      	ldr	r3, [pc, #8]	; (8006934 <HAL_RCC_GetHCLKFreq+0x10>)
 800692a:	681b      	ldr	r3, [r3, #0]
}
 800692c:	4618      	mov	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr
 8006934:	20000008 	.word	0x20000008

08006938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800693c:	f7ff fff2 	bl	8006924 <HAL_RCC_GetHCLKFreq>
 8006940:	4602      	mov	r2, r0
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	4903      	ldr	r1, [pc, #12]	; (800695c <HAL_RCC_GetPCLK1Freq+0x24>)
 800694e:	5ccb      	ldrb	r3, [r1, r3]
 8006950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006954:	4618      	mov	r0, r3
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40021000 	.word	0x40021000
 800695c:	0800f9b8 	.word	0x0800f9b8

08006960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006964:	f7ff ffde 	bl	8006924 <HAL_RCC_GetHCLKFreq>
 8006968:	4602      	mov	r2, r0
 800696a:	4b05      	ldr	r3, [pc, #20]	; (8006980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	0adb      	lsrs	r3, r3, #11
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	4903      	ldr	r1, [pc, #12]	; (8006984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006976:	5ccb      	ldrb	r3, [r1, r3]
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800697c:	4618      	mov	r0, r3
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40021000 	.word	0x40021000
 8006984:	0800f9b8 	.word	0x0800f9b8

08006988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006990:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <RCC_Delay+0x34>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a0a      	ldr	r2, [pc, #40]	; (80069c0 <RCC_Delay+0x38>)
 8006996:	fba2 2303 	umull	r2, r3, r2, r3
 800699a:	0a5b      	lsrs	r3, r3, #9
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	fb02 f303 	mul.w	r3, r2, r3
 80069a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069a4:	bf00      	nop
  }
  while (Delay --);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1e5a      	subs	r2, r3, #1
 80069aa:	60fa      	str	r2, [r7, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1f9      	bne.n	80069a4 <RCC_Delay+0x1c>
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr
 80069bc:	20000008 	.word	0x20000008
 80069c0:	10624dd3 	.word	0x10624dd3

080069c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d07d      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80069e0:	2300      	movs	r3, #0
 80069e2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069e4:	4b4f      	ldr	r3, [pc, #316]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10d      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f0:	4b4c      	ldr	r3, [pc, #304]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	4a4b      	ldr	r2, [pc, #300]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fa:	61d3      	str	r3, [r2, #28]
 80069fc:	4b49      	ldr	r3, [pc, #292]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a0c:	4b46      	ldr	r3, [pc, #280]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d118      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a18:	4b43      	ldr	r3, [pc, #268]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a42      	ldr	r2, [pc, #264]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a24:	f7fe f978 	bl	8004d18 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2a:	e008      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a2c:	f7fe f974 	bl	8004d18 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b64      	cmp	r3, #100	; 0x64
 8006a38:	d901      	bls.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e06d      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3e:	4b3a      	ldr	r3, [pc, #232]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a4a:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d02e      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d027      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a68:	4b2e      	ldr	r3, [pc, #184]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a72:	4b2e      	ldr	r3, [pc, #184]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a74:	2201      	movs	r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a78:	4b2c      	ldr	r3, [pc, #176]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a7e:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d014      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8e:	f7fe f943 	bl	8004d18 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a94:	e00a      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a96:	f7fe f93f 	bl	8004d18 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e036      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aac:	4b1d      	ldr	r3, [pc, #116]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0ee      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ab8:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4917      	ldr	r1, [pc, #92]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d105      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad0:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ada:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d008      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ae8:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	490b      	ldr	r1, [pc, #44]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	4904      	ldr	r1, [pc, #16]	; (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40021000 	.word	0x40021000
 8006b28:	40007000 	.word	0x40007000
 8006b2c:	42420440 	.word	0x42420440

08006b30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e022      	b.n	8006b88 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d105      	bne.n	8006b5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fb f8d5 	bl	8001d04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f814 	bl	8006b90 <HAL_SD_InitCard>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e00a      	b.n	8006b88 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b90:	b5b0      	push	{r4, r5, r7, lr}
 8006b92:	b08e      	sub	sp, #56	; 0x38
 8006b94:	af04      	add	r7, sp, #16
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006bac:	2376      	movs	r3, #118	; 0x76
 8006bae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681d      	ldr	r5, [r3, #0]
 8006bb4:	466c      	mov	r4, sp
 8006bb6:	f107 0314 	add.w	r3, r7, #20
 8006bba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f003 fb53 	bl	800a274 <SDIO_Init>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e031      	b.n	8006c44 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006be0:	4b1a      	ldr	r3, [pc, #104]	; (8006c4c <HAL_SD_InitCard+0xbc>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f003 fb88 	bl	800a300 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006bf0:	4b16      	ldr	r3, [pc, #88]	; (8006c4c <HAL_SD_InitCard+0xbc>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 f8fc 	bl	8007df4 <SD_PowerON>
 8006bfc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e013      	b.n	8006c44 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f81d 	bl	8007c5c <SD_InitCard>
 8006c22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00b      	beq.n	8006c42 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3728      	adds	r7, #40	; 0x28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c4c:	423000a0 	.word	0x423000a0

08006c50 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b092      	sub	sp, #72	; 0x48
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c5e:	f7fe f85b 	bl	8004d18 <HAL_GetTick>
 8006c62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d107      	bne.n	8006c82 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e1d9      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	f040 81cc 	bne.w	8007028 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	441a      	add	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d907      	bls.n	8006cb4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e1c0      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d002      	beq.n	8006cd2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	025b      	lsls	r3, r3, #9
 8006cd0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f003 fb9e 	bl	800a41c <SDMMC_CmdBlockLength>
 8006ce0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00f      	beq.n	8006d08 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a9b      	ldr	r2, [pc, #620]	; (8006f5c <HAL_SD_ReadBlocks+0x30c>)
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e196      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d08:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	025b      	lsls	r3, r3, #9
 8006d12:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006d14:	2390      	movs	r3, #144	; 0x90
 8006d16:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f107 0214 	add.w	r2, r7, #20
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f003 fb49 	bl	800a3c6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d90a      	bls.n	8006d50 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d46:	4618      	mov	r0, r3
 8006d48:	f003 fbac 	bl	800a4a4 <SDMMC_CmdReadMultiBlock>
 8006d4c:	6478      	str	r0, [r7, #68]	; 0x44
 8006d4e:	e009      	b.n	8006d64 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2201      	movs	r2, #1
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f003 fb7f 	bl	800a460 <SDMMC_CmdReadSingleBlock>
 8006d62:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d012      	beq.n	8006d90 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a7b      	ldr	r2, [pc, #492]	; (8006f5c <HAL_SD_ReadBlocks+0x30c>)
 8006d70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e152      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006d94:	e061      	b.n	8006e5a <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d03c      	beq.n	8006e1e <HAL_SD_ReadBlocks+0x1ce>
 8006da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d039      	beq.n	8006e1e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	643b      	str	r3, [r7, #64]	; 0x40
 8006dae:	e033      	b.n	8006e18 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f003 fa87 	bl	800a2c8 <SDIO_ReadFIFO>
 8006dba:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ddc:	3301      	adds	r3, #1
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de2:	3b01      	subs	r3, #1
 8006de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	3301      	adds	r3, #1
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	0e1b      	lsrs	r3, r3, #24
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e08:	3301      	adds	r3, #1
 8006e0a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e14:	3301      	adds	r3, #1
 8006e16:	643b      	str	r3, [r7, #64]	; 0x40
 8006e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1a:	2b07      	cmp	r3, #7
 8006e1c:	d9c8      	bls.n	8006db0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e1e:	f7fd ff7b 	bl	8004d18 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d902      	bls.n	8006e34 <HAL_SD_ReadBlocks+0x1e4>
 8006e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d112      	bne.n	8006e5a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a48      	ldr	r2, [pc, #288]	; (8006f5c <HAL_SD_ReadBlocks+0x30c>)
 8006e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e0ed      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e60:	f240 332a 	movw	r3, #810	; 0x32a
 8006e64:	4013      	ands	r3, r2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d095      	beq.n	8006d96 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d022      	beq.n	8006ebe <HAL_SD_ReadBlocks+0x26e>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d91f      	bls.n	8006ebe <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d01b      	beq.n	8006ebe <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f003 fb70 	bl	800a570 <SDMMC_CmdStopTransfer>
 8006e90:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d012      	beq.n	8006ebe <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <HAL_SD_ReadBlocks+0x30c>)
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e0bb      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d012      	beq.n	8006ef2 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a22      	ldr	r2, [pc, #136]	; (8006f5c <HAL_SD_ReadBlocks+0x30c>)
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	f043 0208 	orr.w	r2, r3, #8
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e0a1      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d012      	beq.n	8006f26 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <HAL_SD_ReadBlocks+0x30c>)
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	f043 0202 	orr.w	r2, r3, #2
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e087      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d064      	beq.n	8006ffe <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <HAL_SD_ReadBlocks+0x30c>)
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	f043 0220 	orr.w	r2, r3, #32
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e06d      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
 8006f5a:	bf00      	nop
 8006f5c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f003 f9af 	bl	800a2c8 <SDIO_ReadFIFO>
 8006f6a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f72:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	3301      	adds	r3, #1
 8006f78:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f88:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f92:	3b01      	subs	r3, #1
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	0c1b      	lsrs	r3, r3, #16
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	0e1b      	lsrs	r3, r3, #24
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb8:	3301      	adds	r3, #1
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006fc2:	f7fd fea9 	bl	8004d18 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d902      	bls.n	8006fd8 <HAL_SD_ReadBlocks+0x388>
 8006fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d112      	bne.n	8006ffe <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a18      	ldr	r2, [pc, #96]	; (8007040 <HAL_SD_ReadBlocks+0x3f0>)
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e01b      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <HAL_SD_ReadBlocks+0x3c2>
 800700c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1a6      	bne.n	8006f60 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f240 523a 	movw	r2, #1338	; 0x53a
 800701a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	e006      	b.n	8007036 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
  }
}
 8007036:	4618      	mov	r0, r3
 8007038:	3748      	adds	r7, #72	; 0x48
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	004005ff 	.word	0x004005ff

08007044 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b092      	sub	sp, #72	; 0x48
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007052:	f7fd fe61 	bl	8004d18 <HAL_GetTick>
 8007056:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d107      	bne.n	8007076 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e184      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b01      	cmp	r3, #1
 8007080:	f040 8177 	bne.w	8007372 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800708a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	441a      	add	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007094:	429a      	cmp	r2, r3
 8007096:	d907      	bls.n	80070a8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e16b      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2203      	movs	r2, #3
 80070ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2200      	movs	r2, #0
 80070b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d002      	beq.n	80070c6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	025b      	lsls	r3, r3, #9
 80070c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070ce:	4618      	mov	r0, r3
 80070d0:	f003 f9a4 	bl	800a41c <SDMMC_CmdBlockLength>
 80070d4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80070d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00f      	beq.n	80070fc <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a9d      	ldr	r2, [pc, #628]	; (8007358 <HAL_SD_WriteBlocks+0x314>)
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ea:	431a      	orrs	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e141      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007100:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	025b      	lsls	r3, r3, #9
 8007106:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007108:	2390      	movs	r3, #144	; 0x90
 800710a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800710c:	2300      	movs	r3, #0
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007110:	2300      	movs	r3, #0
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007114:	2301      	movs	r3, #1
 8007116:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f107 0218 	add.w	r2, r7, #24
 8007120:	4611      	mov	r1, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f003 f94f 	bl	800a3c6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d90a      	bls.n	8007144 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800713a:	4618      	mov	r0, r3
 800713c:	f003 f9f6 	bl	800a52c <SDMMC_CmdWriteMultiBlock>
 8007140:	6478      	str	r0, [r7, #68]	; 0x44
 8007142:	e009      	b.n	8007158 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2210      	movs	r2, #16
 8007148:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007150:	4618      	mov	r0, r3
 8007152:	f003 f9c9 	bl	800a4e8 <SDMMC_CmdWriteSingleBlock>
 8007156:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800715a:	2b00      	cmp	r3, #0
 800715c:	d012      	beq.n	8007184 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a7d      	ldr	r2, [pc, #500]	; (8007358 <HAL_SD_WriteBlocks+0x314>)
 8007164:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800716a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716c:	431a      	orrs	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0fd      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007188:	e065      	b.n	8007256 <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d040      	beq.n	800721a <HAL_SD_WriteBlocks+0x1d6>
 8007198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d03d      	beq.n	800721a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800719e:	2300      	movs	r3, #0
 80071a0:	643b      	str	r3, [r7, #64]	; 0x40
 80071a2:	e037      	b.n	8007214 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80071a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	3301      	adds	r3, #1
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80071b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b2:	3b01      	subs	r3, #1
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80071b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	021a      	lsls	r2, r3, #8
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	3301      	adds	r3, #1
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80071c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ca:	3b01      	subs	r3, #1
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	041a      	lsls	r2, r3, #16
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80071da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071dc:	3301      	adds	r3, #1
 80071de:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80071e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e2:	3b01      	subs	r3, #1
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	061a      	lsls	r2, r3, #24
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80071f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f4:	3301      	adds	r3, #1
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80071f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fa:	3b01      	subs	r3, #1
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f107 0214 	add.w	r2, r7, #20
 8007206:	4611      	mov	r1, r2
 8007208:	4618      	mov	r0, r3
 800720a:	f003 f869 	bl	800a2e0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800720e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007210:	3301      	adds	r3, #1
 8007212:	643b      	str	r3, [r7, #64]	; 0x40
 8007214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007216:	2b07      	cmp	r3, #7
 8007218:	d9c4      	bls.n	80071a4 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800721a:	f7fd fd7d 	bl	8004d18 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007226:	429a      	cmp	r2, r3
 8007228:	d902      	bls.n	8007230 <HAL_SD_WriteBlocks+0x1ec>
 800722a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800722c:	2b00      	cmp	r3, #0
 800722e:	d112      	bne.n	8007256 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a48      	ldr	r2, [pc, #288]	; (8007358 <HAL_SD_WriteBlocks+0x314>)
 8007236:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800723c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723e:	431a      	orrs	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e094      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800725c:	f240 331a 	movw	r3, #794	; 0x31a
 8007260:	4013      	ands	r3, r2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d091      	beq.n	800718a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007270:	2b00      	cmp	r3, #0
 8007272:	d022      	beq.n	80072ba <HAL_SD_WriteBlocks+0x276>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d91f      	bls.n	80072ba <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727e:	2b03      	cmp	r3, #3
 8007280:	d01b      	beq.n	80072ba <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f003 f972 	bl	800a570 <SDMMC_CmdStopTransfer>
 800728c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800728e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007290:	2b00      	cmp	r3, #0
 8007292:	d012      	beq.n	80072ba <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a2f      	ldr	r2, [pc, #188]	; (8007358 <HAL_SD_WriteBlocks+0x314>)
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072a2:	431a      	orrs	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e062      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d012      	beq.n	80072ee <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a22      	ldr	r2, [pc, #136]	; (8007358 <HAL_SD_WriteBlocks+0x314>)
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	f043 0208 	orr.w	r2, r3, #8
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e048      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d012      	beq.n	8007322 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a15      	ldr	r2, [pc, #84]	; (8007358 <HAL_SD_WriteBlocks+0x314>)
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	f043 0202 	orr.w	r2, r3, #2
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e02e      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b00      	cmp	r3, #0
 800732e:	d015      	beq.n	800735c <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a08      	ldr	r2, [pc, #32]	; (8007358 <HAL_SD_WriteBlocks+0x314>)
 8007336:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	f043 0210 	orr.w	r2, r3, #16
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e014      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
 8007356:	bf00      	nop
 8007358:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f240 523a 	movw	r2, #1338	; 0x53a
 8007364:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	e006      	b.n	8007380 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
  }
}
 8007380:	4618      	mov	r0, r3
 8007382:	3748      	adds	r7, #72	; 0x48
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <HAL_SD_IRQHandler+0x2e>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 ff36 	bl	8008220 <SD_Read_IT>
 80073b4:	e165      	b.n	8007682 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 808f 	beq.w	80074e4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80073de:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80073e2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d039      	beq.n	8007472 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <HAL_SD_IRQHandler+0x8a>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d011      	beq.n	8007436 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f003 f8aa 	bl	800a570 <SDMMC_CmdStopTransfer>
 800741c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d008      	beq.n	8007436 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f92f 	bl	8007694 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f240 523a 	movw	r2, #1338	; 0x53a
 800743e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d104      	bne.n	8007462 <HAL_SD_IRQHandler+0xda>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f003 fd10 	bl	800ae88 <HAL_SD_RxCpltCallback>
 8007468:	e10b      	b.n	8007682 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f003 fd02 	bl	800ae74 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007470:	e107      	b.n	8007682 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 8102 	beq.w	8007682 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d011      	beq.n	80074ac <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f003 f86f 	bl	800a570 <SDMMC_CmdStopTransfer>
 8007492:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d008      	beq.n	80074ac <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f8f4 	bl	8007694 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 80e5 	bne.w	8007682 <HAL_SD_IRQHandler+0x2fa>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f040 80df 	bne.w	8007682 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0208 	bic.w	r2, r2, #8
 80074d2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f003 fcc9 	bl	800ae74 <HAL_SD_TxCpltCallback>
}
 80074e2:	e0ce      	b.n	8007682 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d008      	beq.n	8007504 <HAL_SD_IRQHandler+0x17c>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fee0 	bl	80082c2 <SD_Write_IT>
 8007502:	e0be      	b.n	8007682 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800750a:	f240 233a 	movw	r3, #570	; 0x23a
 800750e:	4013      	ands	r3, r2
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80b6 	beq.w	8007682 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007528:	f043 0202 	orr.w	r2, r3, #2
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	f043 0208 	orr.w	r2, r3, #8
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	f043 0220 	orr.w	r2, r3, #32
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007576:	f043 0210 	orr.w	r2, r3, #16
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	f043 0208 	orr.w	r2, r3, #8
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f240 723a 	movw	r2, #1850	; 0x73a
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80075b0:	f023 0302 	bic.w	r3, r3, #2
 80075b4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f002 ffd8 	bl	800a570 <SDMMC_CmdStopTransfer>
 80075c0:	4602      	mov	r2, r0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 0308 	and.w	r3, r3, #8
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f855 	bl	8007694 <HAL_SD_ErrorCallback>
}
 80075ea:	e04a      	b.n	8007682 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d045      	beq.n	8007682 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d104      	bne.n	800760a <HAL_SD_IRQHandler+0x282>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d011      	beq.n	800762e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	4a1f      	ldr	r2, [pc, #124]	; (800768c <HAL_SD_IRQHandler+0x304>)
 8007610:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	4618      	mov	r0, r3
 8007618:	f7fd ff4c 	bl	80054b4 <HAL_DMA_Abort_IT>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d02f      	beq.n	8007682 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007626:	4618      	mov	r0, r3
 8007628:	f000 faaa 	bl	8007b80 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800762c:	e029      	b.n	8007682 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d104      	bne.n	8007642 <HAL_SD_IRQHandler+0x2ba>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d011      	beq.n	8007666 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	4a12      	ldr	r2, [pc, #72]	; (8007690 <HAL_SD_IRQHandler+0x308>)
 8007648:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	4618      	mov	r0, r3
 8007650:	f7fd ff30 	bl	80054b4 <HAL_DMA_Abort_IT>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d013      	beq.n	8007682 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	4618      	mov	r0, r3
 8007660:	f000 fac5 	bl	8007bee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007664:	e00d      	b.n	8007682 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f003 fbf0 	bl	800ae60 <HAL_SD_AbortCallback>
}
 8007680:	e7ff      	b.n	8007682 <HAL_SD_IRQHandler+0x2fa>
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	08007b81 	.word	0x08007b81
 8007690:	08007bef 	.word	0x08007bef

08007694 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bc80      	pop	{r7}
 80076a4:	4770      	bx	lr
	...

080076a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076b6:	0f9b      	lsrs	r3, r3, #30
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c2:	0e9b      	lsrs	r3, r3, #26
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d4:	0e1b      	lsrs	r3, r3, #24
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007708:	0d1b      	lsrs	r3, r3, #20
 800770a:	b29a      	uxth	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007714:	0c1b      	lsrs	r3, r3, #16
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	b2da      	uxtb	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007726:	0bdb      	lsrs	r3, r3, #15
 8007728:	b2db      	uxtb	r3, r3
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	b2da      	uxtb	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007738:	0b9b      	lsrs	r3, r3, #14
 800773a:	b2db      	uxtb	r3, r3
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	b2da      	uxtb	r2, r3
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800774a:	0b5b      	lsrs	r3, r3, #13
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	b2da      	uxtb	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800775c:	0b1b      	lsrs	r3, r3, #12
 800775e:	b2db      	uxtb	r3, r3
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	b2da      	uxtb	r2, r3
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2200      	movs	r2, #0
 800776e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007774:	2b00      	cmp	r3, #0
 8007776:	d163      	bne.n	8007840 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800777c:	009a      	lsls	r2, r3, #2
 800777e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007782:	4013      	ands	r3, r2
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007788:	0f92      	lsrs	r2, r2, #30
 800778a:	431a      	orrs	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007794:	0edb      	lsrs	r3, r3, #27
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	b2da      	uxtb	r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a6:	0e1b      	lsrs	r3, r3, #24
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077b8:	0d5b      	lsrs	r3, r3, #21
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ca:	0c9b      	lsrs	r3, r3, #18
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077dc:	0bdb      	lsrs	r3, r3, #15
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	7e1b      	ldrb	r3, [r3, #24]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	3302      	adds	r3, #2
 8007800:	2201      	movs	r2, #1
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800780a:	fb02 f203 	mul.w	r2, r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	7a1b      	ldrb	r3, [r3, #8]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	2201      	movs	r2, #1
 800781e:	409a      	lsls	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800782c:	0a52      	lsrs	r2, r2, #9
 800782e:	fb02 f203 	mul.w	r2, r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800783c:	661a      	str	r2, [r3, #96]	; 0x60
 800783e:	e031      	b.n	80078a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007844:	2b01      	cmp	r3, #1
 8007846:	d11d      	bne.n	8007884 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007856:	0c1b      	lsrs	r3, r3, #16
 8007858:	431a      	orrs	r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	3301      	adds	r3, #1
 8007864:	029a      	lsls	r2, r3, #10
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007878:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	661a      	str	r2, [r3, #96]	; 0x60
 8007882:	e00f      	b.n	80078a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a58      	ldr	r2, [pc, #352]	; (80079ec <HAL_SD_GetCardCSD+0x344>)
 800788a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e09d      	b.n	80079e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078a8:	0b9b      	lsrs	r3, r3, #14
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ba:	09db      	lsrs	r3, r3, #7
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078dc:	0fdb      	lsrs	r3, r3, #31
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e8:	0f5b      	lsrs	r3, r3, #29
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	0e9b      	lsrs	r3, r3, #26
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	b2da      	uxtb	r2, r3
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790c:	0d9b      	lsrs	r3, r3, #22
 800790e:	b2db      	uxtb	r3, r3
 8007910:	f003 030f 	and.w	r3, r3, #15
 8007914:	b2da      	uxtb	r2, r3
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791e:	0d5b      	lsrs	r3, r3, #21
 8007920:	b2db      	uxtb	r3, r3
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	b2da      	uxtb	r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	0c1b      	lsrs	r3, r3, #16
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	b2da      	uxtb	r2, r3
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	0bdb      	lsrs	r3, r3, #15
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	0b9b      	lsrs	r3, r3, #14
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	b2da      	uxtb	r2, r3
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	0b5b      	lsrs	r3, r3, #13
 8007978:	b2db      	uxtb	r3, r3
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798a:	0b1b      	lsrs	r3, r3, #12
 800798c:	b2db      	uxtb	r3, r3
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	b2da      	uxtb	r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799e:	0a9b      	lsrs	r3, r3, #10
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	f003 0303 	and.w	r3, r3, #3
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	004005ff 	.word	0x004005ff

080079f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr
	...

08007a48 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007a48:	b5b0      	push	{r4, r5, r7, lr}
 8007a4a:	b08e      	sub	sp, #56	; 0x38
 8007a4c:	af04      	add	r7, sp, #16
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2203      	movs	r2, #3
 8007a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d02e      	beq.n	8007ac0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a68:	d106      	bne.n	8007a78 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38
 8007a76:	e029      	b.n	8007acc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a7e:	d10a      	bne.n	8007a96 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fa6d 	bl	8007f60 <SD_WideBus_Enable>
 8007a86:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38
 8007a94:	e01a      	b.n	8007acc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 faaa 	bl	8007ff6 <SD_WideBus_Disable>
 8007aa2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
 8007ab0:	e00c      	b.n	8007acc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
 8007abe:	e005      	b.n	8007acc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d009      	beq.n	8007ae8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a18      	ldr	r2, [pc, #96]	; (8007b3c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e024      	b.n	8007b32 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681d      	ldr	r5, [r3, #0]
 8007b0e:	466c      	mov	r4, sp
 8007b10:	f107 0318 	add.w	r3, r7, #24
 8007b14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b22:	4628      	mov	r0, r5
 8007b24:	f002 fba6 	bl	800a274 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3728      	adds	r7, #40	; 0x28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bdb0      	pop	{r4, r5, r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	004005ff 	.word	0x004005ff

08007b40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007b4c:	f107 030c 	add.w	r3, r7, #12
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9dc 	bl	8007f10 <SD_SendStatus>
 8007b58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d005      	beq.n	8007b6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	0a5b      	lsrs	r3, r3, #9
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b76:	693b      	ldr	r3, [r7, #16]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff ffd1 	bl	8007b40 <HAL_SD_GetCardState>
 8007b9e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b06      	cmp	r3, #6
 8007bb2:	d002      	beq.n	8007bba <SD_DMATxAbort+0x3a>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d10a      	bne.n	8007bd0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f002 fcd6 	bl	800a570 <SDMMC_CmdStopTransfer>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f003 f941 	bl	800ae60 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007bde:	e002      	b.n	8007be6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff fd57 	bl	8007694 <HAL_SD_ErrorCallback>
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c04:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff ff9a 	bl	8007b40 <HAL_SD_GetCardState>
 8007c0c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b06      	cmp	r3, #6
 8007c20:	d002      	beq.n	8007c28 <SD_DMARxAbort+0x3a>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2b05      	cmp	r3, #5
 8007c26:	d10a      	bne.n	8007c3e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f002 fc9f 	bl	800a570 <SDMMC_CmdStopTransfer>
 8007c32:	4602      	mov	r2, r0
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d103      	bne.n	8007c4e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f003 f90a 	bl	800ae60 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007c4c:	e002      	b.n	8007c54 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff fd20 	bl	8007694 <HAL_SD_ErrorCallback>
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c5c:	b5b0      	push	{r4, r5, r7, lr}
 8007c5e:	b094      	sub	sp, #80	; 0x50
 8007c60:	af04      	add	r7, sp, #16
 8007c62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007c64:	2301      	movs	r3, #1
 8007c66:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f002 fb56 	bl	800a31e <SDIO_GetPowerState>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007c7c:	e0b6      	b.n	8007dec <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d02f      	beq.n	8007ce6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f002 fd7a 	bl	800a784 <SDMMC_CmdSendCID>
 8007c90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <SD_InitCard+0x40>
    {
      return errorstate;
 8007c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9a:	e0a7      	b.n	8007dec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f002 fb7d 	bl	800a3a2 <SDIO_GetResponse>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2104      	movs	r1, #4
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f002 fb74 	bl	800a3a2 <SDIO_GetResponse>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2108      	movs	r1, #8
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f002 fb6b 	bl	800a3a2 <SDIO_GetResponse>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	210c      	movs	r1, #12
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f002 fb62 	bl	800a3a2 <SDIO_GetResponse>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d00d      	beq.n	8007d0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f107 020e 	add.w	r2, r7, #14
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f002 fd80 	bl	800a7fe <SDMMC_CmdSetRelAdd>
 8007cfe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <SD_InitCard+0xae>
    {
      return errorstate;
 8007d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d08:	e070      	b.n	8007dec <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d036      	beq.n	8007d80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007d12:	89fb      	ldrh	r3, [r7, #14]
 8007d14:	461a      	mov	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d22:	041b      	lsls	r3, r3, #16
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f002 fd4a 	bl	800a7c0 <SDMMC_CmdSendCSD>
 8007d2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d36:	e059      	b.n	8007dec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f002 fb2f 	bl	800a3a2 <SDIO_GetResponse>
 8007d44:	4602      	mov	r2, r0
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2104      	movs	r1, #4
 8007d50:	4618      	mov	r0, r3
 8007d52:	f002 fb26 	bl	800a3a2 <SDIO_GetResponse>
 8007d56:	4602      	mov	r2, r0
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2108      	movs	r1, #8
 8007d62:	4618      	mov	r0, r3
 8007d64:	f002 fb1d 	bl	800a3a2 <SDIO_GetResponse>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	210c      	movs	r1, #12
 8007d74:	4618      	mov	r0, r3
 8007d76:	f002 fb14 	bl	800a3a2 <SDIO_GetResponse>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2104      	movs	r1, #4
 8007d86:	4618      	mov	r0, r3
 8007d88:	f002 fb0b 	bl	800a3a2 <SDIO_GetResponse>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	0d1a      	lsrs	r2, r3, #20
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007d94:	f107 0310 	add.w	r3, r7, #16
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fc84 	bl	80076a8 <HAL_SD_GetCardCSD>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007da6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007daa:	e01f      	b.n	8007dec <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6819      	ldr	r1, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db4:	041b      	lsls	r3, r3, #16
 8007db6:	461a      	mov	r2, r3
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	f002 fbf9 	bl	800a5b4 <SDMMC_CmdSelDesel>
 8007dc2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <SD_InitCard+0x172>
  {
    return errorstate;
 8007dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dcc:	e00e      	b.n	8007dec <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681d      	ldr	r5, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	466c      	mov	r4, sp
 8007dd6:	f103 0210 	add.w	r2, r3, #16
 8007dda:	ca07      	ldmia	r2, {r0, r1, r2}
 8007ddc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007de0:	3304      	adds	r3, #4
 8007de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007de4:	4628      	mov	r0, r5
 8007de6:	f002 fa45 	bl	800a274 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3740      	adds	r7, #64	; 0x40
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bdb0      	pop	{r4, r5, r7, pc}

08007df4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	2300      	movs	r3, #0
 8007e06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f002 fbf4 	bl	800a5fa <SDMMC_CmdGoIdleState>
 8007e12:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <SD_PowerON+0x2a>
  {
    return errorstate;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	e072      	b.n	8007f04 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f002 fc07 	bl	800a636 <SDMMC_CmdOperCond>
 8007e28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00d      	beq.n	8007e4c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f002 fbdd 	bl	800a5fa <SDMMC_CmdGoIdleState>
 8007e40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d004      	beq.n	8007e52 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	e05b      	b.n	8007f04 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d137      	bne.n	8007eca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2100      	movs	r1, #0
 8007e60:	4618      	mov	r0, r3
 8007e62:	f002 fc07 	bl	800a674 <SDMMC_CmdAppCommand>
 8007e66:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d02d      	beq.n	8007eca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e72:	e047      	b.n	8007f04 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2100      	movs	r1, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f002 fbfa 	bl	800a674 <SDMMC_CmdAppCommand>
 8007e80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <SD_PowerON+0x98>
    {
      return errorstate;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	e03b      	b.n	8007f04 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	491e      	ldr	r1, [pc, #120]	; (8007f0c <SD_PowerON+0x118>)
 8007e92:	4618      	mov	r0, r3
 8007e94:	f002 fc10 	bl	800a6b8 <SDMMC_CmdAppOperCommand>
 8007e98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ea4:	e02e      	b.n	8007f04 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2100      	movs	r1, #0
 8007eac:	4618      	mov	r0, r3
 8007eae:	f002 fa78 	bl	800a3a2 <SDIO_GetResponse>
 8007eb2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	0fdb      	lsrs	r3, r3, #31
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <SD_PowerON+0xcc>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e000      	b.n	8007ec2 <SD_PowerON+0xce>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	613b      	str	r3, [r7, #16]

    count++;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d802      	bhi.n	8007eda <SD_PowerON+0xe6>
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0cc      	beq.n	8007e74 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d902      	bls.n	8007eea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ee8:	e00c      	b.n	8007f04 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	645a      	str	r2, [r3, #68]	; 0x44
 8007efa:	e002      	b.n	8007f02 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	c1100000 	.word	0xc1100000

08007f10 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007f20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f24:	e018      	b.n	8007f58 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2e:	041b      	lsls	r3, r3, #16
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f002 fc84 	bl	800a840 <SDMMC_CmdSendStatus>
 8007f38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	e009      	b.n	8007f58 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f002 fa29 	bl	800a3a2 <SDIO_GetResponse>
 8007f50:	4602      	mov	r2, r0
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f002 fa13 	bl	800a3a2 <SDIO_GetResponse>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f86:	d102      	bne.n	8007f8e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f8c:	e02f      	b.n	8007fee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f8e:	f107 030c 	add.w	r3, r7, #12
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f879 	bl	800808c <SD_FindSCR>
 8007f9a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	e023      	b.n	8007fee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01c      	beq.n	8007fea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb8:	041b      	lsls	r3, r3, #16
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	f002 fb59 	bl	800a674 <SDMMC_CmdAppCommand>
 8007fc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	e00f      	b.n	8007fee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f002 fb92 	bl	800a6fe <SDMMC_CmdBusWidth>
 8007fda:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	e003      	b.n	8007fee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e001      	b.n	8007fee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007fea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b086      	sub	sp, #24
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	2300      	movs	r3, #0
 8008004:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2100      	movs	r1, #0
 800800c:	4618      	mov	r0, r3
 800800e:	f002 f9c8 	bl	800a3a2 <SDIO_GetResponse>
 8008012:	4603      	mov	r3, r0
 8008014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800801c:	d102      	bne.n	8008024 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800801e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008022:	e02f      	b.n	8008084 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008024:	f107 030c 	add.w	r3, r7, #12
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f82e 	bl	800808c <SD_FindSCR>
 8008030:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	e023      	b.n	8008084 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01c      	beq.n	8008080 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f002 fb0e 	bl	800a674 <SDMMC_CmdAppCommand>
 8008058:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	e00f      	b.n	8008084 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2100      	movs	r1, #0
 800806a:	4618      	mov	r0, r3
 800806c:	f002 fb47 	bl	800a6fe <SDMMC_CmdBusWidth>
 8008070:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	e003      	b.n	8008084 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800807c:	2300      	movs	r3, #0
 800807e:	e001      	b.n	8008084 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008080:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800808c:	b590      	push	{r4, r7, lr}
 800808e:	b08f      	sub	sp, #60	; 0x3c
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008096:	f7fc fe3f 	bl	8004d18 <HAL_GetTick>
 800809a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80080a0:	2300      	movs	r3, #0
 80080a2:	60bb      	str	r3, [r7, #8]
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2108      	movs	r1, #8
 80080b2:	4618      	mov	r0, r3
 80080b4:	f002 f9b2 	bl	800a41c <SDMMC_CmdBlockLength>
 80080b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	e0a9      	b.n	8008218 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080cc:	041b      	lsls	r3, r3, #16
 80080ce:	4619      	mov	r1, r3
 80080d0:	4610      	mov	r0, r2
 80080d2:	f002 facf 	bl	800a674 <SDMMC_CmdAppCommand>
 80080d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	e09a      	b.n	8008218 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080e2:	f04f 33ff 	mov.w	r3, #4294967295
 80080e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80080e8:	2308      	movs	r3, #8
 80080ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80080ec:	2330      	movs	r3, #48	; 0x30
 80080ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80080f0:	2302      	movs	r3, #2
 80080f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80080f8:	2301      	movs	r3, #1
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f107 0210 	add.w	r2, r7, #16
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f002 f95d 	bl	800a3c6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f002 fb16 	bl	800a742 <SDMMC_CmdSendSCR>
 8008116:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	2b00      	cmp	r3, #0
 800811c:	d022      	beq.n	8008164 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	e07a      	b.n	8008218 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00e      	beq.n	800814e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6819      	ldr	r1, [r3, #0]
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	f107 0208 	add.w	r2, r7, #8
 800813c:	18d4      	adds	r4, r2, r3
 800813e:	4608      	mov	r0, r1
 8008140:	f002 f8c2 	bl	800a2c8 <SDIO_ReadFIFO>
 8008144:	4603      	mov	r3, r0
 8008146:	6023      	str	r3, [r4, #0]
      index++;
 8008148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814a:	3301      	adds	r3, #1
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800814e:	f7fc fde3 	bl	8004d18 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815c:	d102      	bne.n	8008164 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800815e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008162:	e059      	b.n	8008218 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816a:	f240 432a 	movw	r3, #1066	; 0x42a
 800816e:	4013      	ands	r3, r2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0d6      	beq.n	8008122 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2208      	movs	r2, #8
 8008188:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800818a:	2308      	movs	r3, #8
 800818c:	e044      	b.n	8008218 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2202      	movs	r2, #2
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80081a4:	2302      	movs	r3, #2
 80081a6:	e037      	b.n	8008218 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2220      	movs	r2, #32
 80081bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80081be:	2320      	movs	r3, #32
 80081c0:	e02a      	b.n	8008218 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	061a      	lsls	r2, r3, #24
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081d8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	0a1b      	lsrs	r3, r3, #8
 80081de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80081e2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	0e1b      	lsrs	r3, r3, #24
 80081e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	601a      	str	r2, [r3, #0]
    scr++;
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	3304      	adds	r3, #4
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	061a      	lsls	r2, r3, #24
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008200:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	0a1b      	lsrs	r3, r3, #8
 8008206:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800820a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	0e1b      	lsrs	r3, r3, #24
 8008210:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	373c      	adds	r7, #60	; 0x3c
 800821c:	46bd      	mov	sp, r7
 800821e:	bd90      	pop	{r4, r7, pc}

08008220 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d03f      	beq.n	80082ba <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	e033      	b.n	80082a8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4618      	mov	r0, r3
 8008246:	f002 f83f 	bl	800a2c8 <SDIO_ReadFIFO>
 800824a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	b2da      	uxtb	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	3301      	adds	r3, #1
 8008258:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3b01      	subs	r3, #1
 800825e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	0a1b      	lsrs	r3, r3, #8
 8008264:	b2da      	uxtb	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	701a      	strb	r2, [r3, #0]
      tmp++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3301      	adds	r3, #1
 800826e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3b01      	subs	r3, #1
 8008274:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	0c1b      	lsrs	r3, r3, #16
 800827a:	b2da      	uxtb	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3301      	adds	r3, #1
 8008284:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	3b01      	subs	r3, #1
 800828a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	0e1b      	lsrs	r3, r3, #24
 8008290:	b2da      	uxtb	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3301      	adds	r3, #1
 800829a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	3b01      	subs	r3, #1
 80082a0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	3301      	adds	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b07      	cmp	r3, #7
 80082ac:	d9c8      	bls.n	8008240 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80082ba:	bf00      	nop
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b086      	sub	sp, #24
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d043      	beq.n	8008364 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80082dc:	2300      	movs	r3, #0
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	e037      	b.n	8008352 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	021a      	lsls	r2, r3, #8
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	3b01      	subs	r3, #1
 800830a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	041a      	lsls	r2, r3, #16
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	4313      	orrs	r3, r2
 8008316:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	3301      	adds	r3, #1
 800831c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	3b01      	subs	r3, #1
 8008322:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	061a      	lsls	r2, r3, #24
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4313      	orrs	r3, r2
 800832e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	3b01      	subs	r3, #1
 800833a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f107 0208 	add.w	r2, r7, #8
 8008344:	4611      	mov	r1, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f001 ffca 	bl	800a2e0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	3301      	adds	r3, #1
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b07      	cmp	r3, #7
 8008356:	d9c4      	bls.n	80082e2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008364:	bf00      	nop
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e076      	b.n	800846c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	2b00      	cmp	r3, #0
 8008384:	d108      	bne.n	8008398 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800838e:	d009      	beq.n	80083a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	61da      	str	r2, [r3, #28]
 8008396:	e005      	b.n	80083a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7f9 fd34 	bl	8001e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80083ec:	431a      	orrs	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f6:	431a      	orrs	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008428:	ea42 0103 	orr.w	r1, r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	0c1a      	lsrs	r2, r3, #16
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f002 0204 	and.w	r2, r2, #4
 800844a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69da      	ldr	r2, [r3, #28]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800845a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	4613      	mov	r3, r2
 8008482:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_SPI_Transmit+0x22>
 8008492:	2302      	movs	r3, #2
 8008494:	e126      	b.n	80086e4 <HAL_SPI_Transmit+0x270>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800849e:	f7fc fc3b 	bl	8004d18 <HAL_GetTick>
 80084a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d002      	beq.n	80084ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80084b4:	2302      	movs	r3, #2
 80084b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084b8:	e10b      	b.n	80086d2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <HAL_SPI_Transmit+0x52>
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d102      	bne.n	80084cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084ca:	e102      	b.n	80086d2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2203      	movs	r2, #3
 80084d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	88fa      	ldrh	r2, [r7, #6]
 80084e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	88fa      	ldrh	r2, [r7, #6]
 80084ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008512:	d10f      	bne.n	8008534 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008522:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008532:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	d007      	beq.n	8008552 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008550:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800855a:	d14b      	bne.n	80085f4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <HAL_SPI_Transmit+0xf6>
 8008564:	8afb      	ldrh	r3, [r7, #22]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d13e      	bne.n	80085e8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856e:	881a      	ldrh	r2, [r3, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857a:	1c9a      	adds	r2, r3, #2
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008584:	b29b      	uxth	r3, r3
 8008586:	3b01      	subs	r3, #1
 8008588:	b29a      	uxth	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800858e:	e02b      	b.n	80085e8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b02      	cmp	r3, #2
 800859c:	d112      	bne.n	80085c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	881a      	ldrh	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	1c9a      	adds	r2, r3, #2
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80085c2:	e011      	b.n	80085e8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085c4:	f7fc fba8 	bl	8004d18 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d803      	bhi.n	80085dc <HAL_SPI_Transmit+0x168>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085da:	d102      	bne.n	80085e2 <HAL_SPI_Transmit+0x16e>
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80085e6:	e074      	b.n	80086d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1ce      	bne.n	8008590 <HAL_SPI_Transmit+0x11c>
 80085f2:	e04c      	b.n	800868e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <HAL_SPI_Transmit+0x18e>
 80085fc:	8afb      	ldrh	r3, [r7, #22]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d140      	bne.n	8008684 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	330c      	adds	r3, #12
 800860c:	7812      	ldrb	r2, [r2, #0]
 800860e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008628:	e02c      	b.n	8008684 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b02      	cmp	r3, #2
 8008636:	d113      	bne.n	8008660 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	330c      	adds	r3, #12
 8008642:	7812      	ldrb	r2, [r2, #0]
 8008644:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008654:	b29b      	uxth	r3, r3
 8008656:	3b01      	subs	r3, #1
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	86da      	strh	r2, [r3, #54]	; 0x36
 800865e:	e011      	b.n	8008684 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008660:	f7fc fb5a 	bl	8004d18 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	d803      	bhi.n	8008678 <HAL_SPI_Transmit+0x204>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008676:	d102      	bne.n	800867e <HAL_SPI_Transmit+0x20a>
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d102      	bne.n	8008684 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008682:	e026      	b.n	80086d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1cd      	bne.n	800862a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 fa54 	bl	8008b40 <SPI_EndRxTxTransaction>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2220      	movs	r2, #32
 80086a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086ac:	2300      	movs	r3, #0
 80086ae:	613b      	str	r3, [r7, #16]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	613b      	str	r3, [r7, #16]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	613b      	str	r3, [r7, #16]
 80086c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	77fb      	strb	r3, [r7, #31]
 80086ce:	e000      	b.n	80086d2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80086d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08c      	sub	sp, #48	; 0x30
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80086fa:	2301      	movs	r3, #1
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <HAL_SPI_TransmitReceive+0x26>
 800870e:	2302      	movs	r3, #2
 8008710:	e18a      	b.n	8008a28 <HAL_SPI_TransmitReceive+0x33c>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800871a:	f7fc fafd 	bl	8004d18 <HAL_GetTick>
 800871e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008730:	887b      	ldrh	r3, [r7, #2]
 8008732:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008738:	2b01      	cmp	r3, #1
 800873a:	d00f      	beq.n	800875c <HAL_SPI_TransmitReceive+0x70>
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008742:	d107      	bne.n	8008754 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d103      	bne.n	8008754 <HAL_SPI_TransmitReceive+0x68>
 800874c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008750:	2b04      	cmp	r3, #4
 8008752:	d003      	beq.n	800875c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008754:	2302      	movs	r3, #2
 8008756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800875a:	e15b      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_SPI_TransmitReceive+0x82>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <HAL_SPI_TransmitReceive+0x82>
 8008768:	887b      	ldrh	r3, [r7, #2]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008774:	e14e      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b04      	cmp	r3, #4
 8008780:	d003      	beq.n	800878a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2205      	movs	r2, #5
 8008786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	887a      	ldrh	r2, [r7, #2]
 800879a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	887a      	ldrh	r2, [r7, #2]
 80087a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	887a      	ldrh	r2, [r7, #2]
 80087ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	887a      	ldrh	r2, [r7, #2]
 80087b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b40      	cmp	r3, #64	; 0x40
 80087cc:	d007      	beq.n	80087de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e6:	d178      	bne.n	80088da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <HAL_SPI_TransmitReceive+0x10a>
 80087f0:	8b7b      	ldrh	r3, [r7, #26]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d166      	bne.n	80088c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	881a      	ldrh	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	1c9a      	adds	r2, r3, #2
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800881a:	e053      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b02      	cmp	r3, #2
 8008828:	d11b      	bne.n	8008862 <HAL_SPI_TransmitReceive+0x176>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800882e:	b29b      	uxth	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d016      	beq.n	8008862 <HAL_SPI_TransmitReceive+0x176>
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	2b01      	cmp	r3, #1
 8008838:	d113      	bne.n	8008862 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	881a      	ldrh	r2, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	1c9a      	adds	r2, r3, #2
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b01      	cmp	r3, #1
 800886e:	d119      	bne.n	80088a4 <HAL_SPI_TransmitReceive+0x1b8>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008874:	b29b      	uxth	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d014      	beq.n	80088a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008884:	b292      	uxth	r2, r2
 8008886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	1c9a      	adds	r2, r3, #2
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008896:	b29b      	uxth	r3, r3
 8008898:	3b01      	subs	r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088a0:	2301      	movs	r3, #1
 80088a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80088a4:	f7fc fa38 	bl	8004d18 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d807      	bhi.n	80088c4 <HAL_SPI_TransmitReceive+0x1d8>
 80088b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ba:	d003      	beq.n	80088c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80088c2:	e0a7      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1a6      	bne.n	800881c <HAL_SPI_TransmitReceive+0x130>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1a1      	bne.n	800881c <HAL_SPI_TransmitReceive+0x130>
 80088d8:	e07c      	b.n	80089d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <HAL_SPI_TransmitReceive+0x1fc>
 80088e2:	8b7b      	ldrh	r3, [r7, #26]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d16b      	bne.n	80089c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	330c      	adds	r3, #12
 80088f2:	7812      	ldrb	r2, [r2, #0]
 80088f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008904:	b29b      	uxth	r3, r3
 8008906:	3b01      	subs	r3, #1
 8008908:	b29a      	uxth	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800890e:	e057      	b.n	80089c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b02      	cmp	r3, #2
 800891c:	d11c      	bne.n	8008958 <HAL_SPI_TransmitReceive+0x26c>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008922:	b29b      	uxth	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d017      	beq.n	8008958 <HAL_SPI_TransmitReceive+0x26c>
 8008928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892a:	2b01      	cmp	r3, #1
 800892c:	d114      	bne.n	8008958 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	330c      	adds	r3, #12
 8008938:	7812      	ldrb	r2, [r2, #0]
 800893a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800894a:	b29b      	uxth	r3, r3
 800894c:	3b01      	subs	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b01      	cmp	r3, #1
 8008964:	d119      	bne.n	800899a <HAL_SPI_TransmitReceive+0x2ae>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800896a:	b29b      	uxth	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d014      	beq.n	800899a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	b2d2      	uxtb	r2, r2
 800897c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	1c5a      	adds	r2, r3, #1
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800898c:	b29b      	uxth	r3, r3
 800898e:	3b01      	subs	r3, #1
 8008990:	b29a      	uxth	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008996:	2301      	movs	r3, #1
 8008998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800899a:	f7fc f9bd 	bl	8004d18 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d803      	bhi.n	80089b2 <HAL_SPI_TransmitReceive+0x2c6>
 80089aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b0:	d102      	bne.n	80089b8 <HAL_SPI_TransmitReceive+0x2cc>
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089be:	e029      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1a2      	bne.n	8008910 <HAL_SPI_TransmitReceive+0x224>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d19d      	bne.n	8008910 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 f8b1 	bl	8008b40 <SPI_EndRxTxTransaction>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d006      	beq.n	80089f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2220      	movs	r2, #32
 80089ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80089f0:	e010      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10b      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	617b      	str	r3, [r7, #20]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	e000      	b.n	8008a14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008a12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3730      	adds	r7, #48	; 0x30
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b088      	sub	sp, #32
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a40:	f7fc f96a 	bl	8004d18 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a50:	f7fc f962 	bl	8004d18 <HAL_GetTick>
 8008a54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a56:	4b39      	ldr	r3, [pc, #228]	; (8008b3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	015b      	lsls	r3, r3, #5
 8008a5c:	0d1b      	lsrs	r3, r3, #20
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	fb02 f303 	mul.w	r3, r2, r3
 8008a64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a66:	e054      	b.n	8008b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d050      	beq.n	8008b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a70:	f7fc f952 	bl	8004d18 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d902      	bls.n	8008a86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d13d      	bne.n	8008b02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a9e:	d111      	bne.n	8008ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aa8:	d004      	beq.n	8008ab4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ab2:	d107      	bne.n	8008ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ac2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008acc:	d10f      	bne.n	8008aee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e017      	b.n	8008b32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	bf0c      	ite	eq
 8008b22:	2301      	moveq	r3, #1
 8008b24:	2300      	movne	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d19b      	bne.n	8008a68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000008 	.word	0x20000008

08008b40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2200      	movs	r2, #0
 8008b54:	2180      	movs	r1, #128	; 0x80
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f7ff ff6a 	bl	8008a30 <SPI_WaitFlagStateUntilTimeout>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d007      	beq.n	8008b72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b66:	f043 0220 	orr.w	r2, r3, #32
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e000      	b.n	8008b74 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <HAL_SRAM_Init+0x1c>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b96:	d101      	bne.n	8008b9c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e038      	b.n	8008c0e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7f9 fab5 	bl	8002120 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f001 fa81 	bl	800a0c8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	68b9      	ldr	r1, [r7, #8]
 8008bd2:	f001 fae3 	bl	800a19c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6858      	ldr	r0, [r3, #4]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	f001 fb0e 	bl	800a204 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	6892      	ldr	r2, [r2, #8]
 8008bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	6892      	ldr	r2, [r2, #8]
 8008bfc:	f041 0101 	orr.w	r1, r1, #1
 8008c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b082      	sub	sp, #8
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e041      	b.n	8008cac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7f9 f93f 	bl	8001ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3304      	adds	r3, #4
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f000 fb9d 	bl	8009394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d001      	beq.n	8008ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e044      	b.n	8008d56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f042 0201 	orr.w	r2, r2, #1
 8008ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a1d      	ldr	r2, [pc, #116]	; (8008d60 <HAL_TIM_Base_Start_IT+0xac>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d018      	beq.n	8008d20 <HAL_TIM_Base_Start_IT+0x6c>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a1c      	ldr	r2, [pc, #112]	; (8008d64 <HAL_TIM_Base_Start_IT+0xb0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d013      	beq.n	8008d20 <HAL_TIM_Base_Start_IT+0x6c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d00:	d00e      	beq.n	8008d20 <HAL_TIM_Base_Start_IT+0x6c>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a18      	ldr	r2, [pc, #96]	; (8008d68 <HAL_TIM_Base_Start_IT+0xb4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d009      	beq.n	8008d20 <HAL_TIM_Base_Start_IT+0x6c>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a16      	ldr	r2, [pc, #88]	; (8008d6c <HAL_TIM_Base_Start_IT+0xb8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d004      	beq.n	8008d20 <HAL_TIM_Base_Start_IT+0x6c>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <HAL_TIM_Base_Start_IT+0xbc>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d111      	bne.n	8008d44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b06      	cmp	r3, #6
 8008d30:	d010      	beq.n	8008d54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f042 0201 	orr.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d42:	e007      	b.n	8008d54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0201 	orr.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bc80      	pop	{r7}
 8008d5e:	4770      	bx	lr
 8008d60:	40012c00 	.word	0x40012c00
 8008d64:	40013400 	.word	0x40013400
 8008d68:	40000400 	.word	0x40000400
 8008d6c:	40000800 	.word	0x40000800
 8008d70:	40000c00 	.word	0x40000c00

08008d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e041      	b.n	8008e0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d106      	bne.n	8008da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f839 	bl	8008e12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f000 faee 	bl	8009394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr

08008e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d122      	bne.n	8008e80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d11b      	bne.n	8008e80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0202 	mvn.w	r2, #2
 8008e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa78 	bl	800935c <HAL_TIM_IC_CaptureCallback>
 8008e6c:	e005      	b.n	8008e7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fa6b 	bl	800934a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa7a 	bl	800936e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	f003 0304 	and.w	r3, r3, #4
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d122      	bne.n	8008ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d11b      	bne.n	8008ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f06f 0204 	mvn.w	r2, #4
 8008ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa4e 	bl	800935c <HAL_TIM_IC_CaptureCallback>
 8008ec0:	e005      	b.n	8008ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fa41 	bl	800934a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fa50 	bl	800936e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	f003 0308 	and.w	r3, r3, #8
 8008ede:	2b08      	cmp	r3, #8
 8008ee0:	d122      	bne.n	8008f28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f003 0308 	and.w	r3, r3, #8
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d11b      	bne.n	8008f28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f06f 0208 	mvn.w	r2, #8
 8008ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2204      	movs	r2, #4
 8008efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa24 	bl	800935c <HAL_TIM_IC_CaptureCallback>
 8008f14:	e005      	b.n	8008f22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fa17 	bl	800934a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa26 	bl	800936e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	f003 0310 	and.w	r3, r3, #16
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	d122      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f003 0310 	and.w	r3, r3, #16
 8008f40:	2b10      	cmp	r3, #16
 8008f42:	d11b      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f06f 0210 	mvn.w	r2, #16
 8008f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2208      	movs	r2, #8
 8008f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f9fa 	bl	800935c <HAL_TIM_IC_CaptureCallback>
 8008f68:	e005      	b.n	8008f76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f9ed 	bl	800934a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f9fc 	bl	800936e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d10e      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d107      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f06f 0201 	mvn.w	r2, #1
 8008fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f9c8 	bl	8009338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb2:	2b80      	cmp	r3, #128	; 0x80
 8008fb4:	d10e      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc0:	2b80      	cmp	r3, #128	; 0x80
 8008fc2:	d107      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fd62 	bl	8009a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d10e      	bne.n	8009000 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fec:	2b40      	cmp	r3, #64	; 0x40
 8008fee:	d107      	bne.n	8009000 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9c0 	bl	8009380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b20      	cmp	r3, #32
 800900c:	d10e      	bne.n	800902c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f003 0320 	and.w	r3, r3, #32
 8009018:	2b20      	cmp	r3, #32
 800901a:	d107      	bne.n	800902c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f06f 0220 	mvn.w	r2, #32
 8009024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fd2d 	bl	8009a86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009046:	2b01      	cmp	r3, #1
 8009048:	d101      	bne.n	800904e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800904a:	2302      	movs	r3, #2
 800904c:	e0ac      	b.n	80091a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b0c      	cmp	r3, #12
 800905a:	f200 809f 	bhi.w	800919c <HAL_TIM_PWM_ConfigChannel+0x168>
 800905e:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	08009099 	.word	0x08009099
 8009068:	0800919d 	.word	0x0800919d
 800906c:	0800919d 	.word	0x0800919d
 8009070:	0800919d 	.word	0x0800919d
 8009074:	080090d9 	.word	0x080090d9
 8009078:	0800919d 	.word	0x0800919d
 800907c:	0800919d 	.word	0x0800919d
 8009080:	0800919d 	.word	0x0800919d
 8009084:	0800911b 	.word	0x0800911b
 8009088:	0800919d 	.word	0x0800919d
 800908c:	0800919d 	.word	0x0800919d
 8009090:	0800919d 	.word	0x0800919d
 8009094:	0800915b 	.word	0x0800915b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68b9      	ldr	r1, [r7, #8]
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 f9f2 	bl	8009488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0208 	orr.w	r2, r2, #8
 80090b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0204 	bic.w	r2, r2, #4
 80090c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6999      	ldr	r1, [r3, #24]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	691a      	ldr	r2, [r3, #16]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	619a      	str	r2, [r3, #24]
      break;
 80090d6:	e062      	b.n	800919e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fa42 	bl	8009568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6999      	ldr	r1, [r3, #24]
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	021a      	lsls	r2, r3, #8
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	619a      	str	r2, [r3, #24]
      break;
 8009118:	e041      	b.n	800919e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fa95 	bl	8009650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69da      	ldr	r2, [r3, #28]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 0208 	orr.w	r2, r2, #8
 8009134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69da      	ldr	r2, [r3, #28]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0204 	bic.w	r2, r2, #4
 8009144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69d9      	ldr	r1, [r3, #28]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	61da      	str	r2, [r3, #28]
      break;
 8009158:	e021      	b.n	800919e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68b9      	ldr	r1, [r7, #8]
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fae9 	bl	8009738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69da      	ldr	r2, [r3, #28]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69d9      	ldr	r1, [r3, #28]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	021a      	lsls	r2, r3, #8
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	61da      	str	r2, [r3, #28]
      break;
 800919a:	e000      	b.n	800919e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800919c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d101      	bne.n	80091c8 <HAL_TIM_ConfigClockSource+0x18>
 80091c4:	2302      	movs	r3, #2
 80091c6:	e0b3      	b.n	8009330 <HAL_TIM_ConfigClockSource+0x180>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009200:	d03e      	beq.n	8009280 <HAL_TIM_ConfigClockSource+0xd0>
 8009202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009206:	f200 8087 	bhi.w	8009318 <HAL_TIM_ConfigClockSource+0x168>
 800920a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920e:	f000 8085 	beq.w	800931c <HAL_TIM_ConfigClockSource+0x16c>
 8009212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009216:	d87f      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x168>
 8009218:	2b70      	cmp	r3, #112	; 0x70
 800921a:	d01a      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0xa2>
 800921c:	2b70      	cmp	r3, #112	; 0x70
 800921e:	d87b      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x168>
 8009220:	2b60      	cmp	r3, #96	; 0x60
 8009222:	d050      	beq.n	80092c6 <HAL_TIM_ConfigClockSource+0x116>
 8009224:	2b60      	cmp	r3, #96	; 0x60
 8009226:	d877      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x168>
 8009228:	2b50      	cmp	r3, #80	; 0x50
 800922a:	d03c      	beq.n	80092a6 <HAL_TIM_ConfigClockSource+0xf6>
 800922c:	2b50      	cmp	r3, #80	; 0x50
 800922e:	d873      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x168>
 8009230:	2b40      	cmp	r3, #64	; 0x40
 8009232:	d058      	beq.n	80092e6 <HAL_TIM_ConfigClockSource+0x136>
 8009234:	2b40      	cmp	r3, #64	; 0x40
 8009236:	d86f      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x168>
 8009238:	2b30      	cmp	r3, #48	; 0x30
 800923a:	d064      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x156>
 800923c:	2b30      	cmp	r3, #48	; 0x30
 800923e:	d86b      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x168>
 8009240:	2b20      	cmp	r3, #32
 8009242:	d060      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x156>
 8009244:	2b20      	cmp	r3, #32
 8009246:	d867      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x168>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d05c      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x156>
 800924c:	2b10      	cmp	r3, #16
 800924e:	d05a      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009250:	e062      	b.n	8009318 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	6899      	ldr	r1, [r3, #8]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f000 fb34 	bl	80098ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009274:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	609a      	str	r2, [r3, #8]
      break;
 800927e:	e04e      	b.n	800931e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	6899      	ldr	r1, [r3, #8]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f000 fb1d 	bl	80098ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689a      	ldr	r2, [r3, #8]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092a2:	609a      	str	r2, [r3, #8]
      break;
 80092a4:	e03b      	b.n	800931e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6818      	ldr	r0, [r3, #0]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	6859      	ldr	r1, [r3, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f000 fa94 	bl	80097e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2150      	movs	r1, #80	; 0x50
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 faeb 	bl	800989a <TIM_ITRx_SetConfig>
      break;
 80092c4:	e02b      	b.n	800931e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	6859      	ldr	r1, [r3, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f000 fab2 	bl	800983c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2160      	movs	r1, #96	; 0x60
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fadb 	bl	800989a <TIM_ITRx_SetConfig>
      break;
 80092e4:	e01b      	b.n	800931e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6859      	ldr	r1, [r3, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	461a      	mov	r2, r3
 80092f4:	f000 fa74 	bl	80097e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2140      	movs	r1, #64	; 0x40
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 facb 	bl	800989a <TIM_ITRx_SetConfig>
      break;
 8009304:	e00b      	b.n	800931e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4619      	mov	r1, r3
 8009310:	4610      	mov	r0, r2
 8009312:	f000 fac2 	bl	800989a <TIM_ITRx_SetConfig>
        break;
 8009316:	e002      	b.n	800931e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009318:	bf00      	nop
 800931a:	e000      	b.n	800931e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800931c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr

0800934a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009352:	bf00      	nop
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	bc80      	pop	{r7}
 800936c:	4770      	bx	lr

0800936e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	bc80      	pop	{r7}
 800937e:	4770      	bx	lr

08009380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr
	...

08009394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a33      	ldr	r2, [pc, #204]	; (8009474 <TIM_Base_SetConfig+0xe0>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d013      	beq.n	80093d4 <TIM_Base_SetConfig+0x40>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a32      	ldr	r2, [pc, #200]	; (8009478 <TIM_Base_SetConfig+0xe4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d00f      	beq.n	80093d4 <TIM_Base_SetConfig+0x40>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ba:	d00b      	beq.n	80093d4 <TIM_Base_SetConfig+0x40>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a2f      	ldr	r2, [pc, #188]	; (800947c <TIM_Base_SetConfig+0xe8>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d007      	beq.n	80093d4 <TIM_Base_SetConfig+0x40>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a2e      	ldr	r2, [pc, #184]	; (8009480 <TIM_Base_SetConfig+0xec>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d003      	beq.n	80093d4 <TIM_Base_SetConfig+0x40>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a2d      	ldr	r2, [pc, #180]	; (8009484 <TIM_Base_SetConfig+0xf0>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d108      	bne.n	80093e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a22      	ldr	r2, [pc, #136]	; (8009474 <TIM_Base_SetConfig+0xe0>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d013      	beq.n	8009416 <TIM_Base_SetConfig+0x82>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a21      	ldr	r2, [pc, #132]	; (8009478 <TIM_Base_SetConfig+0xe4>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d00f      	beq.n	8009416 <TIM_Base_SetConfig+0x82>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d00b      	beq.n	8009416 <TIM_Base_SetConfig+0x82>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a1e      	ldr	r2, [pc, #120]	; (800947c <TIM_Base_SetConfig+0xe8>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d007      	beq.n	8009416 <TIM_Base_SetConfig+0x82>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a1d      	ldr	r2, [pc, #116]	; (8009480 <TIM_Base_SetConfig+0xec>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d003      	beq.n	8009416 <TIM_Base_SetConfig+0x82>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a1c      	ldr	r2, [pc, #112]	; (8009484 <TIM_Base_SetConfig+0xf0>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d108      	bne.n	8009428 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800941c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	4313      	orrs	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	4313      	orrs	r3, r2
 8009434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a09      	ldr	r2, [pc, #36]	; (8009474 <TIM_Base_SetConfig+0xe0>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d003      	beq.n	800945c <TIM_Base_SetConfig+0xc8>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a08      	ldr	r2, [pc, #32]	; (8009478 <TIM_Base_SetConfig+0xe4>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d103      	bne.n	8009464 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	691a      	ldr	r2, [r3, #16]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	615a      	str	r2, [r3, #20]
}
 800946a:	bf00      	nop
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	bc80      	pop	{r7}
 8009472:	4770      	bx	lr
 8009474:	40012c00 	.word	0x40012c00
 8009478:	40013400 	.word	0x40013400
 800947c:	40000400 	.word	0x40000400
 8009480:	40000800 	.word	0x40000800
 8009484:	40000c00 	.word	0x40000c00

08009488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	f023 0201 	bic.w	r2, r3, #1
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f023 0303 	bic.w	r3, r3, #3
 80094be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f023 0302 	bic.w	r3, r3, #2
 80094d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	4313      	orrs	r3, r2
 80094da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a20      	ldr	r2, [pc, #128]	; (8009560 <TIM_OC1_SetConfig+0xd8>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d003      	beq.n	80094ec <TIM_OC1_SetConfig+0x64>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a1f      	ldr	r2, [pc, #124]	; (8009564 <TIM_OC1_SetConfig+0xdc>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d10c      	bne.n	8009506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f023 0308 	bic.w	r3, r3, #8
 80094f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f023 0304 	bic.w	r3, r3, #4
 8009504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a15      	ldr	r2, [pc, #84]	; (8009560 <TIM_OC1_SetConfig+0xd8>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d003      	beq.n	8009516 <TIM_OC1_SetConfig+0x8e>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a14      	ldr	r2, [pc, #80]	; (8009564 <TIM_OC1_SetConfig+0xdc>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d111      	bne.n	800953a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800951c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4313      	orrs	r3, r2
 800952e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	4313      	orrs	r3, r2
 8009538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	621a      	str	r2, [r3, #32]
}
 8009554:	bf00      	nop
 8009556:	371c      	adds	r7, #28
 8009558:	46bd      	mov	sp, r7
 800955a:	bc80      	pop	{r7}
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	40012c00 	.word	0x40012c00
 8009564:	40013400 	.word	0x40013400

08009568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009568:	b480      	push	{r7}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	f023 0210 	bic.w	r2, r3, #16
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800959e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	021b      	lsls	r3, r3, #8
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f023 0320 	bic.w	r3, r3, #32
 80095b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	4313      	orrs	r3, r2
 80095be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a21      	ldr	r2, [pc, #132]	; (8009648 <TIM_OC2_SetConfig+0xe0>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d003      	beq.n	80095d0 <TIM_OC2_SetConfig+0x68>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a20      	ldr	r2, [pc, #128]	; (800964c <TIM_OC2_SetConfig+0xe4>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d10d      	bne.n	80095ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	011b      	lsls	r3, r3, #4
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a16      	ldr	r2, [pc, #88]	; (8009648 <TIM_OC2_SetConfig+0xe0>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d003      	beq.n	80095fc <TIM_OC2_SetConfig+0x94>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a15      	ldr	r2, [pc, #84]	; (800964c <TIM_OC2_SetConfig+0xe4>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d113      	bne.n	8009624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800960a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	4313      	orrs	r3, r2
 8009616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	621a      	str	r2, [r3, #32]
}
 800963e:	bf00      	nop
 8009640:	371c      	adds	r7, #28
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr
 8009648:	40012c00 	.word	0x40012c00
 800964c:	40013400 	.word	0x40013400

08009650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009650:	b480      	push	{r7}
 8009652:	b087      	sub	sp, #28
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f023 0303 	bic.w	r3, r3, #3
 8009686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	4313      	orrs	r3, r2
 8009690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	021b      	lsls	r3, r3, #8
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a21      	ldr	r2, [pc, #132]	; (8009730 <TIM_OC3_SetConfig+0xe0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d003      	beq.n	80096b6 <TIM_OC3_SetConfig+0x66>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a20      	ldr	r2, [pc, #128]	; (8009734 <TIM_OC3_SetConfig+0xe4>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d10d      	bne.n	80096d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	021b      	lsls	r3, r3, #8
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a16      	ldr	r2, [pc, #88]	; (8009730 <TIM_OC3_SetConfig+0xe0>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d003      	beq.n	80096e2 <TIM_OC3_SetConfig+0x92>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a15      	ldr	r2, [pc, #84]	; (8009734 <TIM_OC3_SetConfig+0xe4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d113      	bne.n	800970a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	011b      	lsls	r3, r3, #4
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	4313      	orrs	r3, r2
 8009708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	621a      	str	r2, [r3, #32]
}
 8009724:	bf00      	nop
 8009726:	371c      	adds	r7, #28
 8009728:	46bd      	mov	sp, r7
 800972a:	bc80      	pop	{r7}
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	40012c00 	.word	0x40012c00
 8009734:	40013400 	.word	0x40013400

08009738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800976e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	021b      	lsls	r3, r3, #8
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4313      	orrs	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	031b      	lsls	r3, r3, #12
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a11      	ldr	r2, [pc, #68]	; (80097d8 <TIM_OC4_SetConfig+0xa0>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d003      	beq.n	80097a0 <TIM_OC4_SetConfig+0x68>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a10      	ldr	r2, [pc, #64]	; (80097dc <TIM_OC4_SetConfig+0xa4>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d109      	bne.n	80097b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	019b      	lsls	r3, r3, #6
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	621a      	str	r2, [r3, #32]
}
 80097ce:	bf00      	nop
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bc80      	pop	{r7}
 80097d6:	4770      	bx	lr
 80097d8:	40012c00 	.word	0x40012c00
 80097dc:	40013400 	.word	0x40013400

080097e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	f023 0201 	bic.w	r2, r3, #1
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800980a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	4313      	orrs	r3, r2
 8009814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f023 030a 	bic.w	r3, r3, #10
 800981c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	4313      	orrs	r3, r2
 8009824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	621a      	str	r2, [r3, #32]
}
 8009832:	bf00      	nop
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	bc80      	pop	{r7}
 800983a:	4770      	bx	lr

0800983c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	f023 0210 	bic.w	r2, r3, #16
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009866:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	031b      	lsls	r3, r3, #12
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	4313      	orrs	r3, r2
 8009870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009878:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	011b      	lsls	r3, r3, #4
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	621a      	str	r2, [r3, #32]
}
 8009890:	bf00      	nop
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	bc80      	pop	{r7}
 8009898:	4770      	bx	lr

0800989a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	f043 0307 	orr.w	r3, r3, #7
 80098bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	609a      	str	r2, [r3, #8]
}
 80098c4:	bf00      	nop
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bc80      	pop	{r7}
 80098cc:	4770      	bx	lr

080098ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b087      	sub	sp, #28
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	607a      	str	r2, [r7, #4]
 80098da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	021a      	lsls	r2, r3, #8
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	431a      	orrs	r2, r3
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	609a      	str	r2, [r3, #8]
}
 8009902:	bf00      	nop
 8009904:	371c      	adds	r7, #28
 8009906:	46bd      	mov	sp, r7
 8009908:	bc80      	pop	{r7}
 800990a:	4770      	bx	lr

0800990c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800991c:	2b01      	cmp	r3, #1
 800991e:	d101      	bne.n	8009924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009920:	2302      	movs	r3, #2
 8009922:	e050      	b.n	80099c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800994a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	4313      	orrs	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a1b      	ldr	r2, [pc, #108]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d018      	beq.n	800999a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a19      	ldr	r2, [pc, #100]	; (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d013      	beq.n	800999a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997a:	d00e      	beq.n	800999a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a15      	ldr	r2, [pc, #84]	; (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d009      	beq.n	800999a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a14      	ldr	r2, [pc, #80]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d004      	beq.n	800999a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a12      	ldr	r2, [pc, #72]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d10c      	bne.n	80099b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bc80      	pop	{r7}
 80099ce:	4770      	bx	lr
 80099d0:	40012c00 	.word	0x40012c00
 80099d4:	40013400 	.word	0x40013400
 80099d8:	40000400 	.word	0x40000400
 80099dc:	40000800 	.word	0x40000800
 80099e0:	40000c00 	.word	0x40000c00

080099e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d101      	bne.n	8009a00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80099fc:	2302      	movs	r3, #2
 80099fe:	e03d      	b.n	8009a7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bc80      	pop	{r7}
 8009a84:	4770      	bx	lr

08009a86 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a8e:	bf00      	nop
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bc80      	pop	{r7}
 8009a96:	4770      	bx	lr

08009a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bc80      	pop	{r7}
 8009aa8:	4770      	bx	lr

08009aaa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e03f      	b.n	8009b3c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d106      	bne.n	8009ad6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7f8 fa7d 	bl	8001fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2224      	movs	r2, #36	; 0x24
 8009ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009aec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fa5c 	bl	8009fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691a      	ldr	r2, [r3, #16]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695a      	ldr	r2, [r3, #20]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f003 030f 	and.w	r3, r3, #15
 8009b72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10d      	bne.n	8009b96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	f003 0320 	and.w	r3, r3, #32
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d008      	beq.n	8009b96 <HAL_UART_IRQHandler+0x52>
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	f003 0320 	and.w	r3, r3, #32
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f98b 	bl	8009eaa <UART_Receive_IT>
      return;
 8009b94:	e0d0      	b.n	8009d38 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 80b0 	beq.w	8009cfe <HAL_UART_IRQHandler+0x1ba>
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d105      	bne.n	8009bb4 <HAL_UART_IRQHandler+0x70>
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80a5 	beq.w	8009cfe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <HAL_UART_IRQHandler+0x90>
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d005      	beq.n	8009bd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bcc:	f043 0201 	orr.w	r2, r3, #1
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <HAL_UART_IRQHandler+0xb0>
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d005      	beq.n	8009bf4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bec:	f043 0202 	orr.w	r2, r3, #2
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00a      	beq.n	8009c14 <HAL_UART_IRQHandler+0xd0>
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0c:	f043 0204 	orr.w	r2, r3, #4
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f003 0308 	and.w	r3, r3, #8
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00f      	beq.n	8009c3e <HAL_UART_IRQHandler+0xfa>
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d104      	bne.n	8009c32 <HAL_UART_IRQHandler+0xee>
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c36:	f043 0208 	orr.w	r2, r3, #8
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d077      	beq.n	8009d36 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	f003 0320 	and.w	r3, r3, #32
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <HAL_UART_IRQHandler+0x11c>
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f925 	bl	8009eaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	bf14      	ite	ne
 8009c6e:	2301      	movne	r3, #1
 8009c70:	2300      	moveq	r3, #0
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7a:	f003 0308 	and.w	r3, r3, #8
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d102      	bne.n	8009c88 <HAL_UART_IRQHandler+0x144>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d031      	beq.n	8009cec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f876 	bl	8009d7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d023      	beq.n	8009ce4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	695a      	ldr	r2, [r3, #20]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009caa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d013      	beq.n	8009cdc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb8:	4a21      	ldr	r2, [pc, #132]	; (8009d40 <HAL_UART_IRQHandler+0x1fc>)
 8009cba:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fb fbf7 	bl	80054b4 <HAL_DMA_Abort_IT>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d016      	beq.n	8009cfa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cda:	e00e      	b.n	8009cfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f843 	bl	8009d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce2:	e00a      	b.n	8009cfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f83f 	bl	8009d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cea:	e006      	b.n	8009cfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f83b 	bl	8009d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009cf8:	e01d      	b.n	8009d36 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfa:	bf00      	nop
    return;
 8009cfc:	e01b      	b.n	8009d36 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d008      	beq.n	8009d1a <HAL_UART_IRQHandler+0x1d6>
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f862 	bl	8009ddc <UART_Transmit_IT>
    return;
 8009d18:	e00e      	b.n	8009d38 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d009      	beq.n	8009d38 <HAL_UART_IRQHandler+0x1f4>
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d004      	beq.n	8009d38 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f8a3 	bl	8009e7a <UART_EndTransmit_IT>
    return;
 8009d34:	e000      	b.n	8009d38 <HAL_UART_IRQHandler+0x1f4>
    return;
 8009d36:	bf00      	nop
  }
}
 8009d38:	3720      	adds	r7, #32
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	08009db5 	.word	0x08009db5

08009d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bc80      	pop	{r7}
 8009d54:	4770      	bx	lr

08009d56 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b083      	sub	sp, #12
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d5e:	bf00      	nop
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bc80      	pop	{r7}
 8009d66:	4770      	bx	lr

08009d68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bc80      	pop	{r7}
 8009d78:	4770      	bx	lr

08009d7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	695a      	ldr	r2, [r3, #20]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 0201 	bic.w	r2, r2, #1
 8009da0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2220      	movs	r2, #32
 8009da6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009daa:	bf00      	nop
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bc80      	pop	{r7}
 8009db2:	4770      	bx	lr

08009db4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f7ff ffca 	bl	8009d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dd4:	bf00      	nop
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b21      	cmp	r3, #33	; 0x21
 8009dee:	d13e      	bne.n	8009e6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df8:	d114      	bne.n	8009e24 <UART_Transmit_IT+0x48>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d110      	bne.n	8009e24 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a1b      	ldr	r3, [r3, #32]
 8009e1c:	1c9a      	adds	r2, r3, #2
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	621a      	str	r2, [r3, #32]
 8009e22:	e008      	b.n	8009e36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	1c59      	adds	r1, r3, #1
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	6211      	str	r1, [r2, #32]
 8009e2e:	781a      	ldrb	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	4619      	mov	r1, r3
 8009e44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10f      	bne.n	8009e6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68da      	ldr	r2, [r3, #12]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e000      	b.n	8009e70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e6e:	2302      	movs	r3, #2
  }
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bc80      	pop	{r7}
 8009e78:	4770      	bx	lr

08009e7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68da      	ldr	r2, [r3, #12]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2220      	movs	r2, #32
 8009e96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff ff52 	bl	8009d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b22      	cmp	r3, #34	; 0x22
 8009ebc:	d170      	bne.n	8009fa0 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec6:	d117      	bne.n	8009ef8 <UART_Receive_IT+0x4e>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d113      	bne.n	8009ef8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef0:	1c9a      	adds	r2, r3, #2
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	629a      	str	r2, [r3, #40]	; 0x28
 8009ef6:	e026      	b.n	8009f46 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0a:	d007      	beq.n	8009f1c <UART_Receive_IT+0x72>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <UART_Receive_IT+0x80>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d106      	bne.n	8009f2a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	701a      	strb	r2, [r3, #0]
 8009f28:	e008      	b.n	8009f3c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	4619      	mov	r1, r3
 8009f54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d120      	bne.n	8009f9c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68da      	ldr	r2, [r3, #12]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0220 	bic.w	r2, r2, #32
 8009f68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68da      	ldr	r2, [r3, #12]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	695a      	ldr	r2, [r3, #20]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0201 	bic.w	r2, r2, #1
 8009f88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff fedf 	bl	8009d56 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e002      	b.n	8009fa2 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e000      	b.n	8009fa2 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8009fa0:	2302      	movs	r3, #2
  }
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009fe6:	f023 030c 	bic.w	r3, r3, #12
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	6812      	ldr	r2, [r2, #0]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	699a      	ldr	r2, [r3, #24]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a2c      	ldr	r2, [pc, #176]	; (800a0c0 <UART_SetConfig+0x114>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d103      	bne.n	800a01c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a014:	f7fc fca4 	bl	8006960 <HAL_RCC_GetPCLK2Freq>
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	e002      	b.n	800a022 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a01c:	f7fc fc8c 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 800a020:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	4613      	mov	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	009a      	lsls	r2, r3, #2
 800a02c:	441a      	add	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	fbb2 f3f3 	udiv	r3, r2, r3
 800a038:	4a22      	ldr	r2, [pc, #136]	; (800a0c4 <UART_SetConfig+0x118>)
 800a03a:	fba2 2303 	umull	r2, r3, r2, r3
 800a03e:	095b      	lsrs	r3, r3, #5
 800a040:	0119      	lsls	r1, r3, #4
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	4613      	mov	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	009a      	lsls	r2, r3, #2
 800a04c:	441a      	add	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	fbb2 f2f3 	udiv	r2, r2, r3
 800a058:	4b1a      	ldr	r3, [pc, #104]	; (800a0c4 <UART_SetConfig+0x118>)
 800a05a:	fba3 0302 	umull	r0, r3, r3, r2
 800a05e:	095b      	lsrs	r3, r3, #5
 800a060:	2064      	movs	r0, #100	; 0x64
 800a062:	fb00 f303 	mul.w	r3, r0, r3
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	3332      	adds	r3, #50	; 0x32
 800a06c:	4a15      	ldr	r2, [pc, #84]	; (800a0c4 <UART_SetConfig+0x118>)
 800a06e:	fba2 2303 	umull	r2, r3, r2, r3
 800a072:	095b      	lsrs	r3, r3, #5
 800a074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a078:	4419      	add	r1, r3
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009a      	lsls	r2, r3, #2
 800a084:	441a      	add	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a090:	4b0c      	ldr	r3, [pc, #48]	; (800a0c4 <UART_SetConfig+0x118>)
 800a092:	fba3 0302 	umull	r0, r3, r3, r2
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	2064      	movs	r0, #100	; 0x64
 800a09a:	fb00 f303 	mul.w	r3, r0, r3
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	011b      	lsls	r3, r3, #4
 800a0a2:	3332      	adds	r3, #50	; 0x32
 800a0a4:	4a07      	ldr	r2, [pc, #28]	; (800a0c4 <UART_SetConfig+0x118>)
 800a0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0aa:	095b      	lsrs	r3, r3, #5
 800a0ac:	f003 020f 	and.w	r2, r3, #15
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	440a      	add	r2, r1
 800a0b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a0b8:	bf00      	nop
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	40013800 	.word	0x40013800
 800a0c4:	51eb851f 	.word	0x51eb851f

0800a0c8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	6812      	ldr	r2, [r2, #0]
 800a0e0:	f023 0101 	bic.w	r1, r3, #1
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	2b08      	cmp	r3, #8
 800a0f0:	d102      	bne.n	800a0f8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a0f2:	2340      	movs	r3, #64	; 0x40
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	e001      	b.n	800a0fc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a108:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a10e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a114:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a11a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800a120:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800a126:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800a12c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800a132:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800a138:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800a13e:	4313      	orrs	r3, r2
 800a140:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4313      	orrs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800a156:	4b10      	ldr	r3, [pc, #64]	; (800a198 <FSMC_NORSRAM_Init+0xd0>)
 800a158:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a160:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a168:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	43db      	mvns	r3, r3
 800a178:	ea02 0103 	and.w	r1, r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	4319      	orrs	r1, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	371c      	adds	r7, #28
 800a190:	46bd      	mov	sp, r7
 800a192:	bc80      	pop	{r7}
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	0008fb7f 	.word	0x0008fb7f

0800a19c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	1c5a      	adds	r2, r3, #1
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	011b      	lsls	r3, r3, #4
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	041b      	lsls	r3, r3, #16
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	051b      	lsls	r3, r3, #20
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	3b02      	subs	r3, #2
 800a1e2:	061b      	lsls	r3, r3, #24
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	3201      	adds	r2, #1
 800a1f0:	4319      	orrs	r1, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bc80      	pop	{r7}
 800a202:	4770      	bx	lr

0800a204 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a218:	d11d      	bne.n	800a256 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a222:	4b13      	ldr	r3, [pc, #76]	; (800a270 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a224:	4013      	ands	r3, r2
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	6811      	ldr	r1, [r2, #0]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	6852      	ldr	r2, [r2, #4]
 800a22e:	0112      	lsls	r2, r2, #4
 800a230:	4311      	orrs	r1, r2
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	6892      	ldr	r2, [r2, #8]
 800a236:	0212      	lsls	r2, r2, #8
 800a238:	4311      	orrs	r1, r2
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	6992      	ldr	r2, [r2, #24]
 800a23e:	4311      	orrs	r1, r2
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	68d2      	ldr	r2, [r2, #12]
 800a244:	0412      	lsls	r2, r2, #16
 800a246:	430a      	orrs	r2, r1
 800a248:	ea43 0102 	orr.w	r1, r3, r2
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a254:	e005      	b.n	800a262 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a25e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	bc80      	pop	{r7}
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	cff00000 	.word	0xcff00000

0800a274 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a274:	b084      	sub	sp, #16
 800a276:	b480      	push	{r7}
 800a278:	b085      	sub	sp, #20
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	f107 001c 	add.w	r0, r7, #28
 800a282:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a28a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a28c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a28e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a292:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a296:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a29a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a29e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a2ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bc80      	pop	{r7}
 800a2c4:	b004      	add	sp, #16
 800a2c6:	4770      	bx	lr

0800a2c8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bc80      	pop	{r7}
 800a2de:	4770      	bx	lr

0800a2e0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bc80      	pop	{r7}
 800a2fe:	4770      	bx	lr

0800a300 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2203      	movs	r2, #3
 800a30c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a30e:	2002      	movs	r0, #2
 800a310:	f7fa fd0c 	bl	8004d2c <HAL_Delay>
  
  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0303 	and.w	r3, r3, #3
}
 800a32e:	4618      	mov	r0, r3
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	bc80      	pop	{r7}
 800a336:	4770      	bx	lr

0800a338 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a356:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a35c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a362:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4313      	orrs	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a372:	f023 030f 	bic.w	r3, r3, #15
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	431a      	orrs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	bc80      	pop	{r7}
 800a388:	4770      	bx	lr

0800a38a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	b2db      	uxtb	r3, r3
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bc80      	pop	{r7}
 800a3a0:	4770      	bx	lr

0800a3a2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b085      	sub	sp, #20
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	3314      	adds	r3, #20
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
}  
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bc80      	pop	{r7}
 800a3c4:	4770      	bx	lr

0800a3c6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3ec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a3f2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a3f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	431a      	orrs	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a410:	2300      	movs	r3, #0

}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	bc80      	pop	{r7}
 800a41a:	4770      	bx	lr

0800a41c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a42a:	2310      	movs	r3, #16
 800a42c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a42e:	2340      	movs	r3, #64	; 0x40
 800a430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a43a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a43c:	f107 0308 	add.w	r3, r7, #8
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff ff78 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a448:	f241 3288 	movw	r2, #5000	; 0x1388
 800a44c:	2110      	movs	r1, #16
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fa40 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a456:	69fb      	ldr	r3, [r7, #28]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3720      	adds	r7, #32
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a46e:	2311      	movs	r3, #17
 800a470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a472:	2340      	movs	r3, #64	; 0x40
 800a474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a476:	2300      	movs	r3, #0
 800a478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a47e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a480:	f107 0308 	add.w	r3, r7, #8
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ff56 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a48c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a490:	2111      	movs	r1, #17
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fa1e 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a49a:	69fb      	ldr	r3, [r7, #28]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3720      	adds	r7, #32
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a4b2:	2312      	movs	r3, #18
 800a4b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4b6:	2340      	movs	r3, #64	; 0x40
 800a4b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4c4:	f107 0308 	add.w	r3, r7, #8
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7ff ff34 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4d4:	2112      	movs	r1, #18
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f9fc 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a4dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4de:	69fb      	ldr	r3, [r7, #28]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3720      	adds	r7, #32
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b088      	sub	sp, #32
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a4f6:	2318      	movs	r3, #24
 800a4f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4fa:	2340      	movs	r3, #64	; 0x40
 800a4fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4fe:	2300      	movs	r3, #0
 800a500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a506:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a508:	f107 0308 	add.w	r3, r7, #8
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff ff12 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a514:	f241 3288 	movw	r2, #5000	; 0x1388
 800a518:	2118      	movs	r1, #24
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f9da 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a522:	69fb      	ldr	r3, [r7, #28]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3720      	adds	r7, #32
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b088      	sub	sp, #32
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a53a:	2319      	movs	r3, #25
 800a53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a53e:	2340      	movs	r3, #64	; 0x40
 800a540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a54a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a54c:	f107 0308 	add.w	r3, r7, #8
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff fef0 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a558:	f241 3288 	movw	r2, #5000	; 0x1388
 800a55c:	2119      	movs	r1, #25
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f9b8 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a566:	69fb      	ldr	r3, [r7, #28]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3720      	adds	r7, #32
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a578:	2300      	movs	r3, #0
 800a57a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a57c:	230c      	movs	r3, #12
 800a57e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a580:	2340      	movs	r3, #64	; 0x40
 800a582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a584:	2300      	movs	r3, #0
 800a586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a58c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a58e:	f107 0308 	add.w	r3, r7, #8
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff fecf 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a59a:	4a05      	ldr	r2, [pc, #20]	; (800a5b0 <SDMMC_CmdStopTransfer+0x40>)
 800a59c:	210c      	movs	r1, #12
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f998 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a5a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5a6:	69fb      	ldr	r3, [r7, #28]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3720      	adds	r7, #32
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	05f5e100 	.word	0x05f5e100

0800a5b4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08a      	sub	sp, #40	; 0x28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a5c4:	2307      	movs	r3, #7
 800a5c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5c8:	2340      	movs	r3, #64	; 0x40
 800a5ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5d6:	f107 0310 	add.w	r3, r7, #16
 800a5da:	4619      	mov	r1, r3
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f7ff feab 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5e6:	2107      	movs	r1, #7
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f000 f973 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a5ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3728      	adds	r7, #40	; 0x28
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b088      	sub	sp, #32
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a602:	2300      	movs	r3, #0
 800a604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a606:	2300      	movs	r3, #0
 800a608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a60a:	2300      	movs	r3, #0
 800a60c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a616:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a618:	f107 0308 	add.w	r3, r7, #8
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fe8a 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f92d 	bl	800a884 <SDMMC_GetCmdError>
 800a62a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a62c:	69fb      	ldr	r3, [r7, #28]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3720      	adds	r7, #32
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b088      	sub	sp, #32
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a63e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a642:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a644:	2308      	movs	r3, #8
 800a646:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a648:	2340      	movs	r3, #64	; 0x40
 800a64a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a64c:	2300      	movs	r3, #0
 800a64e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a654:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a656:	f107 0308 	add.w	r3, r7, #8
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7ff fe6b 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fb16 	bl	800ac94 <SDMMC_GetCmdResp7>
 800a668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a66a:	69fb      	ldr	r3, [r7, #28]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3720      	adds	r7, #32
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a682:	2337      	movs	r3, #55	; 0x37
 800a684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a686:	2340      	movs	r3, #64	; 0x40
 800a688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a692:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a694:	f107 0308 	add.w	r3, r7, #8
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff fe4c 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a4:	2137      	movs	r1, #55	; 0x37
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f914 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ae:	69fb      	ldr	r3, [r7, #28]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3720      	adds	r7, #32
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a6ce:	2329      	movs	r3, #41	; 0x29
 800a6d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6d2:	2340      	movs	r3, #64	; 0x40
 800a6d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6e0:	f107 0308 	add.w	r3, r7, #8
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff fe26 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fa23 	bl	800ab38 <SDMMC_GetCmdResp3>
 800a6f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b088      	sub	sp, #32
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a70c:	2306      	movs	r3, #6
 800a70e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a710:	2340      	movs	r3, #64	; 0x40
 800a712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a714:	2300      	movs	r3, #0
 800a716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a71c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a71e:	f107 0308 	add.w	r3, r7, #8
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff fe07 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a72a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a72e:	2106      	movs	r1, #6
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f8cf 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a738:	69fb      	ldr	r3, [r7, #28]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b088      	sub	sp, #32
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a74e:	2333      	movs	r3, #51	; 0x33
 800a750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a752:	2340      	movs	r3, #64	; 0x40
 800a754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a75a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a75e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a760:	f107 0308 	add.w	r3, r7, #8
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff fde6 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a76c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a770:	2133      	movs	r1, #51	; 0x33
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f8ae 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77a:	69fb      	ldr	r3, [r7, #28]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3720      	adds	r7, #32
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a78c:	2300      	movs	r3, #0
 800a78e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a790:	2302      	movs	r3, #2
 800a792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a794:	23c0      	movs	r3, #192	; 0xc0
 800a796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a798:	2300      	movs	r3, #0
 800a79a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a79c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7a2:	f107 0308 	add.w	r3, r7, #8
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7ff fdc5 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f97c 	bl	800aaac <SDMMC_GetCmdResp2>
 800a7b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7b6:	69fb      	ldr	r3, [r7, #28]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3720      	adds	r7, #32
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a7ce:	2309      	movs	r3, #9
 800a7d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a7d2:	23c0      	movs	r3, #192	; 0xc0
 800a7d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7e0:	f107 0308 	add.w	r3, r7, #8
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f7ff fda6 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f95d 	bl	800aaac <SDMMC_GetCmdResp2>
 800a7f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7f4:	69fb      	ldr	r3, [r7, #28]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3720      	adds	r7, #32
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b088      	sub	sp, #32
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a80c:	2303      	movs	r3, #3
 800a80e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a810:	2340      	movs	r3, #64	; 0x40
 800a812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a814:	2300      	movs	r3, #0
 800a816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a81c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a81e:	f107 0308 	add.w	r3, r7, #8
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff fd87 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	2103      	movs	r1, #3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f9bc 	bl	800abac <SDMMC_GetCmdResp6>
 800a834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a836:	69fb      	ldr	r3, [r7, #28]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3720      	adds	r7, #32
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a84e:	230d      	movs	r3, #13
 800a850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a852:	2340      	movs	r3, #64	; 0x40
 800a854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a856:	2300      	movs	r3, #0
 800a858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a85a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a85e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a860:	f107 0308 	add.w	r3, r7, #8
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff fd66 	bl	800a338 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a86c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a870:	210d      	movs	r1, #13
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f82e 	bl	800a8d4 <SDMMC_GetCmdResp1>
 800a878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a87a:	69fb      	ldr	r3, [r7, #28]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3720      	adds	r7, #32
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a884:	b490      	push	{r4, r7}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a88c:	4b0f      	ldr	r3, [pc, #60]	; (800a8cc <SDMMC_GetCmdError+0x48>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a0f      	ldr	r2, [pc, #60]	; (800a8d0 <SDMMC_GetCmdError+0x4c>)
 800a892:	fba2 2303 	umull	r2, r3, r2, r3
 800a896:	0a5b      	lsrs	r3, r3, #9
 800a898:	f241 3288 	movw	r2, #5000	; 0x1388
 800a89c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a8a0:	4623      	mov	r3, r4
 800a8a2:	1e5c      	subs	r4, r3, #1
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d102      	bne.n	800a8ae <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8ac:	e009      	b.n	800a8c2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0f2      	beq.n	800a8a0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	22c5      	movs	r2, #197	; 0xc5
 800a8be:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bc90      	pop	{r4, r7}
 800a8ca:	4770      	bx	lr
 800a8cc:	20000008 	.word	0x20000008
 800a8d0:	10624dd3 	.word	0x10624dd3

0800a8d4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a8d4:	b590      	push	{r4, r7, lr}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a8e2:	4b6f      	ldr	r3, [pc, #444]	; (800aaa0 <SDMMC_GetCmdResp1+0x1cc>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a6f      	ldr	r2, [pc, #444]	; (800aaa4 <SDMMC_GetCmdResp1+0x1d0>)
 800a8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ec:	0a5b      	lsrs	r3, r3, #9
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a8f4:	4623      	mov	r3, r4
 800a8f6:	1e5c      	subs	r4, r3, #1
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d102      	bne.n	800a902 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a900:	e0c9      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a906:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0f0      	beq.n	800a8f4 <SDMMC_GetCmdResp1+0x20>
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1eb      	bne.n	800a8f4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b00      	cmp	r3, #0
 800a926:	d004      	beq.n	800a932 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2204      	movs	r2, #4
 800a92c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a92e:	2304      	movs	r3, #4
 800a930:	e0b1      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d004      	beq.n	800a948 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2201      	movs	r2, #1
 800a942:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a944:	2301      	movs	r3, #1
 800a946:	e0a6      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	22c5      	movs	r2, #197	; 0xc5
 800a94c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7ff fd1b 	bl	800a38a <SDIO_GetCommandResponse>
 800a954:	4603      	mov	r3, r0
 800a956:	461a      	mov	r2, r3
 800a958:	7afb      	ldrb	r3, [r7, #11]
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d001      	beq.n	800a962 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a95e:	2301      	movs	r3, #1
 800a960:	e099      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a962:	2100      	movs	r1, #0
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7ff fd1c 	bl	800a3a2 <SDIO_GetResponse>
 800a96a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	4b4e      	ldr	r3, [pc, #312]	; (800aaa8 <SDMMC_GetCmdResp1+0x1d4>)
 800a970:	4013      	ands	r3, r2
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a976:	2300      	movs	r3, #0
 800a978:	e08d      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	da02      	bge.n	800a986 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a984:	e087      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a990:	2340      	movs	r3, #64	; 0x40
 800a992:	e080      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a99e:	2380      	movs	r3, #128	; 0x80
 800a9a0:	e079      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a9ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9b0:	e071      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a9bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9c0:	e069      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9d0:	e061      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a9dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9e0:	e059      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a9ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9f0:	e051      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa00:	e049      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aa0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa10:	e041      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800aa1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa20:	e039      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aa2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aa30:	e031      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aa3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa40:	e029      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aa4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa50:	e021      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d002      	beq.n	800aa62 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aa5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aa60:	e019      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aa6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa70:	e011      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aa7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa80:	e009      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	f003 0308 	and.w	r3, r3, #8
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aa8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aa90:	e001      	b.n	800aa96 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aa92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	371c      	adds	r7, #28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd90      	pop	{r4, r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000008 	.word	0x20000008
 800aaa4:	10624dd3 	.word	0x10624dd3
 800aaa8:	fdffe008 	.word	0xfdffe008

0800aaac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800aaac:	b490      	push	{r4, r7}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aab4:	4b1e      	ldr	r3, [pc, #120]	; (800ab30 <SDMMC_GetCmdResp2+0x84>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a1e      	ldr	r2, [pc, #120]	; (800ab34 <SDMMC_GetCmdResp2+0x88>)
 800aaba:	fba2 2303 	umull	r2, r3, r2, r3
 800aabe:	0a5b      	lsrs	r3, r3, #9
 800aac0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aac8:	4623      	mov	r3, r4
 800aaca:	1e5c      	subs	r4, r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aad0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aad4:	e026      	b.n	800ab24 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aada:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0f0      	beq.n	800aac8 <SDMMC_GetCmdResp2+0x1c>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1eb      	bne.n	800aac8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d004      	beq.n	800ab06 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2204      	movs	r2, #4
 800ab00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab02:	2304      	movs	r3, #4
 800ab04:	e00e      	b.n	800ab24 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d004      	beq.n	800ab1c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e003      	b.n	800ab24 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	22c5      	movs	r2, #197	; 0xc5
 800ab20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bc90      	pop	{r4, r7}
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	20000008 	.word	0x20000008
 800ab34:	10624dd3 	.word	0x10624dd3

0800ab38 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ab38:	b490      	push	{r4, r7}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab40:	4b18      	ldr	r3, [pc, #96]	; (800aba4 <SDMMC_GetCmdResp3+0x6c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a18      	ldr	r2, [pc, #96]	; (800aba8 <SDMMC_GetCmdResp3+0x70>)
 800ab46:	fba2 2303 	umull	r2, r3, r2, r3
 800ab4a:	0a5b      	lsrs	r3, r3, #9
 800ab4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ab54:	4623      	mov	r3, r4
 800ab56:	1e5c      	subs	r4, r3, #1
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d102      	bne.n	800ab62 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab60:	e01b      	b.n	800ab9a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab66:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0f0      	beq.n	800ab54 <SDMMC_GetCmdResp3+0x1c>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1eb      	bne.n	800ab54 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab80:	f003 0304 	and.w	r3, r3, #4
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d004      	beq.n	800ab92 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2204      	movs	r2, #4
 800ab8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab8e:	2304      	movs	r3, #4
 800ab90:	e003      	b.n	800ab9a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	22c5      	movs	r2, #197	; 0xc5
 800ab96:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bc90      	pop	{r4, r7}
 800aba2:	4770      	bx	lr
 800aba4:	20000008 	.word	0x20000008
 800aba8:	10624dd3 	.word	0x10624dd3

0800abac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	460b      	mov	r3, r1
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abba:	4b34      	ldr	r3, [pc, #208]	; (800ac8c <SDMMC_GetCmdResp6+0xe0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a34      	ldr	r2, [pc, #208]	; (800ac90 <SDMMC_GetCmdResp6+0xe4>)
 800abc0:	fba2 2303 	umull	r2, r3, r2, r3
 800abc4:	0a5b      	lsrs	r3, r3, #9
 800abc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800abca:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800abce:	4623      	mov	r3, r4
 800abd0:	1e5c      	subs	r4, r3, #1
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abda:	e052      	b.n	800ac82 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0f0      	beq.n	800abce <SDMMC_GetCmdResp6+0x22>
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1eb      	bne.n	800abce <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfa:	f003 0304 	and.w	r3, r3, #4
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2204      	movs	r2, #4
 800ac06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac08:	2304      	movs	r3, #4
 800ac0a:	e03a      	b.n	800ac82 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d004      	beq.n	800ac22 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e02f      	b.n	800ac82 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f7ff fbb1 	bl	800a38a <SDIO_GetCommandResponse>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d001      	beq.n	800ac36 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e025      	b.n	800ac82 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	22c5      	movs	r2, #197	; 0xc5
 800ac3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7ff fbaf 	bl	800a3a2 <SDIO_GetResponse>
 800ac44:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d106      	bne.n	800ac5e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	0c1b      	lsrs	r3, r3, #16
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e011      	b.n	800ac82 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac6c:	e009      	b.n	800ac82 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac7c:	e001      	b.n	800ac82 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd90      	pop	{r4, r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20000008 	.word	0x20000008
 800ac90:	10624dd3 	.word	0x10624dd3

0800ac94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ac94:	b490      	push	{r4, r7}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac9c:	4b21      	ldr	r3, [pc, #132]	; (800ad24 <SDMMC_GetCmdResp7+0x90>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a21      	ldr	r2, [pc, #132]	; (800ad28 <SDMMC_GetCmdResp7+0x94>)
 800aca2:	fba2 2303 	umull	r2, r3, r2, r3
 800aca6:	0a5b      	lsrs	r3, r3, #9
 800aca8:	f241 3288 	movw	r2, #5000	; 0x1388
 800acac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800acb0:	4623      	mov	r3, r4
 800acb2:	1e5c      	subs	r4, r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acbc:	e02c      	b.n	800ad18 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0f0      	beq.n	800acb0 <SDMMC_GetCmdResp7+0x1c>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1eb      	bne.n	800acb0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d004      	beq.n	800acee <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2204      	movs	r2, #4
 800ace8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acea:	2304      	movs	r3, #4
 800acec:	e014      	b.n	800ad18 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d004      	beq.n	800ad04 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2201      	movs	r2, #1
 800acfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e009      	b.n	800ad18 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2240      	movs	r2, #64	; 0x40
 800ad14:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ad16:	2300      	movs	r3, #0
  
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bc90      	pop	{r4, r7}
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	20000008 	.word	0x20000008
 800ad28:	10624dd3 	.word	0x10624dd3

0800ad2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ad30:	4904      	ldr	r1, [pc, #16]	; (800ad44 <MX_FATFS_Init+0x18>)
 800ad32:	4805      	ldr	r0, [pc, #20]	; (800ad48 <MX_FATFS_Init+0x1c>)
 800ad34:	f003 fa98 	bl	800e268 <FATFS_LinkDriver>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	4b03      	ldr	r3, [pc, #12]	; (800ad4c <MX_FATFS_Init+0x20>)
 800ad3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ad40:	bf00      	nop
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20001354 	.word	0x20001354
 800ad48:	08014428 	.word	0x08014428
 800ad4c:	20001350 	.word	0x20001350

0800ad50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ad50:	b480      	push	{r7}
 800ad52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ad54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bc80      	pop	{r7}
 800ad5c:	4770      	bx	lr
	...

0800ad60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ad6a:	f000 f8a9 	bl	800aec0 <BSP_SD_IsDetected>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d001      	beq.n	800ad78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e012      	b.n	800ad9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ad78:	480b      	ldr	r0, [pc, #44]	; (800ada8 <BSP_SD_Init+0x48>)
 800ad7a:	f7fb fed9 	bl	8006b30 <HAL_SD_Init>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ad82:	79fb      	ldrb	r3, [r7, #7]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d109      	bne.n	800ad9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ad88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad8c:	4806      	ldr	r0, [pc, #24]	; (800ada8 <BSP_SD_Init+0x48>)
 800ad8e:	f7fc fe5b 	bl	8007a48 <HAL_SD_ConfigWideBusOperation>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ad9c:	79fb      	ldrb	r3, [r7, #7]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	2000105c 	.word	0x2000105c

0800adac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af02      	add	r7, sp, #8
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	68f9      	ldr	r1, [r7, #12]
 800adc8:	4806      	ldr	r0, [pc, #24]	; (800ade4 <BSP_SD_ReadBlocks+0x38>)
 800adca:	f7fb ff41 	bl	8006c50 <HAL_SD_ReadBlocks>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	2000105c 	.word	0x2000105c

0800ade8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af02      	add	r7, sp, #8
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	68f9      	ldr	r1, [r7, #12]
 800ae04:	4806      	ldr	r0, [pc, #24]	; (800ae20 <BSP_SD_WriteBlocks+0x38>)
 800ae06:	f7fc f91d 	bl	8007044 <HAL_SD_WriteBlocks>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	2000105c 	.word	0x2000105c

0800ae24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ae28:	4805      	ldr	r0, [pc, #20]	; (800ae40 <BSP_SD_GetCardState+0x1c>)
 800ae2a:	f7fc fe89 	bl	8007b40 <HAL_SD_GetCardState>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b04      	cmp	r3, #4
 800ae32:	bf14      	ite	ne
 800ae34:	2301      	movne	r3, #1
 800ae36:	2300      	moveq	r3, #0
 800ae38:	b2db      	uxtb	r3, r3
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	2000105c 	.word	0x2000105c

0800ae44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	4803      	ldr	r0, [pc, #12]	; (800ae5c <BSP_SD_GetCardInfo+0x18>)
 800ae50:	f7fc fdce 	bl	80079f0 <HAL_SD_GetCardInfo>
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	2000105c 	.word	0x2000105c

0800ae60 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ae68:	f000 f818 	bl	800ae9c <BSP_SD_AbortCallback>
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ae7c:	f000 f814 	bl	800aea8 <BSP_SD_WriteCpltCallback>
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ae90:	f000 f810 	bl	800aeb4 <BSP_SD_ReadCpltCallback>
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0

}
 800aea0:	bf00      	nop
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc80      	pop	{r7}
 800aea6:	4770      	bx	lr

0800aea8 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0

}
 800aeac:	bf00      	nop
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bc80      	pop	{r7}
 800aeb2:	4770      	bx	lr

0800aeb4 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0

}
 800aeb8:	bf00      	nop
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr

0800aec0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800aec6:	2301      	movs	r3, #1
 800aec8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800aeca:	f000 f80b 	bl	800aee4 <BSP_PlatformIsDetected>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800aed4:	2300      	movs	r3, #0
 800aed6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	b2db      	uxtb	r3, r3
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800aeea:	2301      	movs	r3, #1
 800aeec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800aeee:	2101      	movs	r1, #1
 800aef0:	4806      	ldr	r0, [pc, #24]	; (800af0c <BSP_PlatformIsDetected+0x28>)
 800aef2:	f7fa ffb7 	bl	8005e64 <HAL_GPIO_ReadPin>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800aefc:	2300      	movs	r3, #0
 800aefe:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800af00:	79fb      	ldrb	r3, [r7, #7]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	40010800 	.word	0x40010800

0800af10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	4a08      	ldr	r2, [pc, #32]	; (800af40 <disk_status+0x30>)
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	79fa      	ldrb	r2, [r7, #7]
 800af28:	4905      	ldr	r1, [pc, #20]	; (800af40 <disk_status+0x30>)
 800af2a:	440a      	add	r2, r1
 800af2c:	7a12      	ldrb	r2, [r2, #8]
 800af2e:	4610      	mov	r0, r2
 800af30:	4798      	blx	r3
 800af32:	4603      	mov	r3, r0
 800af34:	73fb      	strb	r3, [r7, #15]
  return stat;
 800af36:	7bfb      	ldrb	r3, [r7, #15]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20000100 	.word	0x20000100

0800af44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800af52:	79fb      	ldrb	r3, [r7, #7]
 800af54:	4a0d      	ldr	r2, [pc, #52]	; (800af8c <disk_initialize+0x48>)
 800af56:	5cd3      	ldrb	r3, [r2, r3]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d111      	bne.n	800af80 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800af5c:	79fb      	ldrb	r3, [r7, #7]
 800af5e:	4a0b      	ldr	r2, [pc, #44]	; (800af8c <disk_initialize+0x48>)
 800af60:	2101      	movs	r1, #1
 800af62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800af64:	79fb      	ldrb	r3, [r7, #7]
 800af66:	4a09      	ldr	r2, [pc, #36]	; (800af8c <disk_initialize+0x48>)
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	79fa      	ldrb	r2, [r7, #7]
 800af72:	4906      	ldr	r1, [pc, #24]	; (800af8c <disk_initialize+0x48>)
 800af74:	440a      	add	r2, r1
 800af76:	7a12      	ldrb	r2, [r2, #8]
 800af78:	4610      	mov	r0, r2
 800af7a:	4798      	blx	r3
 800af7c:	4603      	mov	r3, r0
 800af7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800af80:	7bfb      	ldrb	r3, [r7, #15]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	20000100 	.word	0x20000100

0800af90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800af90:	b590      	push	{r4, r7, lr}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	607a      	str	r2, [r7, #4]
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	4603      	mov	r3, r0
 800af9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
 800afa2:	4a0a      	ldr	r2, [pc, #40]	; (800afcc <disk_read+0x3c>)
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	689c      	ldr	r4, [r3, #8]
 800afac:	7bfb      	ldrb	r3, [r7, #15]
 800afae:	4a07      	ldr	r2, [pc, #28]	; (800afcc <disk_read+0x3c>)
 800afb0:	4413      	add	r3, r2
 800afb2:	7a18      	ldrb	r0, [r3, #8]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	47a0      	blx	r4
 800afbc:	4603      	mov	r3, r0
 800afbe:	75fb      	strb	r3, [r7, #23]
  return res;
 800afc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	371c      	adds	r7, #28
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd90      	pop	{r4, r7, pc}
 800afca:	bf00      	nop
 800afcc:	20000100 	.word	0x20000100

0800afd0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800afd0:	b590      	push	{r4, r7, lr}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
 800afda:	603b      	str	r3, [r7, #0]
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	4a0a      	ldr	r2, [pc, #40]	; (800b00c <disk_write+0x3c>)
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4413      	add	r3, r2
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	68dc      	ldr	r4, [r3, #12]
 800afec:	7bfb      	ldrb	r3, [r7, #15]
 800afee:	4a07      	ldr	r2, [pc, #28]	; (800b00c <disk_write+0x3c>)
 800aff0:	4413      	add	r3, r2
 800aff2:	7a18      	ldrb	r0, [r3, #8]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	68b9      	ldr	r1, [r7, #8]
 800affa:	47a0      	blx	r4
 800affc:	4603      	mov	r3, r0
 800affe:	75fb      	strb	r3, [r7, #23]
  return res;
 800b000:	7dfb      	ldrb	r3, [r7, #23]
}
 800b002:	4618      	mov	r0, r3
 800b004:	371c      	adds	r7, #28
 800b006:	46bd      	mov	sp, r7
 800b008:	bd90      	pop	{r4, r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20000100 	.word	0x20000100

0800b010 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	4603      	mov	r3, r0
 800b018:	603a      	str	r2, [r7, #0]
 800b01a:	71fb      	strb	r3, [r7, #7]
 800b01c:	460b      	mov	r3, r1
 800b01e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b020:	79fb      	ldrb	r3, [r7, #7]
 800b022:	4a09      	ldr	r2, [pc, #36]	; (800b048 <disk_ioctl+0x38>)
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	79fa      	ldrb	r2, [r7, #7]
 800b02e:	4906      	ldr	r1, [pc, #24]	; (800b048 <disk_ioctl+0x38>)
 800b030:	440a      	add	r2, r1
 800b032:	7a10      	ldrb	r0, [r2, #8]
 800b034:	79b9      	ldrb	r1, [r7, #6]
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	4798      	blx	r3
 800b03a:	4603      	mov	r3, r0
 800b03c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20000100 	.word	0x20000100

0800b04c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800b060:	e007      	b.n	800b072 <mem_cpy+0x26>
		*d++ = *s++;
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	1c53      	adds	r3, r2, #1
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	1c59      	adds	r1, r3, #1
 800b06c:	6179      	str	r1, [r7, #20]
 800b06e:	7812      	ldrb	r2, [r2, #0]
 800b070:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	1e5a      	subs	r2, r3, #1
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1f2      	bne.n	800b062 <mem_cpy+0x16>
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	bc80      	pop	{r7}
 800b086:	4770      	bx	lr

0800b088 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800b098:	e005      	b.n	800b0a6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	617a      	str	r2, [r7, #20]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	b2d2      	uxtb	r2, r2
 800b0a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	1e5a      	subs	r2, r3, #1
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1f4      	bne.n	800b09a <mem_set+0x12>
}
 800b0b0:	bf00      	nop
 800b0b2:	bf00      	nop
 800b0b4:	371c      	adds	r7, #28
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bc80      	pop	{r7}
 800b0ba:	4770      	bx	lr

0800b0bc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800b0bc:	b480      	push	{r7}
 800b0be:	b089      	sub	sp, #36	; 0x24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800b0d4:	bf00      	nop
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	1e5a      	subs	r2, r3, #1
 800b0da:	607a      	str	r2, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00d      	beq.n	800b0fc <mem_cmp+0x40>
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	61fa      	str	r2, [r7, #28]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	1c5a      	adds	r2, r3, #1
 800b0ee:	61ba      	str	r2, [r7, #24]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	1acb      	subs	r3, r1, r3
 800b0f4:	617b      	str	r3, [r7, #20]
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0ec      	beq.n	800b0d6 <mem_cmp+0x1a>
	return r;
 800b0fc:	697b      	ldr	r3, [r7, #20]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3724      	adds	r7, #36	; 0x24
 800b102:	46bd      	mov	sp, r7
 800b104:	bc80      	pop	{r7}
 800b106:	4770      	bx	lr

0800b108 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b112:	e002      	b.n	800b11a <chk_chr+0x12>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3301      	adds	r3, #1
 800b118:	607b      	str	r3, [r7, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <chk_chr+0x26>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d1f2      	bne.n	800b114 <chk_chr+0xc>
	return *str;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	781b      	ldrb	r3, [r3, #0]
}
 800b132:	4618      	mov	r0, r3
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	bc80      	pop	{r7}
 800b13a:	4770      	bx	lr

0800b13c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b146:	2300      	movs	r3, #0
 800b148:	60bb      	str	r3, [r7, #8]
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	e038      	b.n	800b1c2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800b150:	492f      	ldr	r1, [pc, #188]	; (800b210 <chk_lock+0xd4>)
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	4613      	mov	r3, r2
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	4413      	add	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	440b      	add	r3, r1
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d029      	beq.n	800b1b8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b164:	492a      	ldr	r1, [pc, #168]	; (800b210 <chk_lock+0xd4>)
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4613      	mov	r3, r2
 800b16a:	005b      	lsls	r3, r3, #1
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	440b      	add	r3, r1
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d11e      	bne.n	800b1bc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800b17e:	4924      	ldr	r1, [pc, #144]	; (800b210 <chk_lock+0xd4>)
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	4613      	mov	r3, r2
 800b184:	005b      	lsls	r3, r3, #1
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	440b      	add	r3, r1
 800b18c:	3304      	adds	r3, #4
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b196:	429a      	cmp	r2, r3
 800b198:	d110      	bne.n	800b1bc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800b19a:	491d      	ldr	r1, [pc, #116]	; (800b210 <chk_lock+0xd4>)
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	4413      	add	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	440b      	add	r3, r1
 800b1a8:	3308      	adds	r3, #8
 800b1aa:	881a      	ldrh	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d102      	bne.n	800b1bc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800b1b6:	e007      	b.n	800b1c8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d9c3      	bls.n	800b150 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d109      	bne.n	800b1e2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d102      	bne.n	800b1da <chk_lock+0x9e>
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d101      	bne.n	800b1de <chk_lock+0xa2>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	e013      	b.n	800b206 <chk_lock+0xca>
 800b1de:	2312      	movs	r3, #18
 800b1e0:	e011      	b.n	800b206 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10b      	bne.n	800b200 <chk_lock+0xc4>
 800b1e8:	4909      	ldr	r1, [pc, #36]	; (800b210 <chk_lock+0xd4>)
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	440b      	add	r3, r1
 800b1f6:	330a      	adds	r3, #10
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1fe:	d101      	bne.n	800b204 <chk_lock+0xc8>
 800b200:	2310      	movs	r3, #16
 800b202:	e000      	b.n	800b206 <chk_lock+0xca>
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bc80      	pop	{r7}
 800b20e:	4770      	bx	lr
 800b210:	200000e8 	.word	0x200000e8

0800b214 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b21a:	2300      	movs	r3, #0
 800b21c:	607b      	str	r3, [r7, #4]
 800b21e:	e002      	b.n	800b226 <enq_lock+0x12>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	3301      	adds	r3, #1
 800b224:	607b      	str	r3, [r7, #4]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d809      	bhi.n	800b240 <enq_lock+0x2c>
 800b22c:	490a      	ldr	r1, [pc, #40]	; (800b258 <enq_lock+0x44>)
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	4613      	mov	r3, r2
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	4413      	add	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	440b      	add	r3, r1
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1ef      	bne.n	800b220 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b02      	cmp	r3, #2
 800b244:	bf14      	ite	ne
 800b246:	2301      	movne	r3, #1
 800b248:	2300      	moveq	r3, #0
 800b24a:	b2db      	uxtb	r3, r3
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	bc80      	pop	{r7}
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	200000e8 	.word	0x200000e8

0800b25c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b266:	2300      	movs	r3, #0
 800b268:	60fb      	str	r3, [r7, #12]
 800b26a:	e02b      	b.n	800b2c4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800b26c:	4955      	ldr	r1, [pc, #340]	; (800b3c4 <inc_lock+0x168>)
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	4613      	mov	r3, r2
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	4413      	add	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	440b      	add	r3, r1
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b282:	429a      	cmp	r2, r3
 800b284:	d11b      	bne.n	800b2be <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800b286:	494f      	ldr	r1, [pc, #316]	; (800b3c4 <inc_lock+0x168>)
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	4613      	mov	r3, r2
 800b28c:	005b      	lsls	r3, r3, #1
 800b28e:	4413      	add	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	440b      	add	r3, r1
 800b294:	3304      	adds	r3, #4
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d10d      	bne.n	800b2be <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800b2a2:	4948      	ldr	r1, [pc, #288]	; (800b3c4 <inc_lock+0x168>)
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	4413      	add	r3, r2
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	440b      	add	r3, r1
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	881a      	ldrh	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d006      	beq.n	800b2cc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d9d0      	bls.n	800b26c <inc_lock+0x10>
 800b2ca:	e000      	b.n	800b2ce <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800b2cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d145      	bne.n	800b360 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	e002      	b.n	800b2e0 <inc_lock+0x84>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d809      	bhi.n	800b2fa <inc_lock+0x9e>
 800b2e6:	4937      	ldr	r1, [pc, #220]	; (800b3c4 <inc_lock+0x168>)
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	440b      	add	r3, r1
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1ef      	bne.n	800b2da <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	d101      	bne.n	800b304 <inc_lock+0xa8>
 800b300:	2300      	movs	r3, #0
 800b302:	e05a      	b.n	800b3ba <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800b30a:	482e      	ldr	r0, [pc, #184]	; (800b3c4 <inc_lock+0x168>)
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	4613      	mov	r3, r2
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	4413      	add	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4403      	add	r3, r0
 800b318:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800b320:	4828      	ldr	r0, [pc, #160]	; (800b3c4 <inc_lock+0x168>)
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	4613      	mov	r3, r2
 800b326:	005b      	lsls	r3, r3, #1
 800b328:	4413      	add	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4403      	add	r3, r0
 800b32e:	3304      	adds	r3, #4
 800b330:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800b338:	4922      	ldr	r1, [pc, #136]	; (800b3c4 <inc_lock+0x168>)
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4613      	mov	r3, r2
 800b33e:	005b      	lsls	r3, r3, #1
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	440b      	add	r3, r1
 800b346:	3308      	adds	r3, #8
 800b348:	4602      	mov	r2, r0
 800b34a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800b34c:	491d      	ldr	r1, [pc, #116]	; (800b3c4 <inc_lock+0x168>)
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	4613      	mov	r3, r2
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	440b      	add	r3, r1
 800b35a:	330a      	adds	r3, #10
 800b35c:	2200      	movs	r2, #0
 800b35e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00c      	beq.n	800b380 <inc_lock+0x124>
 800b366:	4917      	ldr	r1, [pc, #92]	; (800b3c4 <inc_lock+0x168>)
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4613      	mov	r3, r2
 800b36c:	005b      	lsls	r3, r3, #1
 800b36e:	4413      	add	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	440b      	add	r3, r1
 800b374:	330a      	adds	r3, #10
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <inc_lock+0x124>
 800b37c:	2300      	movs	r3, #0
 800b37e:	e01c      	b.n	800b3ba <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10b      	bne.n	800b39e <inc_lock+0x142>
 800b386:	490f      	ldr	r1, [pc, #60]	; (800b3c4 <inc_lock+0x168>)
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	4613      	mov	r3, r2
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	440b      	add	r3, r1
 800b394:	330a      	adds	r3, #10
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	b299      	uxth	r1, r3
 800b39c:	e001      	b.n	800b3a2 <inc_lock+0x146>
 800b39e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3a2:	4808      	ldr	r0, [pc, #32]	; (800b3c4 <inc_lock+0x168>)
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	4413      	add	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4403      	add	r3, r0
 800b3b0:	330a      	adds	r3, #10
 800b3b2:	460a      	mov	r2, r1
 800b3b4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	3301      	adds	r3, #1
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bc80      	pop	{r7}
 800b3c2:	4770      	bx	lr
 800b3c4:	200000e8 	.word	0x200000e8

0800b3c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	607b      	str	r3, [r7, #4]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d82e      	bhi.n	800b43a <dec_lock+0x72>
		n = Files[i].ctr;
 800b3dc:	491b      	ldr	r1, [pc, #108]	; (800b44c <dec_lock+0x84>)
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	440b      	add	r3, r1
 800b3ea:	330a      	adds	r3, #10
 800b3ec:	881b      	ldrh	r3, [r3, #0]
 800b3ee:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b3f0:	89fb      	ldrh	r3, [r7, #14]
 800b3f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3f6:	d101      	bne.n	800b3fc <dec_lock+0x34>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800b3fc:	89fb      	ldrh	r3, [r7, #14]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d002      	beq.n	800b408 <dec_lock+0x40>
 800b402:	89fb      	ldrh	r3, [r7, #14]
 800b404:	3b01      	subs	r3, #1
 800b406:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b408:	4910      	ldr	r1, [pc, #64]	; (800b44c <dec_lock+0x84>)
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	4613      	mov	r3, r2
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	4413      	add	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	440b      	add	r3, r1
 800b416:	330a      	adds	r3, #10
 800b418:	89fa      	ldrh	r2, [r7, #14]
 800b41a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b41c:	89fb      	ldrh	r3, [r7, #14]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d108      	bne.n	800b434 <dec_lock+0x6c>
 800b422:	490a      	ldr	r1, [pc, #40]	; (800b44c <dec_lock+0x84>)
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	4613      	mov	r3, r2
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	440b      	add	r3, r1
 800b430:	2200      	movs	r2, #0
 800b432:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	737b      	strb	r3, [r7, #13]
 800b438:	e001      	b.n	800b43e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b43a:	2302      	movs	r3, #2
 800b43c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b43e:	7b7b      	ldrb	r3, [r7, #13]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	bc80      	pop	{r7}
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	200000e8 	.word	0x200000e8

0800b450 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b458:	2300      	movs	r3, #0
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	e016      	b.n	800b48c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b45e:	4910      	ldr	r1, [pc, #64]	; (800b4a0 <clear_lock+0x50>)
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4613      	mov	r3, r2
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	4413      	add	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	440b      	add	r3, r1
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	429a      	cmp	r2, r3
 800b472:	d108      	bne.n	800b486 <clear_lock+0x36>
 800b474:	490a      	ldr	r1, [pc, #40]	; (800b4a0 <clear_lock+0x50>)
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	4613      	mov	r3, r2
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	4413      	add	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	440b      	add	r3, r1
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3301      	adds	r3, #1
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d9e5      	bls.n	800b45e <clear_lock+0xe>
	}
}
 800b492:	bf00      	nop
 800b494:	bf00      	nop
 800b496:	3714      	adds	r7, #20
 800b498:	46bd      	mov	sp, r7
 800b49a:	bc80      	pop	{r7}
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	200000e8 	.word	0x200000e8

0800b4a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d038      	beq.n	800b52c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b4c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	f7ff fd7f 	bl	800afd0 <disk_write>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <sync_window+0x3a>
			res = FR_DISK_ERR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	73fb      	strb	r3, [r7, #15]
 800b4dc:	e026      	b.n	800b52c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	1ad2      	subs	r2, r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d218      	bcs.n	800b52c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b500:	613b      	str	r3, [r7, #16]
 800b502:	e010      	b.n	800b526 <sync_window+0x82>
					wsect += fs->fsize;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	4413      	add	r3, r2
 800b50e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	2301      	movs	r3, #1
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	f7ff fd58 	bl	800afd0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	3b01      	subs	r3, #1
 800b524:	613b      	str	r3, [r7, #16]
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d8eb      	bhi.n	800b504 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b084      	sub	sp, #16
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d01b      	beq.n	800b588 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7ff ffa7 	bl	800b4a4 <sync_window>
 800b556:	4603      	mov	r3, r0
 800b558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d113      	bne.n	800b588 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	2301      	movs	r3, #1
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	f7ff fd10 	bl	800af90 <disk_read>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d004      	beq.n	800b580 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b576:	f04f 33ff 	mov.w	r3, #4294967295
 800b57a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800b588:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff ff82 	bl	800b4a4 <sync_window>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f040 809b 	bne.w	800b6e2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	f040 8088 	bne.w	800b6c8 <sync_fs+0x136>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	f040 8082 	bne.w	800b6c8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7ff fd5b 	bl	800b088 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2255      	movs	r2, #85	; 0x55
 800b5d6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	22aa      	movs	r2, #170	; 0xaa
 800b5de:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2252      	movs	r2, #82	; 0x52
 800b5e6:	701a      	strb	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2252      	movs	r2, #82	; 0x52
 800b5ec:	705a      	strb	r2, [r3, #1]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2261      	movs	r2, #97	; 0x61
 800b5f2:	709a      	strb	r2, [r3, #2]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2241      	movs	r2, #65	; 0x41
 800b5f8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2272      	movs	r2, #114	; 0x72
 800b5fe:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2272      	movs	r2, #114	; 0x72
 800b606:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2241      	movs	r2, #65	; 0x41
 800b60e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2261      	movs	r2, #97	; 0x61
 800b616:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b620:	b2da      	uxtb	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b62e:	b29b      	uxth	r3, r3
 800b630:	0a1b      	lsrs	r3, r3, #8
 800b632:	b29b      	uxth	r3, r3
 800b634:	b2da      	uxtb	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b642:	0c1b      	lsrs	r3, r3, #16
 800b644:	b2da      	uxtb	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b652:	0e1b      	lsrs	r3, r3, #24
 800b654:	b2da      	uxtb	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b662:	b2da      	uxtb	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b670:	b29b      	uxth	r3, r3
 800b672:	0a1b      	lsrs	r3, r3, #8
 800b674:	b29b      	uxth	r3, r3
 800b676:	b2da      	uxtb	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b684:	0c1b      	lsrs	r3, r3, #16
 800b686:	b2da      	uxtb	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b694:	0e1b      	lsrs	r3, r3, #24
 800b696:	b2da      	uxtb	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f7ff fc88 	bl	800afd0 <disk_write>
			fs->fsi_flag = 0;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fc9c 	bl	800b010 <disk_ioctl>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	3b02      	subs	r3, #2
 800b6fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b702:	3b02      	subs	r3, #2
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	429a      	cmp	r2, r3
 800b708:	d301      	bcc.n	800b70e <clust2sect+0x22>
 800b70a:	2300      	movs	r3, #0
 800b70c:	e00a      	b.n	800b724 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b714:	461a      	mov	r2, r3
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	fb03 f202 	mul.w	r2, r3, r2
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b722:	4413      	add	r3, r2
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	bc80      	pop	{r7}
 800b72c:	4770      	bx	lr

0800b72e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b086      	sub	sp, #24
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d905      	bls.n	800b74a <get_fat+0x1c>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	429a      	cmp	r2, r3
 800b748:	d302      	bcc.n	800b750 <get_fat+0x22>
		val = 1;	/* Internal error */
 800b74a:	2301      	movs	r3, #1
 800b74c:	617b      	str	r3, [r7, #20]
 800b74e:	e0a3      	b.n	800b898 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b750:	f04f 33ff 	mov.w	r3, #4294967295
 800b754:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b75c:	2b03      	cmp	r3, #3
 800b75e:	d068      	beq.n	800b832 <get_fat+0x104>
 800b760:	2b03      	cmp	r3, #3
 800b762:	f300 808f 	bgt.w	800b884 <get_fat+0x156>
 800b766:	2b01      	cmp	r3, #1
 800b768:	d002      	beq.n	800b770 <get_fat+0x42>
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d040      	beq.n	800b7f0 <get_fat+0xc2>
 800b76e:	e089      	b.n	800b884 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	60fb      	str	r3, [r7, #12]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	085b      	lsrs	r3, r3, #1
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4413      	add	r3, r2
 800b77c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	0a5b      	lsrs	r3, r3, #9
 800b788:	4413      	add	r3, r2
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7ff fed2 	bl	800b536 <move_window>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d178      	bne.n	800b88a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	1c5a      	adds	r2, r3, #1
 800b79c:	60fa      	str	r2, [r7, #12]
 800b79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	5cd3      	ldrb	r3, [r2, r3]
 800b7a6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	0a5b      	lsrs	r3, r3, #9
 800b7b2:	4413      	add	r3, r2
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7ff febd 	bl	800b536 <move_window>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d165      	bne.n	800b88e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	5cd3      	ldrb	r3, [r2, r3]
 800b7cc:	021b      	lsls	r3, r3, #8
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	f003 0301 	and.w	r3, r3, #1
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <get_fat+0xb8>
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	091b      	lsrs	r3, r3, #4
 800b7e4:	e002      	b.n	800b7ec <get_fat+0xbe>
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7ec:	617b      	str	r3, [r7, #20]
			break;
 800b7ee:	e053      	b.n	800b898 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	0a1b      	lsrs	r3, r3, #8
 800b7fa:	4413      	add	r3, r2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff fe99 	bl	800b536 <move_window>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d143      	bne.n	800b892 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	005b      	lsls	r3, r3, #1
 800b80e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	4413      	add	r3, r2
 800b816:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	3301      	adds	r3, #1
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	021b      	lsls	r3, r3, #8
 800b820:	b21a      	sxth	r2, r3
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	b21b      	sxth	r3, r3
 800b828:	4313      	orrs	r3, r2
 800b82a:	b21b      	sxth	r3, r3
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	617b      	str	r3, [r7, #20]
			break;
 800b830:	e032      	b.n	800b898 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	09db      	lsrs	r3, r3, #7
 800b83c:	4413      	add	r3, r2
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff fe78 	bl	800b536 <move_window>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d124      	bne.n	800b896 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	4413      	add	r3, r2
 800b858:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	3303      	adds	r3, #3
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	061a      	lsls	r2, r3, #24
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	3302      	adds	r3, #2
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	041b      	lsls	r3, r3, #16
 800b86a:	4313      	orrs	r3, r2
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	3201      	adds	r2, #1
 800b870:	7812      	ldrb	r2, [r2, #0]
 800b872:	0212      	lsls	r2, r2, #8
 800b874:	4313      	orrs	r3, r2
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	7812      	ldrb	r2, [r2, #0]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b880:	617b      	str	r3, [r7, #20]
			break;
 800b882:	e009      	b.n	800b898 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800b884:	2301      	movs	r3, #1
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	e006      	b.n	800b898 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b88a:	bf00      	nop
 800b88c:	e004      	b.n	800b898 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b88e:	bf00      	nop
 800b890:	e002      	b.n	800b898 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b892:	bf00      	nop
 800b894:	e000      	b.n	800b898 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b896:	bf00      	nop
		}
	}

	return val;
 800b898:	697b      	ldr	r3, [r7, #20]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b088      	sub	sp, #32
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	60f8      	str	r0, [r7, #12]
 800b8aa:	60b9      	str	r1, [r7, #8]
 800b8ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d905      	bls.n	800b8c0 <put_fat+0x1e>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d302      	bcc.n	800b8c6 <put_fat+0x24>
		res = FR_INT_ERR;
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	77fb      	strb	r3, [r7, #31]
 800b8c4:	e0f6      	b.n	800bab4 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	f000 809e 	beq.w	800ba0e <put_fat+0x16c>
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	f300 80e4 	bgt.w	800baa0 <put_fat+0x1fe>
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d002      	beq.n	800b8e2 <put_fat+0x40>
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d06f      	beq.n	800b9c0 <put_fat+0x11e>
 800b8e0:	e0de      	b.n	800baa0 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	617b      	str	r3, [r7, #20]
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	085b      	lsrs	r3, r3, #1
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	0a5b      	lsrs	r3, r3, #9
 800b8fa:	4413      	add	r3, r2
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f7ff fe19 	bl	800b536 <move_window>
 800b904:	4603      	mov	r3, r0
 800b906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b908:	7ffb      	ldrb	r3, [r7, #31]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f040 80cb 	bne.w	800baa6 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	617a      	str	r2, [r7, #20]
 800b916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	4413      	add	r3, r2
 800b91e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00d      	beq.n	800b946 <put_fat+0xa4>
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	b25b      	sxtb	r3, r3
 800b930:	f003 030f 	and.w	r3, r3, #15
 800b934:	b25a      	sxtb	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	011b      	lsls	r3, r3, #4
 800b93c:	b25b      	sxtb	r3, r3
 800b93e:	4313      	orrs	r3, r2
 800b940:	b25b      	sxtb	r3, r3
 800b942:	b2db      	uxtb	r3, r3
 800b944:	e001      	b.n	800b94a <put_fat+0xa8>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2201      	movs	r2, #1
 800b952:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	0a5b      	lsrs	r3, r3, #9
 800b960:	4413      	add	r3, r2
 800b962:	4619      	mov	r1, r3
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f7ff fde6 	bl	800b536 <move_window>
 800b96a:	4603      	mov	r3, r0
 800b96c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b96e:	7ffb      	ldrb	r3, [r7, #31]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f040 809a 	bne.w	800baaa <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <put_fat+0xf2>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	091b      	lsrs	r3, r3, #4
 800b990:	b2db      	uxtb	r3, r3
 800b992:	e00e      	b.n	800b9b2 <put_fat+0x110>
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	b25b      	sxtb	r3, r3
 800b99a:	f023 030f 	bic.w	r3, r3, #15
 800b99e:	b25a      	sxtb	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	0a1b      	lsrs	r3, r3, #8
 800b9a4:	b25b      	sxtb	r3, r3
 800b9a6:	f003 030f 	and.w	r3, r3, #15
 800b9aa:	b25b      	sxtb	r3, r3
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	b25b      	sxtb	r3, r3
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800b9be:	e079      	b.n	800bab4 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	0a1b      	lsrs	r3, r3, #8
 800b9ca:	4413      	add	r3, r2
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f7ff fdb1 	bl	800b536 <move_window>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9d8:	7ffb      	ldrb	r3, [r7, #31]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d167      	bne.n	800baae <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	701a      	strb	r2, [r3, #0]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	0a1b      	lsrs	r3, r3, #8
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	b2d2      	uxtb	r2, r2
 800ba02:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800ba0c:	e052      	b.n	800bab4 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	09db      	lsrs	r3, r3, #7
 800ba18:	4413      	add	r3, r2
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f7ff fd8a 	bl	800b536 <move_window>
 800ba22:	4603      	mov	r3, r0
 800ba24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba26:	7ffb      	ldrb	r3, [r7, #31]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d142      	bne.n	800bab2 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	4413      	add	r3, r2
 800ba38:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	3303      	adds	r3, #3
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	061a      	lsls	r2, r3, #24
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	3302      	adds	r3, #2
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	041b      	lsls	r3, r3, #16
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	69ba      	ldr	r2, [r7, #24]
 800ba4e:	3201      	adds	r2, #1
 800ba50:	7812      	ldrb	r2, [r2, #0]
 800ba52:	0212      	lsls	r2, r2, #8
 800ba54:	4313      	orrs	r3, r2
 800ba56:	69ba      	ldr	r2, [r7, #24]
 800ba58:	7812      	ldrb	r2, [r2, #0]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	701a      	strb	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	0a1b      	lsrs	r3, r3, #8
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	b2d2      	uxtb	r2, r2
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	0c1a      	lsrs	r2, r3, #16
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	3302      	adds	r3, #2
 800ba86:	b2d2      	uxtb	r2, r2
 800ba88:	701a      	strb	r2, [r3, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	0e1a      	lsrs	r2, r3, #24
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	3303      	adds	r3, #3
 800ba92:	b2d2      	uxtb	r2, r2
 800ba94:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800ba9e:	e009      	b.n	800bab4 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800baa0:	2302      	movs	r3, #2
 800baa2:	77fb      	strb	r3, [r7, #31]
 800baa4:	e006      	b.n	800bab4 <put_fat+0x212>
			if (res != FR_OK) break;
 800baa6:	bf00      	nop
 800baa8:	e004      	b.n	800bab4 <put_fat+0x212>
			if (res != FR_OK) break;
 800baaa:	bf00      	nop
 800baac:	e002      	b.n	800bab4 <put_fat+0x212>
			if (res != FR_OK) break;
 800baae:	bf00      	nop
 800bab0:	e000      	b.n	800bab4 <put_fat+0x212>
			if (res != FR_OK) break;
 800bab2:	bf00      	nop
		}
	}

	return res;
 800bab4:	7ffb      	ldrb	r3, [r7, #31]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3720      	adds	r7, #32
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d905      	bls.n	800bada <remove_chain+0x1c>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d302      	bcc.n	800bae0 <remove_chain+0x22>
		res = FR_INT_ERR;
 800bada:	2302      	movs	r3, #2
 800badc:	73fb      	strb	r3, [r7, #15]
 800bade:	e043      	b.n	800bb68 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bae4:	e036      	b.n	800bb54 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7ff fe20 	bl	800b72e <get_fat>
 800baee:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d035      	beq.n	800bb62 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d102      	bne.n	800bb02 <remove_chain+0x44>
 800bafc:	2302      	movs	r3, #2
 800bafe:	73fb      	strb	r3, [r7, #15]
 800bb00:	e032      	b.n	800bb68 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb08:	d102      	bne.n	800bb10 <remove_chain+0x52>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	73fb      	strb	r3, [r7, #15]
 800bb0e:	e02b      	b.n	800bb68 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800bb10:	2200      	movs	r2, #0
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff fec4 	bl	800b8a2 <put_fat>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d120      	bne.n	800bb66 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d00f      	beq.n	800bb50 <remove_chain+0x92>
				fs->free_clust++;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bb36:	1c5a      	adds	r2, r3, #1
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800bb44:	f043 0301 	orr.w	r3, r3, #1
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d3c2      	bcc.n	800bae6 <remove_chain+0x28>
 800bb60:	e002      	b.n	800bb68 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800bb62:	bf00      	nop
 800bb64:	e000      	b.n	800bb68 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800bb66:	bf00      	nop
		}
	}

	return res;
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b086      	sub	sp, #24
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10f      	bne.n	800bba2 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bb88:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d005      	beq.n	800bb9c <create_chain+0x2a>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d31c      	bcc.n	800bbd6 <create_chain+0x64>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	613b      	str	r3, [r7, #16]
 800bba0:	e019      	b.n	800bbd6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff fdc2 	bl	800b72e <get_fat>
 800bbaa:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d801      	bhi.n	800bbb6 <create_chain+0x44>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e076      	b.n	800bca4 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbbc:	d101      	bne.n	800bbc2 <create_chain+0x50>
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	e070      	b.n	800bca4 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d201      	bcs.n	800bbd2 <create_chain+0x60>
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	e068      	b.n	800bca4 <create_chain+0x132>
		scl = clst;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d307      	bcc.n	800bbfc <create_chain+0x8a>
			ncl = 2;
 800bbec:	2302      	movs	r3, #2
 800bbee:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800bbf0:	697a      	ldr	r2, [r7, #20]
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d901      	bls.n	800bbfc <create_chain+0x8a>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e053      	b.n	800bca4 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800bbfc:	6979      	ldr	r1, [r7, #20]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff fd95 	bl	800b72e <get_fat>
 800bc04:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00e      	beq.n	800bc2a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc12:	d002      	beq.n	800bc1a <create_chain+0xa8>
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d101      	bne.n	800bc1e <create_chain+0xac>
			return cs;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	e042      	b.n	800bca4 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d1d9      	bne.n	800bbda <create_chain+0x68>
 800bc26:	2300      	movs	r3, #0
 800bc28:	e03c      	b.n	800bca4 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800bc2a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800bc2c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800bc30:	6979      	ldr	r1, [r7, #20]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7ff fe35 	bl	800b8a2 <put_fat>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d109      	bne.n	800bc56 <create_chain+0xe4>
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d006      	beq.n	800bc56 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7ff fe28 	bl	800b8a2 <put_fat>
 800bc52:	4603      	mov	r3, r0
 800bc54:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d11a      	bne.n	800bc92 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6e:	d018      	beq.n	800bca2 <create_chain+0x130>
			fs->free_clust--;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bc76:	1e5a      	subs	r2, r3, #1
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800bc84:	f043 0301 	orr.w	r3, r3, #1
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800bc90:	e007      	b.n	800bca2 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d102      	bne.n	800bc9e <create_chain+0x12c>
 800bc98:	f04f 33ff 	mov.w	r3, #4294967295
 800bc9c:	e000      	b.n	800bca0 <create_chain+0x12e>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800bca2:	697b      	ldr	r3, [r7, #20]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	0a5b      	lsrs	r3, r3, #9
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800bcca:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800bcce:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcd2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	1d1a      	adds	r2, r3, #4
 800bcd8:	613a      	str	r2, [r7, #16]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <clmt_clust+0x3c>
 800bce4:	2300      	movs	r3, #0
 800bce6:	e010      	b.n	800bd0a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d307      	bcc.n	800bd00 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800bcf0:	697a      	ldr	r2, [r7, #20]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	1ad3      	subs	r3, r2, r3
 800bcf6:	617b      	str	r3, [r7, #20]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bcfe:	e7e9      	b.n	800bcd4 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800bd00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	4413      	add	r3, r2
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	371c      	adds	r7, #28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bc80      	pop	{r7}
 800bd12:	4770      	bx	lr

0800bd14 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd2e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d007      	beq.n	800bd46 <dir_sdi+0x32>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d301      	bcc.n	800bd4a <dir_sdi+0x36>
		return FR_INT_ERR;
 800bd46:	2302      	movs	r3, #2
 800bd48:	e074      	b.n	800be34 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10c      	bne.n	800bd6a <dir_sdi+0x56>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d105      	bne.n	800bd6a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd64:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bd68:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d111      	bne.n	800bd94 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd76:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d301      	bcc.n	800bd86 <dir_sdi+0x72>
			return FR_INT_ERR;
 800bd82:	2302      	movs	r3, #2
 800bd84:	e056      	b.n	800be34 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd8c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bd90:	613b      	str	r3, [r7, #16]
 800bd92:	e032      	b.n	800bdfa <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd9a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bd9e:	011b      	lsls	r3, r3, #4
 800bda0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800bda2:	e01e      	b.n	800bde2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdaa:	6979      	ldr	r1, [r7, #20]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7ff fcbe 	bl	800b72e <get_fat>
 800bdb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdba:	d101      	bne.n	800bdc0 <dir_sdi+0xac>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e039      	b.n	800be34 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d907      	bls.n	800bdd6 <dir_sdi+0xc2>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdd0:	697a      	ldr	r2, [r7, #20]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d301      	bcc.n	800bdda <dir_sdi+0xc6>
				return FR_INT_ERR;
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	e02c      	b.n	800be34 <dir_sdi+0x120>
			idx -= ic;
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d2dc      	bcs.n	800bda4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdf0:	6979      	ldr	r1, [r7, #20]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7ff fc7a 	bl	800b6ec <clust2sect>
 800bdf8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	697a      	ldr	r2, [r7, #20]
 800bdfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d101      	bne.n	800be0c <dir_sdi+0xf8>
 800be08:	2302      	movs	r3, #2
 800be0a:	e013      	b.n	800be34 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	091a      	lsrs	r2, r3, #4
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	441a      	add	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be20:	461a      	mov	r2, r3
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	f003 030f 	and.w	r3, r3, #15
 800be28:	015b      	lsls	r3, r3, #5
 800be2a:	441a      	add	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800be3c:	b590      	push	{r4, r7, lr}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	b29b      	uxth	r3, r3
 800be54:	2b00      	cmp	r3, #0
 800be56:	d004      	beq.n	800be62 <dir_next+0x26>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <dir_next+0x2a>
		return FR_NO_FILE;
 800be62:	2304      	movs	r3, #4
 800be64:	e0dd      	b.n	800c022 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f003 030f 	and.w	r3, r3, #15
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f040 80c6 	bne.w	800bffe <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10b      	bne.n	800bea2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be90:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800be94:	461a      	mov	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4293      	cmp	r3, r2
 800be9a:	f0c0 80b0 	bcc.w	800bffe <dir_next+0x1c2>
				return FR_NO_FILE;
 800be9e:	2304      	movs	r3, #4
 800bea0:	e0bf      	b.n	800c022 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	091b      	lsrs	r3, r3, #4
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800beac:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800beb0:	3a01      	subs	r2, #1
 800beb2:	4013      	ands	r3, r2
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f040 80a2 	bne.w	800bffe <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bec6:	4619      	mov	r1, r3
 800bec8:	4610      	mov	r0, r2
 800beca:	f7ff fc30 	bl	800b72e <get_fat>
 800bece:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d801      	bhi.n	800beda <dir_next+0x9e>
 800bed6:	2302      	movs	r3, #2
 800bed8:	e0a3      	b.n	800c022 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee0:	d101      	bne.n	800bee6 <dir_next+0xaa>
 800bee2:	2301      	movs	r3, #1
 800bee4:	e09d      	b.n	800c022 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800beec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bef0:	697a      	ldr	r2, [r7, #20]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d374      	bcc.n	800bfe0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <dir_next+0xc4>
 800befc:	2304      	movs	r3, #4
 800befe:	e090      	b.n	800c022 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	f7ff fe2f 	bl	800bb72 <create_chain>
 800bf14:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <dir_next+0xe4>
 800bf1c:	2307      	movs	r3, #7
 800bf1e:	e080      	b.n	800c022 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d101      	bne.n	800bf2a <dir_next+0xee>
 800bf26:	2302      	movs	r3, #2
 800bf28:	e07b      	b.n	800c022 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf30:	d101      	bne.n	800bf36 <dir_next+0xfa>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e075      	b.n	800c022 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff fab1 	bl	800b4a4 <sync_window>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d001      	beq.n	800bf4c <dir_next+0x110>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e06a      	b.n	800c022 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf56:	2100      	movs	r1, #0
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff f895 	bl	800b088 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800bf6a:	6979      	ldr	r1, [r7, #20]
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	f7ff fbbd 	bl	800b6ec <clust2sect>
 800bf72:	4603      	mov	r3, r0
 800bf74:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800bf78:	2300      	movs	r3, #0
 800bf7a:	613b      	str	r3, [r7, #16]
 800bf7c:	e01b      	b.n	800bfb6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7ff fa87 	bl	800b4a4 <sync_window>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <dir_next+0x164>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e040      	b.n	800c022 <dir_next+0x1e6>
						dp->fs->winsect++;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfa6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800bfaa:	3201      	adds	r2, #1
 800bfac:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	613b      	str	r3, [r7, #16]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfbc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d3da      	bcc.n	800bf7e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfce:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	1a8a      	subs	r2, r1, r2
 800bfdc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	697a      	ldr	r2, [r7, #20]
 800bfe4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfee:	6979      	ldr	r1, [r7, #20]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff fb7b 	bl	800b6ec <clust2sect>
 800bff6:	4602      	mov	r2, r0
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	b29a      	uxth	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c00e:	461a      	mov	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f003 030f 	and.w	r3, r3, #15
 800c016:	015b      	lsls	r3, r3, #5
 800c018:	441a      	add	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	371c      	adds	r7, #28
 800c026:	46bd      	mov	sp, r7
 800c028:	bd90      	pop	{r4, r7, pc}

0800c02a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b084      	sub	sp, #16
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800c034:	2100      	movs	r1, #0
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff fe6c 	bl	800bd14 <dir_sdi>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d131      	bne.n	800c0aa <dir_alloc+0x80>
		n = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c056:	4619      	mov	r1, r3
 800c058:	4610      	mov	r0, r2
 800c05a:	f7ff fa6c 	bl	800b536 <move_window>
 800c05e:	4603      	mov	r3, r0
 800c060:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d11f      	bne.n	800c0a8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	2be5      	cmp	r3, #229	; 0xe5
 800c072:	d005      	beq.n	800c080 <dir_alloc+0x56>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d107      	bne.n	800c090 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	3301      	adds	r3, #1
 800c084:	60bb      	str	r3, [r7, #8]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d102      	bne.n	800c094 <dir_alloc+0x6a>
 800c08e:	e00c      	b.n	800c0aa <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c090:	2300      	movs	r3, #0
 800c092:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800c094:	2101      	movs	r1, #1
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7ff fed0 	bl	800be3c <dir_next>
 800c09c:	4603      	mov	r3, r0
 800c09e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d0d1      	beq.n	800c04a <dir_alloc+0x20>
 800c0a6:	e000      	b.n	800c0aa <dir_alloc+0x80>
			if (res != FR_OK) break;
 800c0a8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c0aa:	7bfb      	ldrb	r3, [r7, #15]
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	d101      	bne.n	800c0b4 <dir_alloc+0x8a>
 800c0b0:	2307      	movs	r3, #7
 800c0b2:	73fb      	strb	r3, [r7, #15]
	return res;
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b085      	sub	sp, #20
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	331b      	adds	r3, #27
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	021b      	lsls	r3, r3, #8
 800c0d0:	b21a      	sxth	r2, r3
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	331a      	adds	r3, #26
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	b21b      	sxth	r3, r3
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	b21b      	sxth	r3, r3
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d10f      	bne.n	800c10c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	3315      	adds	r3, #21
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	021b      	lsls	r3, r3, #8
 800c0f4:	b21a      	sxth	r2, r3
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	3314      	adds	r3, #20
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	b21b      	sxth	r3, r3
 800c0fe:	4313      	orrs	r3, r2
 800c100:	b21b      	sxth	r3, r3
 800c102:	b29b      	uxth	r3, r3
 800c104:	041b      	lsls	r3, r3, #16
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	4313      	orrs	r3, r2
 800c10a:	60fb      	str	r3, [r7, #12]

	return cl;
 800c10c:	68fb      	ldr	r3, [r7, #12]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3714      	adds	r7, #20
 800c112:	46bd      	mov	sp, r7
 800c114:	bc80      	pop	{r7}
 800c116:	4770      	bx	lr

0800c118 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	331a      	adds	r3, #26
 800c126:	683a      	ldr	r2, [r7, #0]
 800c128:	b2d2      	uxtb	r2, r2
 800c12a:	701a      	strb	r2, [r3, #0]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	b29b      	uxth	r3, r3
 800c130:	0a1b      	lsrs	r3, r3, #8
 800c132:	b29a      	uxth	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	331b      	adds	r3, #27
 800c138:	b2d2      	uxtb	r2, r2
 800c13a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	0c1a      	lsrs	r2, r3, #16
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3314      	adds	r3, #20
 800c144:	b2d2      	uxtb	r2, r2
 800c146:	701a      	strb	r2, [r3, #0]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	0c1b      	lsrs	r3, r3, #16
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	0a1b      	lsrs	r3, r3, #8
 800c150:	b29a      	uxth	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	3315      	adds	r3, #21
 800c156:	b2d2      	uxtb	r2, r2
 800c158:	701a      	strb	r2, [r3, #0]
}
 800c15a:	bf00      	nop
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	bc80      	pop	{r7}
 800c162:	4770      	bx	lr

0800c164 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c16c:	2100      	movs	r1, #0
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff fdd0 	bl	800bd14 <dir_sdi>
 800c174:	4603      	mov	r3, r0
 800c176:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c178:	7dfb      	ldrb	r3, [r7, #23]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <dir_find+0x1e>
 800c17e:	7dfb      	ldrb	r3, [r7, #23]
 800c180:	e03b      	b.n	800c1fa <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c18e:	4619      	mov	r1, r3
 800c190:	4610      	mov	r0, r2
 800c192:	f7ff f9d0 	bl	800b536 <move_window>
 800c196:	4603      	mov	r3, r0
 800c198:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d128      	bne.n	800c1f2 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1a6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d102      	bne.n	800c1ba <dir_find+0x56>
 800c1b4:	2304      	movs	r3, #4
 800c1b6:	75fb      	strb	r3, [r7, #23]
 800c1b8:	e01e      	b.n	800c1f8 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	330b      	adds	r3, #11
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	f003 0308 	and.w	r3, r3, #8
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10a      	bne.n	800c1de <dir_find+0x7a>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c1ce:	220b      	movs	r2, #11
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6938      	ldr	r0, [r7, #16]
 800c1d4:	f7fe ff72 	bl	800b0bc <mem_cmp>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00b      	beq.n	800c1f6 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800c1de:	2100      	movs	r1, #0
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7ff fe2b 	bl	800be3c <dir_next>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d0c8      	beq.n	800c182 <dir_find+0x1e>
 800c1f0:	e002      	b.n	800c1f8 <dir_find+0x94>
		if (res != FR_OK) break;
 800c1f2:	bf00      	nop
 800c1f4:	e000      	b.n	800c1f8 <dir_find+0x94>
			break;
 800c1f6:	bf00      	nop

	return res;
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3718      	adds	r7, #24
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b086      	sub	sp, #24
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800c20c:	2304      	movs	r3, #4
 800c20e:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800c210:	e03f      	b.n	800c292 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c21e:	4619      	mov	r1, r3
 800c220:	4610      	mov	r0, r2
 800c222:	f7ff f988 	bl	800b536 <move_window>
 800c226:	4603      	mov	r3, r0
 800c228:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d136      	bne.n	800c29e <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c236:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d102      	bne.n	800c24a <dir_read+0x48>
 800c244:	2304      	movs	r3, #4
 800c246:	75fb      	strb	r3, [r7, #23]
 800c248:	e02e      	b.n	800c2a8 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	330b      	adds	r3, #11
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c254:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800c256:	7bfb      	ldrb	r3, [r7, #15]
 800c258:	2be5      	cmp	r3, #229	; 0xe5
 800c25a:	d011      	beq.n	800c280 <dir_read+0x7e>
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	2b2e      	cmp	r3, #46	; 0x2e
 800c260:	d00e      	beq.n	800c280 <dir_read+0x7e>
 800c262:	7bbb      	ldrb	r3, [r7, #14]
 800c264:	2b0f      	cmp	r3, #15
 800c266:	d00b      	beq.n	800c280 <dir_read+0x7e>
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	f023 0320 	bic.w	r3, r3, #32
 800c26e:	2b08      	cmp	r3, #8
 800c270:	bf0c      	ite	eq
 800c272:	2301      	moveq	r3, #1
 800c274:	2300      	movne	r3, #0
 800c276:	b2db      	uxtb	r3, r3
 800c278:	461a      	mov	r2, r3
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d010      	beq.n	800c2a2 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800c280:	2100      	movs	r1, #0
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff fdda 	bl	800be3c <dir_next>
 800c288:	4603      	mov	r3, r0
 800c28a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d109      	bne.n	800c2a6 <dir_read+0xa4>
	while (dp->sect) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1ba      	bne.n	800c212 <dir_read+0x10>
 800c29c:	e004      	b.n	800c2a8 <dir_read+0xa6>
		if (res != FR_OK) break;
 800c29e:	bf00      	nop
 800c2a0:	e002      	b.n	800c2a8 <dir_read+0xa6>
			break;
 800c2a2:	bf00      	nop
 800c2a4:	e000      	b.n	800c2a8 <dir_read+0xa6>
		if (res != FR_OK) break;
 800c2a6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <dir_read+0xb4>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7ff fead 	bl	800c02a <dir_alloc>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d126      	bne.n	800c328 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f7ff f924 	bl	800b536 <move_window>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d117      	bne.n	800c328 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c2fe:	2220      	movs	r2, #32
 800c300:	2100      	movs	r1, #0
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fec0 	bl	800b088 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c314:	220b      	movs	r2, #11
 800c316:	4619      	mov	r1, r3
 800c318:	f7fe fe98 	bl	800b04c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800c328:	7bfb      	ldrb	r3, [r7, #15]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c332:	b480      	push	{r7}
 800c334:	b087      	sub	sp, #28
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	3309      	adds	r3, #9
 800c340:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d05a      	beq.n	800c402 <get_fileinfo+0xd0>
		dir = dp->dir;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c352:	60bb      	str	r3, [r7, #8]
		i = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800c358:	e01c      	b.n	800c394 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	617a      	str	r2, [r7, #20]
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	4413      	add	r3, r2
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	2b20      	cmp	r3, #32
 800c36c:	d100      	bne.n	800c370 <get_fileinfo+0x3e>
 800c36e:	e011      	b.n	800c394 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c370:	7bfb      	ldrb	r3, [r7, #15]
 800c372:	2b05      	cmp	r3, #5
 800c374:	d101      	bne.n	800c37a <get_fileinfo+0x48>
 800c376:	23e5      	movs	r3, #229	; 0xe5
 800c378:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b09      	cmp	r3, #9
 800c37e:	d104      	bne.n	800c38a <get_fileinfo+0x58>
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	1c5a      	adds	r2, r3, #1
 800c384:	613a      	str	r2, [r7, #16]
 800c386:	222e      	movs	r2, #46	; 0x2e
 800c388:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	613a      	str	r2, [r7, #16]
 800c390:	7bfa      	ldrb	r2, [r7, #15]
 800c392:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	2b0a      	cmp	r3, #10
 800c398:	d9df      	bls.n	800c35a <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	7ada      	ldrb	r2, [r3, #11]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	331f      	adds	r3, #31
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	061a      	lsls	r2, r3, #24
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	331e      	adds	r3, #30
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	041b      	lsls	r3, r3, #16
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	321d      	adds	r2, #29
 800c3b8:	7812      	ldrb	r2, [r2, #0]
 800c3ba:	0212      	lsls	r2, r2, #8
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	321c      	adds	r2, #28
 800c3c2:	7812      	ldrb	r2, [r2, #0]
 800c3c4:	431a      	orrs	r2, r3
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	3319      	adds	r3, #25
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	021b      	lsls	r3, r3, #8
 800c3d2:	b21a      	sxth	r2, r3
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	3318      	adds	r3, #24
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	b21b      	sxth	r3, r3
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	b21b      	sxth	r3, r3
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	3317      	adds	r3, #23
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	021b      	lsls	r3, r3, #8
 800c3ee:	b21a      	sxth	r2, r3
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	3316      	adds	r3, #22
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	b21b      	sxth	r3, r3
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	b21b      	sxth	r3, r3
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	2200      	movs	r2, #0
 800c406:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 800c408:	bf00      	nop
 800c40a:	371c      	adds	r7, #28
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bc80      	pop	{r7}
 800c410:	4770      	bx	lr
	...

0800c414 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	e002      	b.n	800c42c <create_name+0x18>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3301      	adds	r3, #1
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2b2f      	cmp	r3, #47	; 0x2f
 800c432:	d0f8      	beq.n	800c426 <create_name+0x12>
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b5c      	cmp	r3, #92	; 0x5c
 800c43a:	d0f4      	beq.n	800c426 <create_name+0x12>
	sfn = dp->fn;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c442:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c444:	220b      	movs	r2, #11
 800c446:	2120      	movs	r1, #32
 800c448:	68b8      	ldr	r0, [r7, #8]
 800c44a:	f7fe fe1d 	bl	800b088 <mem_set>
	si = i = b = 0; ni = 8;
 800c44e:	2300      	movs	r3, #0
 800c450:	77fb      	strb	r3, [r7, #31]
 800c452:	2300      	movs	r3, #0
 800c454:	613b      	str	r3, [r7, #16]
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	617b      	str	r3, [r7, #20]
 800c45a:	2308      	movs	r3, #8
 800c45c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	617a      	str	r2, [r7, #20]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	4413      	add	r3, r2
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800c46c:	7fbb      	ldrb	r3, [r7, #30]
 800c46e:	2b20      	cmp	r3, #32
 800c470:	d953      	bls.n	800c51a <create_name+0x106>
 800c472:	7fbb      	ldrb	r3, [r7, #30]
 800c474:	2b2f      	cmp	r3, #47	; 0x2f
 800c476:	d050      	beq.n	800c51a <create_name+0x106>
 800c478:	7fbb      	ldrb	r3, [r7, #30]
 800c47a:	2b5c      	cmp	r3, #92	; 0x5c
 800c47c:	d04d      	beq.n	800c51a <create_name+0x106>
		if (c == '.' || i >= ni) {
 800c47e:	7fbb      	ldrb	r3, [r7, #30]
 800c480:	2b2e      	cmp	r3, #46	; 0x2e
 800c482:	d003      	beq.n	800c48c <create_name+0x78>
 800c484:	693a      	ldr	r2, [r7, #16]
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d30f      	bcc.n	800c4ac <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	2b08      	cmp	r3, #8
 800c490:	d102      	bne.n	800c498 <create_name+0x84>
 800c492:	7fbb      	ldrb	r3, [r7, #30]
 800c494:	2b2e      	cmp	r3, #46	; 0x2e
 800c496:	d001      	beq.n	800c49c <create_name+0x88>
 800c498:	2306      	movs	r3, #6
 800c49a:	e073      	b.n	800c584 <create_name+0x170>
			i = 8; ni = 11;
 800c49c:	2308      	movs	r3, #8
 800c49e:	613b      	str	r3, [r7, #16]
 800c4a0:	230b      	movs	r3, #11
 800c4a2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800c4a4:	7ffb      	ldrb	r3, [r7, #31]
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	77fb      	strb	r3, [r7, #31]
 800c4aa:	e035      	b.n	800c518 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c4ac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	da08      	bge.n	800c4c6 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800c4b4:	7ffb      	ldrb	r3, [r7, #31]
 800c4b6:	f043 0303 	orr.w	r3, r3, #3
 800c4ba:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c4bc:	7fbb      	ldrb	r3, [r7, #30]
 800c4be:	3b80      	subs	r3, #128	; 0x80
 800c4c0:	4a32      	ldr	r2, [pc, #200]	; (800c58c <create_name+0x178>)
 800c4c2:	5cd3      	ldrb	r3, [r2, r3]
 800c4c4:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800c4c6:	7fbb      	ldrb	r3, [r7, #30]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4831      	ldr	r0, [pc, #196]	; (800c590 <create_name+0x17c>)
 800c4cc:	f7fe fe1c 	bl	800b108 <chk_chr>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <create_name+0xc6>
				return FR_INVALID_NAME;
 800c4d6:	2306      	movs	r3, #6
 800c4d8:	e054      	b.n	800c584 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800c4da:	7fbb      	ldrb	r3, [r7, #30]
 800c4dc:	2b40      	cmp	r3, #64	; 0x40
 800c4de:	d907      	bls.n	800c4f0 <create_name+0xdc>
 800c4e0:	7fbb      	ldrb	r3, [r7, #30]
 800c4e2:	2b5a      	cmp	r3, #90	; 0x5a
 800c4e4:	d804      	bhi.n	800c4f0 <create_name+0xdc>
				b |= 2;
 800c4e6:	7ffb      	ldrb	r3, [r7, #31]
 800c4e8:	f043 0302 	orr.w	r3, r3, #2
 800c4ec:	77fb      	strb	r3, [r7, #31]
 800c4ee:	e00c      	b.n	800c50a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800c4f0:	7fbb      	ldrb	r3, [r7, #30]
 800c4f2:	2b60      	cmp	r3, #96	; 0x60
 800c4f4:	d909      	bls.n	800c50a <create_name+0xf6>
 800c4f6:	7fbb      	ldrb	r3, [r7, #30]
 800c4f8:	2b7a      	cmp	r3, #122	; 0x7a
 800c4fa:	d806      	bhi.n	800c50a <create_name+0xf6>
					b |= 1; c -= 0x20;
 800c4fc:	7ffb      	ldrb	r3, [r7, #31]
 800c4fe:	f043 0301 	orr.w	r3, r3, #1
 800c502:	77fb      	strb	r3, [r7, #31]
 800c504:	7fbb      	ldrb	r3, [r7, #30]
 800c506:	3b20      	subs	r3, #32
 800c508:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	1c5a      	adds	r2, r3, #1
 800c50e:	613a      	str	r2, [r7, #16]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	4413      	add	r3, r2
 800c514:	7fba      	ldrb	r2, [r7, #30]
 800c516:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c518:	e7a1      	b.n	800c45e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	441a      	add	r2, r3
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800c524:	7fbb      	ldrb	r3, [r7, #30]
 800c526:	2b20      	cmp	r3, #32
 800c528:	d801      	bhi.n	800c52e <create_name+0x11a>
 800c52a:	2304      	movs	r3, #4
 800c52c:	e000      	b.n	800c530 <create_name+0x11c>
 800c52e:	2300      	movs	r3, #0
 800c530:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <create_name+0x128>
 800c538:	2306      	movs	r3, #6
 800c53a:	e023      	b.n	800c584 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2be5      	cmp	r3, #229	; 0xe5
 800c542:	d102      	bne.n	800c54a <create_name+0x136>
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2205      	movs	r2, #5
 800c548:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	2b08      	cmp	r3, #8
 800c54e:	d102      	bne.n	800c556 <create_name+0x142>
 800c550:	7ffb      	ldrb	r3, [r7, #31]
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800c556:	7ffb      	ldrb	r3, [r7, #31]
 800c558:	f003 0303 	and.w	r3, r3, #3
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d103      	bne.n	800c568 <create_name+0x154>
 800c560:	7fbb      	ldrb	r3, [r7, #30]
 800c562:	f043 0310 	orr.w	r3, r3, #16
 800c566:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800c568:	7ffb      	ldrb	r3, [r7, #31]
 800c56a:	f003 030c 	and.w	r3, r3, #12
 800c56e:	2b04      	cmp	r3, #4
 800c570:	d103      	bne.n	800c57a <create_name+0x166>
 800c572:	7fbb      	ldrb	r3, [r7, #30]
 800c574:	f043 0308 	orr.w	r3, r3, #8
 800c578:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	330b      	adds	r3, #11
 800c57e:	7fba      	ldrb	r2, [r7, #30]
 800c580:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c582:	2300      	movs	r3, #0
#endif
}
 800c584:	4618      	mov	r0, r3
 800c586:	3720      	adds	r7, #32
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	08014378 	.word	0x08014378
 800c590:	0800f964 	.word	0x0800f964

0800c594 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	2b2f      	cmp	r3, #47	; 0x2f
 800c5a4:	d003      	beq.n	800c5ae <follow_path+0x1a>
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	2b5c      	cmp	r3, #92	; 0x5c
 800c5ac:	d102      	bne.n	800c5b4 <follow_path+0x20>
		path++;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b1f      	cmp	r3, #31
 800c5c2:	d80a      	bhi.n	800c5da <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7ff fba4 	bl	800bd14 <dir_sdi>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c5d8:	e045      	b.n	800c666 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c5da:	463b      	mov	r3, r7
 800c5dc:	4619      	mov	r1, r3
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff ff18 	bl	800c414 <create_name>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d136      	bne.n	800c65c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff fdb8 	bl	800c164 <dir_find>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c5fe:	7adb      	ldrb	r3, [r3, #11]
 800c600:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00a      	beq.n	800c61e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d128      	bne.n	800c660 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
 800c610:	f003 0304 	and.w	r3, r3, #4
 800c614:	2b00      	cmp	r3, #0
 800c616:	d123      	bne.n	800c660 <follow_path+0xcc>
 800c618:	2305      	movs	r3, #5
 800c61a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800c61c:	e020      	b.n	800c660 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c61e:	7bbb      	ldrb	r3, [r7, #14]
 800c620:	f003 0304 	and.w	r3, r3, #4
 800c624:	2b00      	cmp	r3, #0
 800c626:	d11d      	bne.n	800c664 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c62e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	330b      	adds	r3, #11
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 0310 	and.w	r3, r3, #16
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d102      	bne.n	800c644 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800c63e:	2305      	movs	r3, #5
 800c640:	73fb      	strb	r3, [r7, #15]
 800c642:	e010      	b.n	800c666 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c64a:	68b9      	ldr	r1, [r7, #8]
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7ff fd36 	bl	800c0be <ld_clust>
 800c652:	4602      	mov	r2, r0
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c65a:	e7be      	b.n	800c5da <follow_path+0x46>
			if (res != FR_OK) break;
 800c65c:	bf00      	nop
 800c65e:	e002      	b.n	800c666 <follow_path+0xd2>
				break;
 800c660:	bf00      	nop
 800c662:	e000      	b.n	800c666 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c664:	bf00      	nop
		}
	}

	return res;
 800c666:	7bfb      	ldrb	r3, [r7, #15]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c670:	b480      	push	{r7}
 800c672:	b087      	sub	sp, #28
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c678:	f04f 33ff 	mov.w	r3, #4294967295
 800c67c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d031      	beq.n	800c6ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	617b      	str	r3, [r7, #20]
 800c68c:	e002      	b.n	800c694 <get_ldnumber+0x24>
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	3301      	adds	r3, #1
 800c692:	617b      	str	r3, [r7, #20]
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	2b20      	cmp	r3, #32
 800c69a:	d903      	bls.n	800c6a4 <get_ldnumber+0x34>
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b3a      	cmp	r3, #58	; 0x3a
 800c6a2:	d1f4      	bne.n	800c68e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b3a      	cmp	r3, #58	; 0x3a
 800c6aa:	d11c      	bne.n	800c6e6 <get_ldnumber+0x76>
			tp = *path;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	60fa      	str	r2, [r7, #12]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	3b30      	subs	r3, #48	; 0x30
 800c6bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	2b09      	cmp	r3, #9
 800c6c2:	d80e      	bhi.n	800c6e2 <get_ldnumber+0x72>
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d10a      	bne.n	800c6e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d107      	bne.n	800c6e2 <get_ldnumber+0x72>
					vol = (int)i;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	617b      	str	r3, [r7, #20]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	e002      	b.n	800c6ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c6ea:	693b      	ldr	r3, [r7, #16]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	371c      	adds	r7, #28
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bc80      	pop	{r7}
 800c6f4:	4770      	bx	lr
	...

0800c6f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f04f 32ff 	mov.w	r2, #4294967295
 800c710:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7fe ff0d 	bl	800b536 <move_window>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d001      	beq.n	800c726 <check_fs+0x2e>
		return 3;
 800c722:	2303      	movs	r3, #3
 800c724:	e04a      	b.n	800c7bc <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c72c:	3301      	adds	r3, #1
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	021b      	lsls	r3, r3, #8
 800c732:	b21a      	sxth	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c73a:	b21b      	sxth	r3, r3
 800c73c:	4313      	orrs	r3, r2
 800c73e:	b21b      	sxth	r3, r3
 800c740:	4a20      	ldr	r2, [pc, #128]	; (800c7c4 <check_fs+0xcc>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d001      	beq.n	800c74a <check_fs+0x52>
		return 2;
 800c746:	2302      	movs	r3, #2
 800c748:	e038      	b.n	800c7bc <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3336      	adds	r3, #54	; 0x36
 800c74e:	3303      	adds	r3, #3
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	061a      	lsls	r2, r3, #24
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	3336      	adds	r3, #54	; 0x36
 800c758:	3302      	adds	r3, #2
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	041b      	lsls	r3, r3, #16
 800c75e:	4313      	orrs	r3, r2
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	3236      	adds	r2, #54	; 0x36
 800c764:	3201      	adds	r2, #1
 800c766:	7812      	ldrb	r2, [r2, #0]
 800c768:	0212      	lsls	r2, r2, #8
 800c76a:	4313      	orrs	r3, r2
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c772:	4313      	orrs	r3, r2
 800c774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c778:	4a13      	ldr	r2, [pc, #76]	; (800c7c8 <check_fs+0xd0>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d101      	bne.n	800c782 <check_fs+0x8a>
		return 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	e01c      	b.n	800c7bc <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	3352      	adds	r3, #82	; 0x52
 800c786:	3303      	adds	r3, #3
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	061a      	lsls	r2, r3, #24
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3352      	adds	r3, #82	; 0x52
 800c790:	3302      	adds	r3, #2
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	041b      	lsls	r3, r3, #16
 800c796:	4313      	orrs	r3, r2
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	3252      	adds	r2, #82	; 0x52
 800c79c:	3201      	adds	r2, #1
 800c79e:	7812      	ldrb	r2, [r2, #0]
 800c7a0:	0212      	lsls	r2, r2, #8
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7b0:	4a05      	ldr	r2, [pc, #20]	; (800c7c8 <check_fs+0xd0>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d101      	bne.n	800c7ba <check_fs+0xc2>
		return 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e000      	b.n	800c7bc <check_fs+0xc4>

	return 1;
 800c7ba:	2301      	movs	r3, #1
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	ffffaa55 	.word	0xffffaa55
 800c7c8:	00544146 	.word	0x00544146

0800c7cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b096      	sub	sp, #88	; 0x58
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c7e0:	68b8      	ldr	r0, [r7, #8]
 800c7e2:	f7ff ff45 	bl	800c670 <get_ldnumber>
 800c7e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	da01      	bge.n	800c7f2 <find_volume+0x26>
 800c7ee:	230b      	movs	r3, #11
 800c7f0:	e2aa      	b.n	800cd48 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c7f2:	4a9e      	ldr	r2, [pc, #632]	; (800ca6c <find_volume+0x2a0>)
 800c7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <find_volume+0x3a>
 800c802:	230c      	movs	r3, #12
 800c804:	e2a0      	b.n	800cd48 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c80a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c812:	2b00      	cmp	r3, #0
 800c814:	d01b      	beq.n	800c84e <find_volume+0x82>
		stat = disk_status(fs->drv);
 800c816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c818:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fe fb77 	bl	800af10 <disk_status>
 800c822:	4603      	mov	r3, r0
 800c824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c828:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c82c:	f003 0301 	and.w	r3, r3, #1
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10c      	bne.n	800c84e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c834:	79fb      	ldrb	r3, [r7, #7]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d007      	beq.n	800c84a <find_volume+0x7e>
 800c83a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c83e:	f003 0304 	and.w	r3, r3, #4
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800c846:	230a      	movs	r3, #10
 800c848:	e27e      	b.n	800cd48 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800c84a:	2300      	movs	r3, #0
 800c84c:	e27c      	b.n	800cd48 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	2200      	movs	r2, #0
 800c852:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c866:	4618      	mov	r0, r3
 800c868:	f7fe fb6c 	bl	800af44 <disk_initialize>
 800c86c:	4603      	mov	r3, r0
 800c86e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c872:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d001      	beq.n	800c882 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c87e:	2303      	movs	r3, #3
 800c880:	e262      	b.n	800cd48 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d007      	beq.n	800c898 <find_volume+0xcc>
 800c888:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	2b00      	cmp	r3, #0
 800c892:	d001      	beq.n	800c898 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c894:	230a      	movs	r3, #10
 800c896:	e257      	b.n	800cd48 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c89c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c89e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8a0:	f7ff ff2a 	bl	800c6f8 <check_fs>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c8aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d155      	bne.n	800c95e <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	643b      	str	r3, [r7, #64]	; 0x40
 800c8b6:	e029      	b.n	800c90c <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c8b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8bc:	011b      	lsls	r3, r3, #4
 800c8be:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c8c2:	4413      	add	r3, r2
 800c8c4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d012      	beq.n	800c8f6 <find_volume+0x12a>
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	330b      	adds	r3, #11
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	061a      	lsls	r2, r3, #24
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8da:	330a      	adds	r3, #10
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	041b      	lsls	r3, r3, #16
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8e4:	3209      	adds	r2, #9
 800c8e6:	7812      	ldrb	r2, [r2, #0]
 800c8e8:	0212      	lsls	r2, r2, #8
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ee:	3208      	adds	r2, #8
 800c8f0:	7812      	ldrb	r2, [r2, #0]
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	e000      	b.n	800c8f8 <find_volume+0x12c>
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c900:	440b      	add	r3, r1
 800c902:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c908:	3301      	adds	r3, #1
 800c90a:	643b      	str	r3, [r7, #64]	; 0x40
 800c90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d9d2      	bls.n	800c8b8 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c912:	2300      	movs	r3, #0
 800c914:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <find_volume+0x156>
 800c91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c91e:	3b01      	subs	r3, #1
 800c920:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c92a:	4413      	add	r3, r2
 800c92c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c930:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c934:	2b00      	cmp	r3, #0
 800c936:	d005      	beq.n	800c944 <find_volume+0x178>
 800c938:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c93a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c93c:	f7ff fedc 	bl	800c6f8 <check_fs>
 800c940:	4603      	mov	r3, r0
 800c942:	e000      	b.n	800c946 <find_volume+0x17a>
 800c944:	2302      	movs	r3, #2
 800c946:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c94a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d005      	beq.n	800c95e <find_volume+0x192>
 800c952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c954:	3301      	adds	r3, #1
 800c956:	643b      	str	r3, [r7, #64]	; 0x40
 800c958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d9e1      	bls.n	800c922 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c95e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c962:	2b03      	cmp	r3, #3
 800c964:	d101      	bne.n	800c96a <find_volume+0x19e>
 800c966:	2301      	movs	r3, #1
 800c968:	e1ee      	b.n	800cd48 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c96a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <find_volume+0x1aa>
 800c972:	230d      	movs	r3, #13
 800c974:	e1e8      	b.n	800cd48 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c978:	7b1b      	ldrb	r3, [r3, #12]
 800c97a:	021b      	lsls	r3, r3, #8
 800c97c:	b21a      	sxth	r2, r3
 800c97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c980:	7adb      	ldrb	r3, [r3, #11]
 800c982:	b21b      	sxth	r3, r3
 800c984:	4313      	orrs	r3, r2
 800c986:	b21b      	sxth	r3, r3
 800c988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c98c:	d001      	beq.n	800c992 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800c98e:	230d      	movs	r3, #13
 800c990:	e1da      	b.n	800cd48 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	7ddb      	ldrb	r3, [r3, #23]
 800c996:	021b      	lsls	r3, r3, #8
 800c998:	b21a      	sxth	r2, r3
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	7d9b      	ldrb	r3, [r3, #22]
 800c99e:	b21b      	sxth	r3, r3
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	b21b      	sxth	r3, r3
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d112      	bne.n	800c9d4 <find_volume+0x208>
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c9b4:	061a      	lsls	r2, r3, #24
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c9bc:	041b      	lsls	r3, r3, #16
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9c2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c9c6:	0212      	lsls	r2, r2, #8
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9cc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9de:	7c1a      	ldrb	r2, [r3, #16]
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d006      	beq.n	800c9fe <find_volume+0x232>
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d001      	beq.n	800c9fe <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800c9fa:	230d      	movs	r3, #13
 800c9fc:	e1a4      	b.n	800cd48 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800ca04:	461a      	mov	r2, r3
 800ca06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca08:	fb02 f303 	mul.w	r3, r2, r3
 800ca0c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca10:	7b5a      	ldrb	r2, [r3, #13]
 800ca12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca14:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00a      	beq.n	800ca38 <find_volume+0x26c>
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ca28:	461a      	mov	r2, r3
 800ca2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ca30:	3b01      	subs	r3, #1
 800ca32:	4013      	ands	r3, r2
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800ca38:	230d      	movs	r3, #13
 800ca3a:	e185      	b.n	800cd48 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	7c9b      	ldrb	r3, [r3, #18]
 800ca40:	021b      	lsls	r3, r3, #8
 800ca42:	b21a      	sxth	r2, r3
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	7c5b      	ldrb	r3, [r3, #17]
 800ca48:	b21b      	sxth	r3, r3
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	b21b      	sxth	r3, r3
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ca5c:	f003 030f 	and.w	r3, r3, #15
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d004      	beq.n	800ca70 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800ca66:	230d      	movs	r3, #13
 800ca68:	e16e      	b.n	800cd48 <find_volume+0x57c>
 800ca6a:	bf00      	nop
 800ca6c:	200000e0 	.word	0x200000e0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800ca70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca72:	7d1b      	ldrb	r3, [r3, #20]
 800ca74:	021b      	lsls	r3, r3, #8
 800ca76:	b21a      	sxth	r2, r3
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	7cdb      	ldrb	r3, [r3, #19]
 800ca7c:	b21b      	sxth	r3, r3
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	b21b      	sxth	r3, r3
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800ca86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d112      	bne.n	800cab2 <find_volume+0x2e6>
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ca92:	061a      	lsls	r2, r3, #24
 800ca94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca96:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ca9a:	041b      	lsls	r3, r3, #16
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caa0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800caa4:	0212      	lsls	r2, r2, #8
 800caa6:	4313      	orrs	r3, r2
 800caa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caaa:	f892 2020 	ldrb.w	r2, [r2, #32]
 800caae:	4313      	orrs	r3, r2
 800cab0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	7bdb      	ldrb	r3, [r3, #15]
 800cab6:	021b      	lsls	r3, r3, #8
 800cab8:	b21a      	sxth	r2, r3
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	7b9b      	ldrb	r3, [r3, #14]
 800cabe:	b21b      	sxth	r3, r3
 800cac0:	4313      	orrs	r3, r2
 800cac2:	b21b      	sxth	r3, r3
 800cac4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800cac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <find_volume+0x304>
 800cacc:	230d      	movs	r3, #13
 800cace:	e13b      	b.n	800cd48 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800cad0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad4:	4413      	add	r3, r2
 800cad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cad8:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800cadc:	0912      	lsrs	r2, r2, #4
 800cade:	b292      	uxth	r2, r2
 800cae0:	4413      	add	r3, r2
 800cae2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	429a      	cmp	r2, r3
 800caea:	d201      	bcs.n	800caf0 <find_volume+0x324>
 800caec:	230d      	movs	r3, #13
 800caee:	e12b      	b.n	800cd48 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800caf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caf8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800cafc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb00:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d101      	bne.n	800cb0c <find_volume+0x340>
 800cb08:	230d      	movs	r3, #13
 800cb0a:	e11d      	b.n	800cd48 <find_volume+0x57c>
	fmt = FS_FAT12;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d902      	bls.n	800cb22 <find_volume+0x356>
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d902      	bls.n	800cb32 <find_volume+0x366>
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	1c9a      	adds	r2, r3, #2
 800cb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800cb44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb48:	441a      	add	r2, r3
 800cb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800cb50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	441a      	add	r2, r3
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800cb5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d121      	bne.n	800cba8 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800cb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb66:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <find_volume+0x3a6>
 800cb6e:	230d      	movs	r3, #13
 800cb70:	e0ea      	b.n	800cd48 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb78:	061a      	lsls	r2, r3, #24
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800cb80:	041b      	lsls	r3, r3, #16
 800cb82:	4313      	orrs	r3, r2
 800cb84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb86:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800cb8a:	0212      	lsls	r2, r2, #8
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb90:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800cb94:	431a      	orrs	r2, r3
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	647b      	str	r3, [r7, #68]	; 0x44
 800cba6:	e025      	b.n	800cbf4 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <find_volume+0x3ea>
 800cbb2:	230d      	movs	r3, #13
 800cbb4:	e0c8      	b.n	800cd48 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbbe:	441a      	add	r2, r3
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cbc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d104      	bne.n	800cbd8 <find_volume+0x40c>
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	e00c      	b.n	800cbf2 <find_volume+0x426>
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbda:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	085a      	lsrs	r2, r3, #1
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cbec:	f003 0301 	and.w	r3, r3, #1
 800cbf0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800cbf2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800cbfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cc00:	0a5b      	lsrs	r3, r3, #9
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d201      	bcs.n	800cc0a <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800cc06:	230d      	movs	r3, #13
 800cc08:	e09e      	b.n	800cd48 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	2280      	movs	r2, #128	; 0x80
 800cc24:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800cc28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc2c:	2b03      	cmp	r3, #3
 800cc2e:	d177      	bne.n	800cd20 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc36:	021b      	lsls	r3, r3, #8
 800cc38:	b21a      	sxth	r2, r3
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc40:	b21b      	sxth	r3, r3
 800cc42:	4313      	orrs	r3, r2
 800cc44:	b21b      	sxth	r3, r3
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d16a      	bne.n	800cd20 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800cc4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc52:	f7fe fc70 	bl	800b536 <move_window>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d161      	bne.n	800cd20 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800cc6a:	021b      	lsls	r3, r3, #8
 800cc6c:	b21a      	sxth	r2, r3
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc70:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800cc74:	b21b      	sxth	r3, r3
 800cc76:	4313      	orrs	r3, r2
 800cc78:	b21b      	sxth	r3, r3
 800cc7a:	4a35      	ldr	r2, [pc, #212]	; (800cd50 <find_volume+0x584>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d14f      	bne.n	800cd20 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	78db      	ldrb	r3, [r3, #3]
 800cc84:	061a      	lsls	r2, r3, #24
 800cc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc88:	789b      	ldrb	r3, [r3, #2]
 800cc8a:	041b      	lsls	r3, r3, #16
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc90:	7852      	ldrb	r2, [r2, #1]
 800cc92:	0212      	lsls	r2, r2, #8
 800cc94:	4313      	orrs	r3, r2
 800cc96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc98:	7812      	ldrb	r2, [r2, #0]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	4a2d      	ldr	r2, [pc, #180]	; (800cd54 <find_volume+0x588>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d13e      	bne.n	800cd20 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800cca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800cca8:	061a      	lsls	r2, r3, #24
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccac:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800ccb0:	041b      	lsls	r3, r3, #16
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccb6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800ccba:	0212      	lsls	r2, r2, #8
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccc0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	4a24      	ldr	r2, [pc, #144]	; (800cd58 <find_volume+0x58c>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d129      	bne.n	800cd20 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800ccd2:	061a      	lsls	r2, r3, #24
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800ccda:	041b      	lsls	r3, r3, #16
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cce0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800cce4:	0212      	lsls	r2, r2, #8
 800cce6:	4313      	orrs	r3, r2
 800cce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccea:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800ccee:	431a      	orrs	r2, r3
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800ccfc:	061a      	lsls	r2, r3, #24
 800ccfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd00:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800cd04:	041b      	lsls	r3, r3, #16
 800cd06:	4313      	orrs	r3, r2
 800cd08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd0a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800cd0e:	0212      	lsls	r2, r2, #8
 800cd10:	4313      	orrs	r3, r2
 800cd12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd14:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800cd18:	431a      	orrs	r2, r3
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cd26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800cd2a:	4b0c      	ldr	r3, [pc, #48]	; (800cd5c <find_volume+0x590>)
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <find_volume+0x590>)
 800cd34:	801a      	strh	r2, [r3, #0]
 800cd36:	4b09      	ldr	r3, [pc, #36]	; (800cd5c <find_volume+0x590>)
 800cd38:	881a      	ldrh	r2, [r3, #0]
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800cd40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd42:	f7fe fb85 	bl	800b450 <clear_lock>
#endif

	return FR_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3758      	adds	r7, #88	; 0x58
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	ffffaa55 	.word	0xffffaa55
 800cd54:	41615252 	.word	0x41615252
 800cd58:	61417272 	.word	0x61417272
 800cd5c:	200000e4 	.word	0x200000e4

0800cd60 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d022      	beq.n	800cdb8 <validate+0x58>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d01d      	beq.n	800cdb8 <validate+0x58>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cd82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d016      	beq.n	800cdb8 <validate+0x58>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cd90:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d10c      	bne.n	800cdb8 <validate+0x58>
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cda4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe f8b1 	bl	800af10 <disk_status>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <validate+0x5c>
		return FR_INVALID_OBJECT;
 800cdb8:	2309      	movs	r3, #9
 800cdba:	e000      	b.n	800cdbe <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
	...

0800cdc8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b088      	sub	sp, #32
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800cdda:	f107 0310 	add.w	r3, r7, #16
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff fc46 	bl	800c670 <get_ldnumber>
 800cde4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	da01      	bge.n	800cdf0 <f_mount+0x28>
 800cdec:	230b      	movs	r3, #11
 800cdee:	e02d      	b.n	800ce4c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cdf0:	4a18      	ldr	r2, [pc, #96]	; (800ce54 <f_mount+0x8c>)
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d006      	beq.n	800ce0e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800ce00:	69b8      	ldr	r0, [r7, #24]
 800ce02:	f7fe fb25 	bl	800b450 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d003      	beq.n	800ce1c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	490d      	ldr	r1, [pc, #52]	; (800ce54 <f_mount+0x8c>)
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <f_mount+0x6a>
 800ce2c:	79fb      	ldrb	r3, [r7, #7]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d001      	beq.n	800ce36 <f_mount+0x6e>
 800ce32:	2300      	movs	r3, #0
 800ce34:	e00a      	b.n	800ce4c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800ce36:	f107 0108 	add.w	r1, r7, #8
 800ce3a:	f107 030c 	add.w	r3, r7, #12
 800ce3e:	2200      	movs	r2, #0
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7ff fcc3 	bl	800c7cc <find_volume>
 800ce46:	4603      	mov	r3, r0
 800ce48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3720      	adds	r7, #32
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	200000e0 	.word	0x200000e0

0800ce58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	f107 030c 	add.w	r3, r7, #12
 800ce64:	6018      	str	r0, [r3, #0]
 800ce66:	f107 0308 	add.w	r3, r7, #8
 800ce6a:	6019      	str	r1, [r3, #0]
 800ce6c:	1dfb      	adds	r3, r7, #7
 800ce6e:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ce70:	f107 030c 	add.w	r3, r7, #12
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <f_open+0x26>
 800ce7a:	2309      	movs	r3, #9
 800ce7c:	e1f2      	b.n	800d264 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800ce7e:	f107 030c 	add.w	r3, r7, #12
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800ce8a:	1dfb      	adds	r3, r7, #7
 800ce8c:	1dfa      	adds	r2, r7, #7
 800ce8e:	7812      	ldrb	r2, [r2, #0]
 800ce90:	f002 021f 	and.w	r2, r2, #31
 800ce94:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ce96:	1dfb      	adds	r3, r7, #7
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	f023 0301 	bic.w	r3, r3, #1
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	f107 0108 	add.w	r1, r7, #8
 800cea4:	f107 0320 	add.w	r3, r7, #32
 800cea8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7ff fc8d 	bl	800c7cc <find_volume>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800ceb8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f040 81cf 	bne.w	800d260 <f_open+0x408>
		INIT_BUF(dj);
 800cec2:	f107 0320 	add.w	r3, r7, #32
 800cec6:	f107 0214 	add.w	r2, r7, #20
 800ceca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800cece:	f107 0308 	add.w	r3, r7, #8
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	f107 0320 	add.w	r3, r7, #32
 800ced8:	4611      	mov	r1, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff fb5a 	bl	800c594 <follow_path>
 800cee0:	4603      	mov	r3, r0
 800cee2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800cee6:	f107 0320 	add.w	r3, r7, #32
 800ceea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ceee:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cef2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d11a      	bne.n	800cf30 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800cefa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d103      	bne.n	800cf0a <f_open+0xb2>
				res = FR_INVALID_NAME;
 800cf02:	2306      	movs	r3, #6
 800cf04:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800cf08:	e012      	b.n	800cf30 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf0a:	1dfb      	adds	r3, r7, #7
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	f023 0301 	bic.w	r3, r3, #1
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	bf14      	ite	ne
 800cf16:	2301      	movne	r3, #1
 800cf18:	2300      	moveq	r3, #0
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	f107 0320 	add.w	r3, r7, #32
 800cf22:	4611      	mov	r1, r2
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fe f909 	bl	800b13c <chk_lock>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf30:	1dfb      	adds	r3, r7, #7
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	f003 031c 	and.w	r3, r3, #28
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 80cc 	beq.w	800d0d6 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 800cf3e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d01f      	beq.n	800cf86 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800cf46:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cf4a:	2b04      	cmp	r3, #4
 800cf4c:	d10e      	bne.n	800cf6c <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf4e:	f7fe f961 	bl	800b214 <enq_lock>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d006      	beq.n	800cf66 <f_open+0x10e>
 800cf58:	f107 0320 	add.w	r3, r7, #32
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff f9af 	bl	800c2c0 <dir_register>
 800cf62:	4603      	mov	r3, r0
 800cf64:	e000      	b.n	800cf68 <f_open+0x110>
 800cf66:	2312      	movs	r3, #18
 800cf68:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf6c:	1dfb      	adds	r3, r7, #7
 800cf6e:	1dfa      	adds	r2, r7, #7
 800cf70:	7812      	ldrb	r2, [r2, #0]
 800cf72:	f042 0208 	orr.w	r2, r2, #8
 800cf76:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800cf78:	f107 0320 	add.w	r3, r7, #32
 800cf7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf80:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800cf84:	e014      	b.n	800cfb0 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf86:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cf8a:	330b      	adds	r3, #11
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	f003 0311 	and.w	r3, r3, #17
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d003      	beq.n	800cf9e <f_open+0x146>
					res = FR_DENIED;
 800cf96:	2307      	movs	r3, #7
 800cf98:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800cf9c:	e008      	b.n	800cfb0 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800cf9e:	1dfb      	adds	r3, r7, #7
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	f003 0304 	and.w	r3, r3, #4
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d002      	beq.n	800cfb0 <f_open+0x158>
						res = FR_EXIST;
 800cfaa:	2308      	movs	r3, #8
 800cfac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cfb0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f040 80af 	bne.w	800d118 <f_open+0x2c0>
 800cfba:	1dfb      	adds	r3, r7, #7
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	f003 0308 	and.w	r3, r3, #8
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 80a8 	beq.w	800d118 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800cfc8:	f7fd fec2 	bl	800ad50 <get_fattime>
 800cfcc:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800cfd0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cfd4:	330e      	adds	r3, #14
 800cfd6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800cfda:	b2d2      	uxtb	r2, r2
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	0a1b      	lsrs	r3, r3, #8
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cfec:	330f      	adds	r3, #15
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	701a      	strb	r2, [r3, #0]
 800cff2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800cff6:	0c1a      	lsrs	r2, r3, #16
 800cff8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cffc:	3310      	adds	r3, #16
 800cffe:	b2d2      	uxtb	r2, r2
 800d000:	701a      	strb	r2, [r3, #0]
 800d002:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800d006:	0e1a      	lsrs	r2, r3, #24
 800d008:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d00c:	3311      	adds	r3, #17
 800d00e:	b2d2      	uxtb	r2, r2
 800d010:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800d012:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d016:	330b      	adds	r3, #11
 800d018:	2200      	movs	r2, #0
 800d01a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800d01c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d020:	331c      	adds	r3, #28
 800d022:	2200      	movs	r2, #0
 800d024:	701a      	strb	r2, [r3, #0]
 800d026:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d02a:	331d      	adds	r3, #29
 800d02c:	2200      	movs	r2, #0
 800d02e:	701a      	strb	r2, [r3, #0]
 800d030:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d034:	331e      	adds	r3, #30
 800d036:	2200      	movs	r2, #0
 800d038:	701a      	strb	r2, [r3, #0]
 800d03a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d03e:	331f      	adds	r3, #31
 800d040:	2200      	movs	r2, #0
 800d042:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800d044:	f107 0320 	add.w	r3, r7, #32
 800d048:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d04c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800d050:	4618      	mov	r0, r3
 800d052:	f7ff f834 	bl	800c0be <ld_clust>
 800d056:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800d05a:	2100      	movs	r1, #0
 800d05c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800d060:	f7ff f85a 	bl	800c118 <st_clust>
				dj.fs->wflag = 1;
 800d064:	f107 0320 	add.w	r3, r7, #32
 800d068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d06c:	2201      	movs	r2, #1
 800d06e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800d072:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800d076:	2b00      	cmp	r3, #0
 800d078:	d04e      	beq.n	800d118 <f_open+0x2c0>
					dw = dj.fs->winsect;
 800d07a:	f107 0320 	add.w	r3, r7, #32
 800d07e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d082:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800d086:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800d08a:	f107 0320 	add.w	r3, r7, #32
 800d08e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d092:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800d096:	4618      	mov	r0, r3
 800d098:	f7fe fd11 	bl	800babe <remove_chain>
 800d09c:	4603      	mov	r3, r0
 800d09e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800d0a2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d136      	bne.n	800d118 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800d0aa:	f107 0320 	add.w	r3, r7, #32
 800d0ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0b2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800d0b6:	3a01      	subs	r2, #1
 800d0b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800d0bc:	f107 0320 	add.w	r3, r7, #32
 800d0c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d0c4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fe fa34 	bl	800b536 <move_window>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800d0d4:	e020      	b.n	800d118 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800d0d6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d11c      	bne.n	800d118 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800d0de:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d0e2:	330b      	adds	r3, #11
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	f003 0310 	and.w	r3, r3, #16
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d003      	beq.n	800d0f6 <f_open+0x29e>
					res = FR_NO_FILE;
 800d0ee:	2304      	movs	r3, #4
 800d0f0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800d0f4:	e010      	b.n	800d118 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800d0f6:	1dfb      	adds	r3, r7, #7
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	f003 0302 	and.w	r3, r3, #2
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00a      	beq.n	800d118 <f_open+0x2c0>
 800d102:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d106:	330b      	adds	r3, #11
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d002      	beq.n	800d118 <f_open+0x2c0>
						res = FR_DENIED;
 800d112:	2307      	movs	r3, #7
 800d114:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800d118:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d13d      	bne.n	800d19c <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d120:	1dfb      	adds	r3, r7, #7
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	f003 0308 	and.w	r3, r3, #8
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d005      	beq.n	800d138 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 800d12c:	1dfb      	adds	r3, r7, #7
 800d12e:	1dfa      	adds	r2, r7, #7
 800d130:	7812      	ldrb	r2, [r2, #0]
 800d132:	f042 0220 	orr.w	r2, r2, #32
 800d136:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800d138:	f107 0320 	add.w	r3, r7, #32
 800d13c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d140:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800d144:	f107 030c 	add.w	r3, r7, #12
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800d14e:	f107 030c 	add.w	r3, r7, #12
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800d158:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d15c:	1dfb      	adds	r3, r7, #7
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	f023 0301 	bic.w	r3, r3, #1
 800d164:	2b00      	cmp	r3, #0
 800d166:	bf14      	ite	ne
 800d168:	2301      	movne	r3, #1
 800d16a:	2300      	moveq	r3, #0
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	461a      	mov	r2, r3
 800d170:	f107 0320 	add.w	r3, r7, #32
 800d174:	4611      	mov	r1, r2
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe f870 	bl	800b25c <inc_lock>
 800d17c:	4602      	mov	r2, r0
 800d17e:	f107 030c 	add.w	r3, r7, #12
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800d188:	f107 030c 	add.w	r3, r7, #12
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800d192:	2b00      	cmp	r3, #0
 800d194:	d102      	bne.n	800d19c <f_open+0x344>
 800d196:	2302      	movs	r3, #2
 800d198:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800d19c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d15d      	bne.n	800d260 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800d1a4:	f107 030c 	add.w	r3, r7, #12
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	1dfa      	adds	r2, r7, #7
 800d1ac:	7812      	ldrb	r2, [r2, #0]
 800d1ae:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800d1b2:	f107 030c 	add.w	r3, r7, #12
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800d1be:	f107 0320 	add.w	r3, r7, #32
 800d1c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d1c6:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe ff77 	bl	800c0be <ld_clust>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	f107 030c 	add.w	r3, r7, #12
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800d1dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d1e0:	331f      	adds	r3, #31
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	061a      	lsls	r2, r3, #24
 800d1e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800d1ea:	331e      	adds	r3, #30
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	041b      	lsls	r3, r3, #16
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800d1f6:	321d      	adds	r2, #29
 800d1f8:	7812      	ldrb	r2, [r2, #0]
 800d1fa:	0212      	lsls	r2, r2, #8
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800d202:	321c      	adds	r2, #28
 800d204:	7812      	ldrb	r2, [r2, #0]
 800d206:	431a      	orrs	r2, r3
 800d208:	f107 030c 	add.w	r3, r7, #12
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800d212:	f107 030c 	add.w	r3, r7, #12
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2200      	movs	r2, #0
 800d21a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800d21e:	f107 030c 	add.w	r3, r7, #12
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2200      	movs	r2, #0
 800d226:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800d22a:	f107 030c 	add.w	r3, r7, #12
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2200      	movs	r2, #0
 800d232:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800d236:	f107 0320 	add.w	r3, r7, #32
 800d23a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d23e:	f107 030c 	add.w	r3, r7, #12
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800d248:	f107 030c 	add.w	r3, r7, #12
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d252:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d256:	f107 030c 	add.w	r3, r7, #12
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800d260:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800d264:	4618      	mov	r0, r3
 800d266:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b08c      	sub	sp, #48	; 0x30
 800d272:	af00      	add	r7, sp, #0
 800d274:	60f8      	str	r0, [r7, #12]
 800d276:	60b9      	str	r1, [r7, #8]
 800d278:	607a      	str	r2, [r7, #4]
 800d27a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f7ff fd6a 	bl	800cd60 <validate>
 800d28c:	4603      	mov	r3, r0
 800d28e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d290:	7ffb      	ldrb	r3, [r7, #31]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <f_read+0x2c>
 800d296:	7ffb      	ldrb	r3, [r7, #31]
 800d298:	e150      	b.n	800d53c <f_read+0x2ce>
	if (fp->err)								/* Check error */
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d003      	beq.n	800d2ac <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d2aa:	e147      	b.n	800d53c <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d2b2:	f003 0301 	and.w	r3, r3, #1
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d2ba:	2307      	movs	r3, #7
 800d2bc:	e13e      	b.n	800d53c <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	f240 812d 	bls.w	800d532 <f_read+0x2c4>
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d2dc:	e129      	b.n	800d532 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f040 80f2 	bne.w	800d4d2 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d2f4:	0a5b      	lsrs	r3, r3, #9
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d2fe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d302:	3b01      	subs	r3, #1
 800d304:	b2db      	uxtb	r3, r3
 800d306:	4013      	ands	r3, r2
 800d308:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800d30a:	7dfb      	ldrb	r3, [r7, #23]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d139      	bne.n	800d384 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d316:	2b00      	cmp	r3, #0
 800d318:	d104      	bne.n	800d324 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d320:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d322:	e018      	b.n	800d356 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d008      	beq.n	800d340 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d334:	4619      	mov	r1, r3
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f7fe fcb8 	bl	800bcac <clmt_clust>
 800d33c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d33e:	e00a      	b.n	800d356 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d34c:	4619      	mov	r1, r3
 800d34e:	4610      	mov	r0, r2
 800d350:	f7fe f9ed 	bl	800b72e <get_fat>
 800d354:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d805      	bhi.n	800d368 <f_read+0xfa>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2202      	movs	r2, #2
 800d360:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d364:	2302      	movs	r3, #2
 800d366:	e0e9      	b.n	800d53c <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36e:	d105      	bne.n	800d37c <f_read+0x10e>
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2201      	movs	r2, #1
 800d374:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d378:	2301      	movs	r3, #1
 800d37a:	e0df      	b.n	800d53c <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d390:	4619      	mov	r1, r3
 800d392:	4610      	mov	r0, r2
 800d394:	f7fe f9aa 	bl	800b6ec <clust2sect>
 800d398:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d105      	bne.n	800d3ac <f_read+0x13e>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	e0c7      	b.n	800d53c <f_read+0x2ce>
			sect += csect;
 800d3ac:	7dfb      	ldrb	r3, [r7, #23]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	0a5b      	lsrs	r3, r3, #9
 800d3b8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d046      	beq.n	800d44e <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d3c0:	7dfa      	ldrb	r2, [r7, #23]
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c4:	4413      	add	r3, r2
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800d3cc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d908      	bls.n	800d3e6 <f_read+0x178>
					cc = fp->fs->csize - csect;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d3da:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d3de:	461a      	mov	r2, r3
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d3ec:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	6a39      	ldr	r1, [r7, #32]
 800d3f6:	f7fd fdcb 	bl	800af90 <disk_read>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d005      	beq.n	800d40c <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d408:	2301      	movs	r3, #1
 800d40a:	e097      	b.n	800d53c <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d416:	2b00      	cmp	r3, #0
 800d418:	d015      	beq.n	800d446 <f_read+0x1d8>
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d426:	429a      	cmp	r2, r3
 800d428:	d90d      	bls.n	800d446 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	025b      	lsls	r3, r3, #9
 800d436:	6a3a      	ldr	r2, [r7, #32]
 800d438:	4413      	add	r3, r2
 800d43a:	68f9      	ldr	r1, [r7, #12]
 800d43c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d440:	4618      	mov	r0, r3
 800d442:	f7fd fe03 	bl	800b04c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	025b      	lsls	r3, r3, #9
 800d44a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800d44c:	e05b      	b.n	800d506 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d454:	693a      	ldr	r2, [r7, #16]
 800d456:	429a      	cmp	r2, r3
 800d458:	d037      	beq.n	800d4ca <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d464:	2b00      	cmp	r3, #0
 800d466:	d01d      	beq.n	800d4a4 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d46e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d472:	68f9      	ldr	r1, [r7, #12]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d47a:	2301      	movs	r3, #1
 800d47c:	f7fd fda8 	bl	800afd0 <disk_write>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d005      	beq.n	800d492 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2201      	movs	r2, #1
 800d48a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d48e:	2301      	movs	r3, #1
 800d490:	e054      	b.n	800d53c <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d4aa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d4ae:	68f9      	ldr	r1, [r7, #12]
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	693a      	ldr	r2, [r7, #16]
 800d4b4:	f7fd fd6c 	bl	800af90 <disk_read>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d005      	beq.n	800d4ca <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e038      	b.n	800d53c <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d4d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d4e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800d4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d901      	bls.n	800d4ee <f_read+0x280>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4fe:	4619      	mov	r1, r3
 800d500:	6a38      	ldr	r0, [r7, #32]
 800d502:	f7fd fda3 	bl	800b04c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d506:	6a3a      	ldr	r2, [r7, #32]
 800d508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50a:	4413      	add	r3, r2
 800d50c:	623b      	str	r3, [r7, #32]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d516:	441a      	add	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d524:	441a      	add	r2, r3
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	601a      	str	r2, [r3, #0]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	f47f aed2 	bne.w	800d2de <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3730      	adds	r7, #48	; 0x30
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7ff fc07 	bl	800cd60 <validate>
 800d552:	4603      	mov	r3, r0
 800d554:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d556:	7dfb      	ldrb	r3, [r7, #23]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f040 80a8 	bne.w	800d6ae <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d564:	f003 0320 	and.w	r3, r3, #32
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 80a0 	beq.w	800d6ae <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d019      	beq.n	800d5b0 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d582:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d586:	6879      	ldr	r1, [r7, #4]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d58e:	2301      	movs	r3, #1
 800d590:	f7fd fd1e 	bl	800afd0 <disk_write>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d59a:	2301      	movs	r3, #1
 800d59c:	e088      	b.n	800d6b0 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d5a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d5bc:	4619      	mov	r1, r3
 800d5be:	4610      	mov	r0, r2
 800d5c0:	f7fd ffb9 	bl	800b536 <move_window>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d5c8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d16f      	bne.n	800d6ae <f_sync+0x16a>
				dir = fp->dir_ptr;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d5d4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	330b      	adds	r3, #11
 800d5da:	781a      	ldrb	r2, [r3, #0]
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	330b      	adds	r3, #11
 800d5e0:	f042 0220 	orr.w	r2, r2, #32
 800d5e4:	b2d2      	uxtb	r2, r2
 800d5e6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	331c      	adds	r3, #28
 800d5f2:	b2d2      	uxtb	r2, r2
 800d5f4:	701a      	strb	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	0a1b      	lsrs	r3, r3, #8
 800d600:	b29a      	uxth	r2, r3
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	331d      	adds	r3, #29
 800d606:	b2d2      	uxtb	r2, r2
 800d608:	701a      	strb	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d610:	0c1a      	lsrs	r2, r3, #16
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	331e      	adds	r3, #30
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	701a      	strb	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d620:	0e1a      	lsrs	r2, r3, #24
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	331f      	adds	r3, #31
 800d626:	b2d2      	uxtb	r2, r2
 800d628:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d630:	4619      	mov	r1, r3
 800d632:	6938      	ldr	r0, [r7, #16]
 800d634:	f7fe fd70 	bl	800c118 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d638:	f7fd fb8a 	bl	800ad50 <get_fattime>
 800d63c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	3316      	adds	r3, #22
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	b2d2      	uxtb	r2, r2
 800d646:	701a      	strb	r2, [r3, #0]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	0a1b      	lsrs	r3, r3, #8
 800d64e:	b29a      	uxth	r2, r3
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	3317      	adds	r3, #23
 800d654:	b2d2      	uxtb	r2, r2
 800d656:	701a      	strb	r2, [r3, #0]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	0c1a      	lsrs	r2, r3, #16
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	3318      	adds	r3, #24
 800d660:	b2d2      	uxtb	r2, r2
 800d662:	701a      	strb	r2, [r3, #0]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	0e1a      	lsrs	r2, r3, #24
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	3319      	adds	r3, #25
 800d66c:	b2d2      	uxtb	r2, r2
 800d66e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	3312      	adds	r3, #18
 800d674:	2200      	movs	r2, #0
 800d676:	701a      	strb	r2, [r3, #0]
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	3313      	adds	r3, #19
 800d67c:	2200      	movs	r2, #0
 800d67e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d686:	f023 0320 	bic.w	r3, r3, #32
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fd ff74 	bl	800b592 <sync_fs>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3718      	adds	r7, #24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f7ff ff3f 	bl	800d544 <f_sync>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d6ca:	7bfb      	ldrb	r3, [r7, #15]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d116      	bne.n	800d6fe <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7ff fb45 	bl	800cd60 <validate>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d6da:	7bfb      	ldrb	r3, [r7, #15]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10e      	bne.n	800d6fe <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fd fe6e 	bl	800b3c8 <dec_lock>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d103      	bne.n	800d6fe <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b088      	sub	sp, #32
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <f_opendir+0x14>
 800d718:	2309      	movs	r3, #9
 800d71a:	e073      	b.n	800d804 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800d71c:	4639      	mov	r1, r7
 800d71e:	f107 0318 	add.w	r3, r7, #24
 800d722:	2200      	movs	r2, #0
 800d724:	4618      	mov	r0, r3
 800d726:	f7ff f851 	bl	800c7cc <find_volume>
 800d72a:	4603      	mov	r3, r0
 800d72c:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800d72e:	7ffb      	ldrb	r3, [r7, #31]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d15f      	bne.n	800d7f4 <f_opendir+0xec>
		dp->fs = fs;
 800d734:	69ba      	ldr	r2, [r7, #24]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f107 020c 	add.w	r2, r7, #12
 800d742:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	4619      	mov	r1, r3
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7fe ff22 	bl	800c594 <follow_path>
 800d750:	4603      	mov	r3, r0
 800d752:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800d754:	7ffb      	ldrb	r3, [r7, #31]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d147      	bne.n	800d7ea <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d760:	2b00      	cmp	r3, #0
 800d762:	d017      	beq.n	800d794 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d76a:	330b      	adds	r3, #11
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	f003 0310 	and.w	r3, r3, #16
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00c      	beq.n	800d790 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 800d776:	69ba      	ldr	r2, [r7, #24]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d77e:	4619      	mov	r1, r3
 800d780:	4610      	mov	r0, r2
 800d782:	f7fe fc9c 	bl	800c0be <ld_clust>
 800d786:	4602      	mov	r2, r0
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800d78e:	e001      	b.n	800d794 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800d790:	2305      	movs	r3, #5
 800d792:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800d794:	7ffb      	ldrb	r3, [r7, #31]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d127      	bne.n	800d7ea <f_opendir+0xe2>
				dp->id = fs->id;
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7fe fab3 	bl	800bd14 <dir_sdi>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800d7b2:	7ffb      	ldrb	r3, [r7, #31]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d118      	bne.n	800d7ea <f_opendir+0xe2>
					if (dp->sclust) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00f      	beq.n	800d7e2 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f7fd fd49 	bl	800b25c <inc_lock>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d106      	bne.n	800d7ea <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 800d7dc:	2312      	movs	r3, #18
 800d7de:	77fb      	strb	r3, [r7, #31]
 800d7e0:	e003      	b.n	800d7ea <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d7ea:	7ffb      	ldrb	r3, [r7, #31]
 800d7ec:	2b04      	cmp	r3, #4
 800d7ee:	d101      	bne.n	800d7f4 <f_opendir+0xec>
 800d7f0:	2305      	movs	r3, #5
 800d7f2:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800d7f4:	7ffb      	ldrb	r3, [r7, #31]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <f_opendir+0xfa>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 800d802:	7ffb      	ldrb	r3, [r7, #31]
}
 800d804:	4618      	mov	r0, r3
 800d806:	3720      	adds	r7, #32
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7ff faa2 	bl	800cd60 <validate>
 800d81c:	4603      	mov	r3, r0
 800d81e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d820:	7dfb      	ldrb	r3, [r7, #23]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d133      	bne.n	800d88e <f_readdir+0x82>
		if (!fno) {
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d106      	bne.n	800d83a <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d82c:	2100      	movs	r1, #0
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7fe fa70 	bl	800bd14 <dir_sdi>
 800d834:	4603      	mov	r3, r0
 800d836:	75fb      	strb	r3, [r7, #23]
 800d838:	e029      	b.n	800d88e <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f107 0208 	add.w	r2, r7, #8
 800d840:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800d844:	2100      	movs	r1, #0
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7fe fcdb 	bl	800c202 <dir_read>
 800d84c:	4603      	mov	r3, r0
 800d84e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800d850:	7dfb      	ldrb	r3, [r7, #23]
 800d852:	2b04      	cmp	r3, #4
 800d854:	d105      	bne.n	800d862 <f_readdir+0x56>
				dp->sect = 0;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800d862:	7dfb      	ldrb	r3, [r7, #23]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d112      	bne.n	800d88e <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7fe fd61 	bl	800c332 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d870:	2100      	movs	r1, #0
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7fe fae2 	bl	800be3c <dir_next>
 800d878:	4603      	mov	r3, r0
 800d87a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800d87c:	7dfb      	ldrb	r3, [r7, #23]
 800d87e:	2b04      	cmp	r3, #4
 800d880:	d105      	bne.n	800d88e <f_readdir+0x82>
					dp->sect = 0;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800d88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b098      	sub	sp, #96	; 0x60
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	72fb      	strb	r3, [r7, #11]
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
 800d8a6:	7afb      	ldrb	r3, [r7, #11]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d902      	bls.n	800d8b2 <f_mkfs+0x1a>
 800d8ac:	2313      	movs	r3, #19
 800d8ae:	f000 bc8c 	b.w	800e1ca <f_mkfs+0x932>
	vol = get_ldnumber(&path);
 800d8b2:	f107 030c 	add.w	r3, r7, #12
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fe feda 	bl	800c670 <get_ldnumber>
 800d8bc:	6378      	str	r0, [r7, #52]	; 0x34
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	da02      	bge.n	800d8ca <f_mkfs+0x32>
 800d8c4:	230b      	movs	r3, #11
 800d8c6:	f000 bc80 	b.w	800e1ca <f_mkfs+0x932>
	fs = FatFs[vol];
 800d8ca:	4aa5      	ldr	r2, [pc, #660]	; (800db60 <f_mkfs+0x2c8>)
 800d8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8d2:	633b      	str	r3, [r7, #48]	; 0x30
	if (!fs) return FR_NOT_ENABLED;
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d102      	bne.n	800d8e0 <f_mkfs+0x48>
 800d8da:	230c      	movs	r3, #12
 800d8dc:	f000 bc75 	b.w	800e1ca <f_mkfs+0x932>
	fs->fs_type = 0;
 800d8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	pdrv = LD2PD(vol);	/* Physical drive */
 800d8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	/* Get disk statics */
	stat = disk_initialize(pdrv);
 800d8f4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fd fb23 	bl	800af44 <disk_initialize>
 800d8fe:	4603      	mov	r3, r0
 800d900:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800d904:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800d908:	f003 0301 	and.w	r3, r3, #1
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <f_mkfs+0x7e>
 800d910:	2303      	movs	r3, #3
 800d912:	f000 bc5a 	b.w	800e1ca <f_mkfs+0x932>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d916:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800d91a:	f003 0304 	and.w	r3, r3, #4
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d002      	beq.n	800d928 <f_mkfs+0x90>
 800d922:	230a      	movs	r3, #10
 800d924:	f000 bc51 	b.w	800e1ca <f_mkfs+0x932>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 800d928:	f107 0214 	add.w	r2, r7, #20
 800d92c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d930:	2101      	movs	r1, #1
 800d932:	4618      	mov	r0, r3
 800d934:	f7fd fb6c 	bl	800b010 <disk_ioctl>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d102      	bne.n	800d944 <f_mkfs+0xac>
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	2b7f      	cmp	r3, #127	; 0x7f
 800d942:	d802      	bhi.n	800d94a <f_mkfs+0xb2>
			return FR_DISK_ERR;
 800d944:	2301      	movs	r3, #1
 800d946:	f000 bc40 	b.w	800e1ca <f_mkfs+0x932>
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 800d94a:	7afb      	ldrb	r3, [r7, #11]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d001      	beq.n	800d954 <f_mkfs+0xbc>
 800d950:	2300      	movs	r3, #0
 800d952:	e000      	b.n	800d956 <f_mkfs+0xbe>
 800d954:	233f      	movs	r3, #63	; 0x3f
 800d956:	65bb      	str	r3, [r7, #88]	; 0x58
		n_vol -= b_vol;				/* Volume size */
 800d958:	697a      	ldr	r2, [r7, #20]
 800d95a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d95c:	1ad3      	subs	r3, r2, r3
 800d95e:	617b      	str	r3, [r7, #20]
	}

	if (au & (au - 1)) au = 0;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	1e5a      	subs	r2, r3, #1
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4013      	ands	r3, r2
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d001      	beq.n	800d970 <f_mkfs+0xd8>
 800d96c:	2300      	movs	r3, #0
 800d96e:	607b      	str	r3, [r7, #4]
	if (!au) {						/* AU auto selection */
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d118      	bne.n	800d9a8 <f_mkfs+0x110>
		vs = n_vol / (2000 / (SS(fs) / 512));
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	4a7a      	ldr	r2, [pc, #488]	; (800db64 <f_mkfs+0x2cc>)
 800d97a:	fba2 2303 	umull	r2, r3, r2, r3
 800d97e:	09db      	lsrs	r3, r3, #7
 800d980:	657b      	str	r3, [r7, #84]	; 0x54
		for (i = 0; vs < vst[i]; i++) ;
 800d982:	2300      	movs	r3, #0
 800d984:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d986:	e002      	b.n	800d98e <f_mkfs+0xf6>
 800d988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d98a:	3301      	adds	r3, #1
 800d98c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d98e:	4a76      	ldr	r2, [pc, #472]	; (800db68 <f_mkfs+0x2d0>)
 800d990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d996:	461a      	mov	r2, r3
 800d998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d3f4      	bcc.n	800d988 <f_mkfs+0xf0>
		au = cst[i];
 800d99e:	4a73      	ldr	r2, [pc, #460]	; (800db6c <f_mkfs+0x2d4>)
 800d9a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9a6:	607b      	str	r3, [r7, #4]
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9ae:	d302      	bcc.n	800d9b6 <f_mkfs+0x11e>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	0a5b      	lsrs	r3, r3, #9
 800d9b4:	607b      	str	r3, [r7, #4]
	if (!au) au = 1;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d101      	bne.n	800d9c0 <f_mkfs+0x128>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	607b      	str	r3, [r7, #4]
	if (au > 128) au = 128;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b80      	cmp	r3, #128	; 0x80
 800d9c4:	d901      	bls.n	800d9ca <f_mkfs+0x132>
 800d9c6:	2380      	movs	r3, #128	; 0x80
 800d9c8:	607b      	str	r3, [r7, #4]

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d2:	62bb      	str	r3, [r7, #40]	; 0x28
	fmt = FS_FAT12;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d902      	bls.n	800d9ea <f_mkfs+0x152>
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 800d9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d902      	bls.n	800d9fa <f_mkfs+0x162>
 800d9f4:	2303      	movs	r3, #3
 800d9f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
 800d9fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d9fe:	2b03      	cmp	r3, #3
 800da00:	d10a      	bne.n	800da18 <f_mkfs+0x180>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 800da02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da04:	3382      	adds	r3, #130	; 0x82
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	3b01      	subs	r3, #1
 800da0a:	0a5b      	lsrs	r3, r3, #9
 800da0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		n_rsv = 32;
 800da0e:	2320      	movs	r3, #32
 800da10:	643b      	str	r3, [r7, #64]	; 0x40
		n_dir = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	63bb      	str	r3, [r7, #56]	; 0x38
 800da16:	e018      	b.n	800da4a <f_mkfs+0x1b2>
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 800da18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d107      	bne.n	800da30 <f_mkfs+0x198>
 800da20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da22:	4613      	mov	r3, r2
 800da24:	005b      	lsls	r3, r3, #1
 800da26:	4413      	add	r3, r2
 800da28:	3301      	adds	r3, #1
 800da2a:	085b      	lsrs	r3, r3, #1
 800da2c:	3303      	adds	r3, #3
 800da2e:	e002      	b.n	800da36 <f_mkfs+0x19e>
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	3302      	adds	r3, #2
 800da34:	005b      	lsls	r3, r3, #1
 800da36:	63fb      	str	r3, [r7, #60]	; 0x3c
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 800da38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800da3e:	0a5b      	lsrs	r3, r3, #9
 800da40:	63fb      	str	r3, [r7, #60]	; 0x3c
		n_rsv = 1;
 800da42:	2301      	movs	r3, #1
 800da44:	643b      	str	r3, [r7, #64]	; 0x40
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 800da46:	2320      	movs	r3, #32
 800da48:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 800da4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da4e:	4413      	add	r3, r2
 800da50:	647b      	str	r3, [r7, #68]	; 0x44
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 800da52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da56:	4413      	add	r3, r2
 800da58:	627b      	str	r3, [r7, #36]	; 0x24
	b_data = b_dir + n_dir;				/* Data area start sector */
 800da5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	4413      	add	r3, r2
 800da60:	623b      	str	r3, [r7, #32]
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800da62:	6a3a      	ldr	r2, [r7, #32]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	441a      	add	r2, r3
 800da68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da6a:	1ad2      	subs	r2, r2, r3
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d901      	bls.n	800da76 <f_mkfs+0x1de>
 800da72:	230e      	movs	r3, #14
 800da74:	e3a9      	b.n	800e1ca <f_mkfs+0x932>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 800da76:	f107 0218 	add.w	r2, r7, #24
 800da7a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800da7e:	2103      	movs	r1, #3
 800da80:	4618      	mov	r0, r3
 800da82:	f7fd fac5 	bl	800b010 <disk_ioctl>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d106      	bne.n	800da9a <f_mkfs+0x202>
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <f_mkfs+0x202>
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da98:	d901      	bls.n	800da9e <f_mkfs+0x206>
 800da9a:	2301      	movs	r3, #1
 800da9c:	61bb      	str	r3, [r7, #24]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 800da9e:	69ba      	ldr	r2, [r7, #24]
 800daa0:	6a3b      	ldr	r3, [r7, #32]
 800daa2:	4413      	add	r3, r2
 800daa4:	1e5a      	subs	r2, r3, #1
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	425b      	negs	r3, r3
 800daaa:	4013      	ands	r3, r2
 800daac:	61bb      	str	r3, [r7, #24]
	n = (n - b_data) / N_FATS;
 800daae:	69ba      	ldr	r2, [r7, #24]
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 800dab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daba:	2b03      	cmp	r3, #3
 800dabc:	d108      	bne.n	800dad0 <f_mkfs+0x238>
		n_rsv += n;
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dac2:	4413      	add	r3, r2
 800dac4:	643b      	str	r3, [r7, #64]	; 0x40
		b_fat += n;
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daca:	4413      	add	r3, r2
 800dacc:	647b      	str	r3, [r7, #68]	; 0x44
 800dace:	e003      	b.n	800dad8 <f_mkfs+0x240>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dad4:	4413      	add	r3, r2
 800dad6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 800dad8:	697a      	ldr	r2, [r7, #20]
 800dada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dadc:	1ad2      	subs	r2, r2, r3
 800dade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae0:	1ad2      	subs	r2, r2, r3
 800dae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae4:	1ad2      	subs	r2, r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	fbb2 f3f3 	udiv	r3, r2, r3
 800daec:	62bb      	str	r3, [r7, #40]	; 0x28
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 800daee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	d104      	bne.n	800db00 <f_mkfs+0x268>
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d908      	bls.n	800db12 <f_mkfs+0x27a>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 800db00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db04:	2b03      	cmp	r3, #3
 800db06:	d106      	bne.n	800db16 <f_mkfs+0x27e>
 800db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800db0e:	4293      	cmp	r3, r2
 800db10:	d801      	bhi.n	800db16 <f_mkfs+0x27e>
		return FR_MKFS_ABORTED;
 800db12:	230e      	movs	r3, #14
 800db14:	e359      	b.n	800e1ca <f_mkfs+0x932>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
 800db16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db1a:	2b03      	cmp	r3, #3
 800db1c:	d103      	bne.n	800db26 <f_mkfs+0x28e>
		sys = 0x0C;		/* FAT32X */
 800db1e:	230c      	movs	r3, #12
 800db20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800db24:	e014      	b.n	800db50 <f_mkfs+0x2b8>
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 800db26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d107      	bne.n	800db3e <f_mkfs+0x2a6>
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db34:	d203      	bcs.n	800db3e <f_mkfs+0x2a6>
			sys = 0x01;	/* FAT12(<65536) */
 800db36:	2301      	movs	r3, #1
 800db38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800db3c:	e008      	b.n	800db50 <f_mkfs+0x2b8>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db44:	d201      	bcs.n	800db4a <f_mkfs+0x2b2>
 800db46:	2304      	movs	r3, #4
 800db48:	e000      	b.n	800db4c <f_mkfs+0x2b4>
 800db4a:	2306      	movs	r3, #6
 800db4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
 800db50:	7afb      	ldrb	r3, [r7, #11]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00c      	beq.n	800db70 <f_mkfs+0x2d8>
			md = 0xF0;
 800db56:	23f0      	movs	r3, #240	; 0xf0
 800db58:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800db5c:	e081      	b.n	800dc62 <f_mkfs+0x3ca>
 800db5e:	bf00      	nop
 800db60:	200000e0 	.word	0x200000e0
 800db64:	10624dd3 	.word	0x10624dd3
 800db68:	080143f8 	.word	0x080143f8
 800db6c:	08014410 	.word	0x08014410
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
 800db70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db76:	2100      	movs	r1, #0
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fd fa85 	bl	800b088 <mem_set>
			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 800db7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800db84:	61fb      	str	r3, [r7, #28]
			tbl[1] = 1;						/* Partition start head */
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	3301      	adds	r3, #1
 800db8a:	2201      	movs	r2, #1
 800db8c:	701a      	strb	r2, [r3, #0]
			tbl[2] = 1;						/* Partition start sector */
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	3302      	adds	r3, #2
 800db92:	2201      	movs	r2, #1
 800db94:	701a      	strb	r2, [r3, #0]
			tbl[3] = 0;						/* Partition start cylinder */
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	3303      	adds	r3, #3
 800db9a:	2200      	movs	r2, #0
 800db9c:	701a      	strb	r2, [r3, #0]
			tbl[4] = sys;					/* System type */
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	3304      	adds	r3, #4
 800dba2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800dba6:	701a      	strb	r2, [r3, #0]
			tbl[5] = 254;					/* Partition end head */
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	3305      	adds	r3, #5
 800dbac:	22fe      	movs	r2, #254	; 0xfe
 800dbae:	701a      	strb	r2, [r3, #0]
			n = (b_vol + n_vol) / 63 / 255;
 800dbb0:	697a      	ldr	r2, [r7, #20]
 800dbb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbb4:	441a      	add	r2, r3
 800dbb6:	4b58      	ldr	r3, [pc, #352]	; (800dd18 <f_mkfs+0x480>)
 800dbb8:	fba3 1302 	umull	r1, r3, r3, r2
 800dbbc:	1ad2      	subs	r2, r2, r3
 800dbbe:	0852      	lsrs	r2, r2, #1
 800dbc0:	4413      	add	r3, r2
 800dbc2:	0b5b      	lsrs	r3, r3, #13
 800dbc4:	61bb      	str	r3, [r7, #24]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	089b      	lsrs	r3, r3, #2
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	3306      	adds	r3, #6
 800dbd0:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800dbd4:	b2d2      	uxtb	r2, r2
 800dbd6:	701a      	strb	r2, [r3, #0]
			tbl[7] = (BYTE)n;				/* End cylinder */
 800dbd8:	69ba      	ldr	r2, [r7, #24]
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	3307      	adds	r3, #7
 800dbde:	b2d2      	uxtb	r2, r2
 800dbe0:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	3308      	adds	r3, #8
 800dbe6:	223f      	movs	r2, #63	; 0x3f
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	3309      	adds	r3, #9
 800dbee:	2200      	movs	r2, #0
 800dbf0:	701a      	strb	r2, [r3, #0]
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	330a      	adds	r3, #10
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	701a      	strb	r2, [r3, #0]
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	330b      	adds	r3, #11
 800dbfe:	2200      	movs	r2, #0
 800dc00:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	330c      	adds	r3, #12
 800dc08:	b2d2      	uxtb	r2, r2
 800dc0a:	701a      	strb	r2, [r3, #0]
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	0a1b      	lsrs	r3, r3, #8
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	330d      	adds	r3, #13
 800dc18:	b2d2      	uxtb	r2, r2
 800dc1a:	701a      	strb	r2, [r3, #0]
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	0c1a      	lsrs	r2, r3, #16
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	330e      	adds	r3, #14
 800dc24:	b2d2      	uxtb	r2, r2
 800dc26:	701a      	strb	r2, [r3, #0]
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	0e1a      	lsrs	r2, r3, #24
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	330f      	adds	r3, #15
 800dc30:	b2d2      	uxtb	r2, r2
 800dc32:	701a      	strb	r2, [r3, #0]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	2255      	movs	r2, #85	; 0x55
 800dc38:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800dc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3e:	22aa      	movs	r2, #170	; 0xaa
 800dc40:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 800dc44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc46:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f7fd f9bf 	bl	800afd0 <disk_write>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d001      	beq.n	800dc5c <f_mkfs+0x3c4>
				return FR_DISK_ERR;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e2b6      	b.n	800e1ca <f_mkfs+0x932>
			md = 0xF8;
 800dc5c:	23f8      	movs	r3, #248	; 0xf8
 800dc5e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	61fb      	str	r3, [r7, #28]
	mem_set(tbl, 0, SS(fs));
 800dc66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	69f8      	ldr	r0, [r7, #28]
 800dc6e:	f7fd fa0b 	bl	800b088 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 800dc72:	220b      	movs	r2, #11
 800dc74:	4929      	ldr	r1, [pc, #164]	; (800dd1c <f_mkfs+0x484>)
 800dc76:	69f8      	ldr	r0, [r7, #28]
 800dc78:	f7fd f9e8 	bl	800b04c <mem_cpy>
	i = SS(fs);								/* Sector size */
 800dc7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc80:	65fb      	str	r3, [r7, #92]	; 0x5c
	ST_WORD(tbl + BPB_BytsPerSec, i);
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	330b      	adds	r3, #11
 800dc86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc88:	b2d2      	uxtb	r2, r2
 800dc8a:	701a      	strb	r2, [r3, #0]
 800dc8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	0a1b      	lsrs	r3, r3, #8
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	330c      	adds	r3, #12
 800dc98:	b2d2      	uxtb	r2, r2
 800dc9a:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	330d      	adds	r3, #13
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	b2d2      	uxtb	r2, r2
 800dca4:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	330e      	adds	r3, #14
 800dcaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcac:	b2d2      	uxtb	r2, r2
 800dcae:	701a      	strb	r2, [r3, #0]
 800dcb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	0a1b      	lsrs	r3, r3, #8
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	330f      	adds	r3, #15
 800dcbc:	b2d2      	uxtb	r2, r2
 800dcbe:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	3310      	adds	r3, #16
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	701a      	strb	r2, [r3, #0]
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 800dcc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dccc:	2b03      	cmp	r3, #3
 800dcce:	d101      	bne.n	800dcd4 <f_mkfs+0x43c>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e001      	b.n	800dcd8 <f_mkfs+0x440>
 800dcd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcd8:	65fb      	str	r3, [r7, #92]	; 0x5c
	ST_WORD(tbl + BPB_RootEntCnt, i);
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	3311      	adds	r3, #17
 800dcde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dce0:	b2d2      	uxtb	r2, r2
 800dce2:	701a      	strb	r2, [r3, #0]
 800dce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	0a1b      	lsrs	r3, r3, #8
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	3312      	adds	r3, #18
 800dcf0:	b2d2      	uxtb	r2, r2
 800dcf2:	701a      	strb	r2, [r3, #0]
	if (n_vol < 0x10000) {					/* Number of total sectors */
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcfa:	d211      	bcs.n	800dd20 <f_mkfs+0x488>
		ST_WORD(tbl + BPB_TotSec16, n_vol);
 800dcfc:	697a      	ldr	r2, [r7, #20]
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	3313      	adds	r3, #19
 800dd02:	b2d2      	uxtb	r2, r2
 800dd04:	701a      	strb	r2, [r3, #0]
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	0a1b      	lsrs	r3, r3, #8
 800dd0c:	b29a      	uxth	r2, r3
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	3314      	adds	r3, #20
 800dd12:	b2d2      	uxtb	r2, r2
 800dd14:	701a      	strb	r2, [r3, #0]
 800dd16:	e01c      	b.n	800dd52 <f_mkfs+0x4ba>
 800dd18:	0515565b 	.word	0x0515565b
 800dd1c:	0800f974 	.word	0x0800f974
	} else {
		ST_DWORD(tbl + BPB_TotSec32, n_vol);
 800dd20:	697a      	ldr	r2, [r7, #20]
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	3320      	adds	r3, #32
 800dd26:	b2d2      	uxtb	r2, r2
 800dd28:	701a      	strb	r2, [r3, #0]
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	0a1b      	lsrs	r3, r3, #8
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	3321      	adds	r3, #33	; 0x21
 800dd36:	b2d2      	uxtb	r2, r2
 800dd38:	701a      	strb	r2, [r3, #0]
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	0c1a      	lsrs	r2, r3, #16
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	3322      	adds	r3, #34	; 0x22
 800dd42:	b2d2      	uxtb	r2, r2
 800dd44:	701a      	strb	r2, [r3, #0]
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	0e1a      	lsrs	r2, r3, #24
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	3323      	adds	r3, #35	; 0x23
 800dd4e:	b2d2      	uxtb	r2, r2
 800dd50:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	3315      	adds	r3, #21
 800dd56:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dd5a:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	3318      	adds	r3, #24
 800dd60:	223f      	movs	r2, #63	; 0x3f
 800dd62:	701a      	strb	r2, [r3, #0]
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	3319      	adds	r3, #25
 800dd68:	2200      	movs	r2, #0
 800dd6a:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	331a      	adds	r3, #26
 800dd70:	22ff      	movs	r2, #255	; 0xff
 800dd72:	701a      	strb	r2, [r3, #0]
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	331b      	adds	r3, #27
 800dd78:	2200      	movs	r2, #0
 800dd7a:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	331c      	adds	r3, #28
 800dd80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd82:	b2d2      	uxtb	r2, r2
 800dd84:	701a      	strb	r2, [r3, #0]
 800dd86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	0a1b      	lsrs	r3, r3, #8
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	331d      	adds	r3, #29
 800dd92:	b2d2      	uxtb	r2, r2
 800dd94:	701a      	strb	r2, [r3, #0]
 800dd96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd98:	0c1a      	lsrs	r2, r3, #16
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	331e      	adds	r3, #30
 800dd9e:	b2d2      	uxtb	r2, r2
 800dda0:	701a      	strb	r2, [r3, #0]
 800dda2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dda4:	0e1a      	lsrs	r2, r3, #24
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	331f      	adds	r3, #31
 800ddaa:	b2d2      	uxtb	r2, r2
 800ddac:	701a      	strb	r2, [r3, #0]
	n = GET_FATTIME();						/* Use current time as VSN */
 800ddae:	f7fc ffcf 	bl	800ad50 <get_fattime>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	61bb      	str	r3, [r7, #24]
	if (fmt == FS_FAT32) {
 800ddb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d161      	bne.n	800de82 <f_mkfs+0x5ea>
		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 800ddbe:	69ba      	ldr	r2, [r7, #24]
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	3343      	adds	r3, #67	; 0x43
 800ddc4:	b2d2      	uxtb	r2, r2
 800ddc6:	701a      	strb	r2, [r3, #0]
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	0a1b      	lsrs	r3, r3, #8
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	3344      	adds	r3, #68	; 0x44
 800ddd4:	b2d2      	uxtb	r2, r2
 800ddd6:	701a      	strb	r2, [r3, #0]
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	0c1a      	lsrs	r2, r3, #16
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	3345      	adds	r3, #69	; 0x45
 800dde0:	b2d2      	uxtb	r2, r2
 800dde2:	701a      	strb	r2, [r3, #0]
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	0e1a      	lsrs	r2, r3, #24
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	3346      	adds	r3, #70	; 0x46
 800ddec:	b2d2      	uxtb	r2, r2
 800ddee:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	3324      	adds	r3, #36	; 0x24
 800ddf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ddf6:	b2d2      	uxtb	r2, r2
 800ddf8:	701a      	strb	r2, [r3, #0]
 800ddfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	0a1b      	lsrs	r3, r3, #8
 800de00:	b29a      	uxth	r2, r3
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	3325      	adds	r3, #37	; 0x25
 800de06:	b2d2      	uxtb	r2, r2
 800de08:	701a      	strb	r2, [r3, #0]
 800de0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0c:	0c1a      	lsrs	r2, r3, #16
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	3326      	adds	r3, #38	; 0x26
 800de12:	b2d2      	uxtb	r2, r2
 800de14:	701a      	strb	r2, [r3, #0]
 800de16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de18:	0e1a      	lsrs	r2, r3, #24
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	3327      	adds	r3, #39	; 0x27
 800de1e:	b2d2      	uxtb	r2, r2
 800de20:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	332c      	adds	r3, #44	; 0x2c
 800de26:	2202      	movs	r2, #2
 800de28:	701a      	strb	r2, [r3, #0]
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	332d      	adds	r3, #45	; 0x2d
 800de2e:	2200      	movs	r2, #0
 800de30:	701a      	strb	r2, [r3, #0]
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	332e      	adds	r3, #46	; 0x2e
 800de36:	2200      	movs	r2, #0
 800de38:	701a      	strb	r2, [r3, #0]
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	332f      	adds	r3, #47	; 0x2f
 800de3e:	2200      	movs	r2, #0
 800de40:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	3330      	adds	r3, #48	; 0x30
 800de46:	2201      	movs	r2, #1
 800de48:	701a      	strb	r2, [r3, #0]
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	3331      	adds	r3, #49	; 0x31
 800de4e:	2200      	movs	r2, #0
 800de50:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	3332      	adds	r3, #50	; 0x32
 800de56:	2206      	movs	r2, #6
 800de58:	701a      	strb	r2, [r3, #0]
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	3333      	adds	r3, #51	; 0x33
 800de5e:	2200      	movs	r2, #0
 800de60:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	3340      	adds	r3, #64	; 0x40
 800de66:	2280      	movs	r2, #128	; 0x80
 800de68:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	3342      	adds	r3, #66	; 0x42
 800de6e:	2229      	movs	r2, #41	; 0x29
 800de70:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	3347      	adds	r3, #71	; 0x47
 800de76:	2213      	movs	r2, #19
 800de78:	498b      	ldr	r1, [pc, #556]	; (800e0a8 <f_mkfs+0x810>)
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fd f8e6 	bl	800b04c <mem_cpy>
 800de80:	e034      	b.n	800deec <f_mkfs+0x654>
	} else {
		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
 800de82:	69ba      	ldr	r2, [r7, #24]
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	3327      	adds	r3, #39	; 0x27
 800de88:	b2d2      	uxtb	r2, r2
 800de8a:	701a      	strb	r2, [r3, #0]
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	0a1b      	lsrs	r3, r3, #8
 800de92:	b29a      	uxth	r2, r3
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	3328      	adds	r3, #40	; 0x28
 800de98:	b2d2      	uxtb	r2, r2
 800de9a:	701a      	strb	r2, [r3, #0]
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	0c1a      	lsrs	r2, r3, #16
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	3329      	adds	r3, #41	; 0x29
 800dea4:	b2d2      	uxtb	r2, r2
 800dea6:	701a      	strb	r2, [r3, #0]
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	0e1a      	lsrs	r2, r3, #24
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	332a      	adds	r3, #42	; 0x2a
 800deb0:	b2d2      	uxtb	r2, r2
 800deb2:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	3316      	adds	r3, #22
 800deb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800deba:	b2d2      	uxtb	r2, r2
 800debc:	701a      	strb	r2, [r3, #0]
 800debe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	0a1b      	lsrs	r3, r3, #8
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	3317      	adds	r3, #23
 800deca:	b2d2      	uxtb	r2, r2
 800decc:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	3324      	adds	r3, #36	; 0x24
 800ded2:	2280      	movs	r2, #128	; 0x80
 800ded4:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	3326      	adds	r3, #38	; 0x26
 800deda:	2229      	movs	r2, #41	; 0x29
 800dedc:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	332b      	adds	r3, #43	; 0x2b
 800dee2:	2213      	movs	r2, #19
 800dee4:	4971      	ldr	r1, [pc, #452]	; (800e0ac <f_mkfs+0x814>)
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fd f8b0 	bl	800b04c <mem_cpy>
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800def2:	2255      	movs	r2, #85	; 0x55
 800def4:	701a      	strb	r2, [r3, #0]
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800defc:	22aa      	movs	r2, #170	; 0xaa
 800defe:	701a      	strb	r2, [r3, #0]
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 800df00:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800df04:	2301      	movs	r3, #1
 800df06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df08:	69f9      	ldr	r1, [r7, #28]
 800df0a:	f7fd f861 	bl	800afd0 <disk_write>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <f_mkfs+0x680>
		return FR_DISK_ERR;
 800df14:	2301      	movs	r3, #1
 800df16:	e158      	b.n	800e1ca <f_mkfs+0x932>
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
 800df18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d107      	bne.n	800df30 <f_mkfs+0x698>
		disk_write(pdrv, tbl, b_vol + 6, 1);
 800df20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df22:	1d9a      	adds	r2, r3, #6
 800df24:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800df28:	2301      	movs	r3, #1
 800df2a:	69f9      	ldr	r1, [r7, #28]
 800df2c:	f7fd f850 	bl	800afd0 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
 800df30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df32:	64bb      	str	r3, [r7, #72]	; 0x48
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800df34:	2300      	movs	r3, #0
 800df36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df38:	e09b      	b.n	800e072 <f_mkfs+0x7da>
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 800df3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df3e:	2100      	movs	r1, #0
 800df40:	69f8      	ldr	r0, [r7, #28]
 800df42:	f7fd f8a1 	bl	800b088 <mem_set>
		n = md;								/* Media descriptor byte */
 800df46:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800df4a:	61bb      	str	r3, [r7, #24]
		if (fmt != FS_FAT32) {
 800df4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df50:	2b03      	cmp	r3, #3
 800df52:	d023      	beq.n	800df9c <f_mkfs+0x704>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 800df54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d101      	bne.n	800df60 <f_mkfs+0x6c8>
 800df5c:	4a54      	ldr	r2, [pc, #336]	; (800e0b0 <f_mkfs+0x818>)
 800df5e:	e001      	b.n	800df64 <f_mkfs+0x6cc>
 800df60:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	4313      	orrs	r3, r2
 800df68:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	701a      	strb	r2, [r3, #0]
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	b29b      	uxth	r3, r3
 800df76:	0a1b      	lsrs	r3, r3, #8
 800df78:	b29a      	uxth	r2, r3
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	3301      	adds	r3, #1
 800df7e:	b2d2      	uxtb	r2, r2
 800df80:	701a      	strb	r2, [r3, #0]
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	0c1a      	lsrs	r2, r3, #16
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	3302      	adds	r3, #2
 800df8a:	b2d2      	uxtb	r2, r2
 800df8c:	701a      	strb	r2, [r3, #0]
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	0e1a      	lsrs	r2, r3, #24
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	3303      	adds	r3, #3
 800df96:	b2d2      	uxtb	r2, r2
 800df98:	701a      	strb	r2, [r3, #0]
 800df9a:	e03b      	b.n	800e014 <f_mkfs+0x77c>
		} else {
			n |= 0xFFFFFF00;
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800dfa2:	61bb      	str	r3, [r7, #24]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 800dfa4:	69bb      	ldr	r3, [r7, #24]
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	701a      	strb	r2, [r3, #0]
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	0a1b      	lsrs	r3, r3, #8
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	b2d2      	uxtb	r2, r2
 800dfba:	701a      	strb	r2, [r3, #0]
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	0c1a      	lsrs	r2, r3, #16
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	3302      	adds	r3, #2
 800dfc4:	b2d2      	uxtb	r2, r2
 800dfc6:	701a      	strb	r2, [r3, #0]
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	0e1a      	lsrs	r2, r3, #24
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	3303      	adds	r3, #3
 800dfd0:	b2d2      	uxtb	r2, r2
 800dfd2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	3304      	adds	r3, #4
 800dfd8:	22ff      	movs	r2, #255	; 0xff
 800dfda:	701a      	strb	r2, [r3, #0]
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	3305      	adds	r3, #5
 800dfe0:	22ff      	movs	r2, #255	; 0xff
 800dfe2:	701a      	strb	r2, [r3, #0]
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	3306      	adds	r3, #6
 800dfe8:	22ff      	movs	r2, #255	; 0xff
 800dfea:	701a      	strb	r2, [r3, #0]
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	3307      	adds	r3, #7
 800dff0:	22ff      	movs	r2, #255	; 0xff
 800dff2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	3308      	adds	r3, #8
 800dff8:	22ff      	movs	r2, #255	; 0xff
 800dffa:	701a      	strb	r2, [r3, #0]
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	3309      	adds	r3, #9
 800e000:	22ff      	movs	r2, #255	; 0xff
 800e002:	701a      	strb	r2, [r3, #0]
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	330a      	adds	r3, #10
 800e008:	22ff      	movs	r2, #255	; 0xff
 800e00a:	701a      	strb	r2, [r3, #0]
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	330b      	adds	r3, #11
 800e010:	220f      	movs	r2, #15
 800e012:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800e014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e016:	1c53      	adds	r3, r2, #1
 800e018:	64bb      	str	r3, [r7, #72]	; 0x48
 800e01a:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800e01e:	2301      	movs	r3, #1
 800e020:	69f9      	ldr	r1, [r7, #28]
 800e022:	f7fc ffd5 	bl	800afd0 <disk_write>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d001      	beq.n	800e030 <f_mkfs+0x798>
			return FR_DISK_ERR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	e0cc      	b.n	800e1ca <f_mkfs+0x932>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 800e030:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e034:	2100      	movs	r1, #0
 800e036:	69f8      	ldr	r0, [r7, #28]
 800e038:	f7fd f826 	bl	800b088 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800e03c:	2301      	movs	r3, #1
 800e03e:	61bb      	str	r3, [r7, #24]
 800e040:	e010      	b.n	800e064 <f_mkfs+0x7cc>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800e042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e044:	1c53      	adds	r3, r2, #1
 800e046:	64bb      	str	r3, [r7, #72]	; 0x48
 800e048:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800e04c:	2301      	movs	r3, #1
 800e04e:	69f9      	ldr	r1, [r7, #28]
 800e050:	f7fc ffbe 	bl	800afd0 <disk_write>
 800e054:	4603      	mov	r3, r0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <f_mkfs+0x7c6>
				return FR_DISK_ERR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e0b5      	b.n	800e1ca <f_mkfs+0x932>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	3301      	adds	r3, #1
 800e062:	61bb      	str	r3, [r7, #24]
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e068:	429a      	cmp	r2, r3
 800e06a:	d8ea      	bhi.n	800e042 <f_mkfs+0x7aa>
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800e06c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e06e:	3301      	adds	r3, #1
 800e070:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e074:	2b00      	cmp	r3, #0
 800e076:	f43f af60 	beq.w	800df3a <f_mkfs+0x6a2>
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
 800e07a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d101      	bne.n	800e086 <f_mkfs+0x7ee>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	e000      	b.n	800e088 <f_mkfs+0x7f0>
 800e086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e088:	65fb      	str	r3, [r7, #92]	; 0x5c
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800e08a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e08c:	1c53      	adds	r3, r2, #1
 800e08e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e090:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800e094:	2301      	movs	r3, #1
 800e096:	69f9      	ldr	r1, [r7, #28]
 800e098:	f7fc ff9a 	bl	800afd0 <disk_write>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d008      	beq.n	800e0b4 <f_mkfs+0x81c>
			return FR_DISK_ERR;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e091      	b.n	800e1ca <f_mkfs+0x932>
 800e0a6:	bf00      	nop
 800e0a8:	0800f980 	.word	0x0800f980
 800e0ac:	0800f994 	.word	0x0800f994
 800e0b0:	00ffff00 	.word	0x00ffff00
	} while (--i);
 800e0b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1e4      	bne.n	800e08a <f_mkfs+0x7f2>
		disk_ioctl(pdrv, CTRL_TRIM, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
 800e0c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0c4:	2b03      	cmp	r3, #3
 800e0c6:	d173      	bne.n	800e1b0 <f_mkfs+0x918>
		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	2252      	movs	r2, #82	; 0x52
 800e0cc:	701a      	strb	r2, [r3, #0]
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	2252      	movs	r2, #82	; 0x52
 800e0d4:	701a      	strb	r2, [r3, #0]
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	3302      	adds	r3, #2
 800e0da:	2261      	movs	r2, #97	; 0x61
 800e0dc:	701a      	strb	r2, [r3, #0]
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	3303      	adds	r3, #3
 800e0e2:	2241      	movs	r2, #65	; 0x41
 800e0e4:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e0ec:	2272      	movs	r2, #114	; 0x72
 800e0ee:	701a      	strb	r2, [r3, #0]
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	f203 13e5 	addw	r3, r3, #485	; 0x1e5
 800e0f6:	2272      	movs	r2, #114	; 0x72
 800e0f8:	701a      	strb	r2, [r3, #0]
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	f503 73f3 	add.w	r3, r3, #486	; 0x1e6
 800e100:	2241      	movs	r2, #65	; 0x41
 800e102:	701a      	strb	r2, [r3, #0]
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	f203 13e7 	addw	r3, r3, #487	; 0x1e7
 800e10a:	2261      	movs	r2, #97	; 0x61
 800e10c:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e110:	b2da      	uxtb	r2, r3
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e118:	3a01      	subs	r2, #1
 800e11a:	b2d2      	uxtb	r2, r2
 800e11c:	701a      	strb	r2, [r3, #0]
 800e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e120:	b29b      	uxth	r3, r3
 800e122:	3b01      	subs	r3, #1
 800e124:	b29b      	uxth	r3, r3
 800e126:	0a1b      	lsrs	r3, r3, #8
 800e128:	b29a      	uxth	r2, r3
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800e130:	b2d2      	uxtb	r2, r2
 800e132:	701a      	strb	r2, [r3, #0]
 800e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e136:	3b01      	subs	r3, #1
 800e138:	0c1a      	lsrs	r2, r3, #16
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 800e140:	b2d2      	uxtb	r2, r2
 800e142:	701a      	strb	r2, [r3, #0]
 800e144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e146:	3b01      	subs	r3, #1
 800e148:	0e1a      	lsrs	r2, r3, #24
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	f203 13eb 	addw	r3, r3, #491	; 0x1eb
 800e150:	b2d2      	uxtb	r2, r2
 800e152:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e15a:	2202      	movs	r2, #2
 800e15c:	701a      	strb	r2, [r3, #0]
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	f203 13ed 	addw	r3, r3, #493	; 0x1ed
 800e164:	2200      	movs	r2, #0
 800e166:	701a      	strb	r2, [r3, #0]
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 800e16e:	2200      	movs	r2, #0
 800e170:	701a      	strb	r2, [r3, #0]
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
 800e178:	2200      	movs	r2, #0
 800e17a:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BS_55AA, 0xAA55);
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e182:	2255      	movs	r2, #85	; 0x55
 800e184:	701a      	strb	r2, [r3, #0]
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e18c:	22aa      	movs	r2, #170	; 0xaa
 800e18e:	701a      	strb	r2, [r3, #0]
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 800e190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e192:	1c5a      	adds	r2, r3, #1
 800e194:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800e198:	2301      	movs	r3, #1
 800e19a:	69f9      	ldr	r1, [r7, #28]
 800e19c:	f7fc ff18 	bl	800afd0 <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 800e1a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1a2:	1dda      	adds	r2, r3, #7
 800e1a4:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	69f9      	ldr	r1, [r7, #28]
 800e1ac:	f7fc ff10 	bl	800afd0 <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 800e1b0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fc ff29 	bl	800b010 <disk_ioctl>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	bf14      	ite	ne
 800e1c4:	2301      	movne	r3, #1
 800e1c6:	2300      	moveq	r3, #0
 800e1c8:	b2db      	uxtb	r3, r3
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3760      	adds	r7, #96	; 0x60
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop

0800e1d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b087      	sub	sp, #28
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800e1ea:	4b1e      	ldr	r3, [pc, #120]	; (800e264 <FATFS_LinkDriverEx+0x90>)
 800e1ec:	7a5b      	ldrb	r3, [r3, #9]
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d831      	bhi.n	800e258 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e1f4:	4b1b      	ldr	r3, [pc, #108]	; (800e264 <FATFS_LinkDriverEx+0x90>)
 800e1f6:	7a5b      	ldrb	r3, [r3, #9]
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	4b19      	ldr	r3, [pc, #100]	; (800e264 <FATFS_LinkDriverEx+0x90>)
 800e1fe:	2100      	movs	r1, #0
 800e200:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800e202:	4b18      	ldr	r3, [pc, #96]	; (800e264 <FATFS_LinkDriverEx+0x90>)
 800e204:	7a5b      	ldrb	r3, [r3, #9]
 800e206:	b2db      	uxtb	r3, r3
 800e208:	4a16      	ldr	r2, [pc, #88]	; (800e264 <FATFS_LinkDriverEx+0x90>)
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800e212:	4b14      	ldr	r3, [pc, #80]	; (800e264 <FATFS_LinkDriverEx+0x90>)
 800e214:	7a5b      	ldrb	r3, [r3, #9]
 800e216:	b2db      	uxtb	r3, r3
 800e218:	461a      	mov	r2, r3
 800e21a:	4b12      	ldr	r3, [pc, #72]	; (800e264 <FATFS_LinkDriverEx+0x90>)
 800e21c:	4413      	add	r3, r2
 800e21e:	79fa      	ldrb	r2, [r7, #7]
 800e220:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e222:	4b10      	ldr	r3, [pc, #64]	; (800e264 <FATFS_LinkDriverEx+0x90>)
 800e224:	7a5b      	ldrb	r3, [r3, #9]
 800e226:	b2db      	uxtb	r3, r3
 800e228:	1c5a      	adds	r2, r3, #1
 800e22a:	b2d1      	uxtb	r1, r2
 800e22c:	4a0d      	ldr	r2, [pc, #52]	; (800e264 <FATFS_LinkDriverEx+0x90>)
 800e22e:	7251      	strb	r1, [r2, #9]
 800e230:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e232:	7dbb      	ldrb	r3, [r7, #22]
 800e234:	3330      	adds	r3, #48	; 0x30
 800e236:	b2da      	uxtb	r2, r3
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	3301      	adds	r3, #1
 800e240:	223a      	movs	r2, #58	; 0x3a
 800e242:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	3302      	adds	r3, #2
 800e248:	222f      	movs	r2, #47	; 0x2f
 800e24a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	3303      	adds	r3, #3
 800e250:	2200      	movs	r2, #0
 800e252:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e254:	2300      	movs	r3, #0
 800e256:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800e258:	7dfb      	ldrb	r3, [r7, #23]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	371c      	adds	r7, #28
 800e25e:	46bd      	mov	sp, r7
 800e260:	bc80      	pop	{r7}
 800e262:	4770      	bx	lr
 800e264:	20000100 	.word	0x20000100

0800e268 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e272:	2200      	movs	r2, #0
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f7ff ffac 	bl	800e1d4 <FATFS_LinkDriverEx>
 800e27c:	4603      	mov	r3, r0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
	...

0800e288 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e292:	4b0b      	ldr	r3, [pc, #44]	; (800e2c0 <SD_initialize+0x38>)
 800e294:	2201      	movs	r2, #1
 800e296:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800e298:	f7fc fd62 	bl	800ad60 <BSP_SD_Init>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d107      	bne.n	800e2b2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e2a2:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <SD_initialize+0x38>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	f023 0301 	bic.w	r3, r3, #1
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	4b04      	ldr	r3, [pc, #16]	; (800e2c0 <SD_initialize+0x38>)
 800e2b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e2b2:	4b03      	ldr	r3, [pc, #12]	; (800e2c0 <SD_initialize+0x38>)
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	b2db      	uxtb	r3, r3
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	20000015 	.word	0x20000015

0800e2c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e2ce:	4b0b      	ldr	r3, [pc, #44]	; (800e2fc <SD_status+0x38>)
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e2d4:	f7fc fda6 	bl	800ae24 <BSP_SD_GetCardState>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d107      	bne.n	800e2ee <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e2de:	4b07      	ldr	r3, [pc, #28]	; (800e2fc <SD_status+0x38>)
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	f023 0301 	bic.w	r3, r3, #1
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	4b04      	ldr	r3, [pc, #16]	; (800e2fc <SD_status+0x38>)
 800e2ec:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800e2ee:	4b03      	ldr	r3, [pc, #12]	; (800e2fc <SD_status+0x38>)
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	b2db      	uxtb	r3, r3
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	20000015 	.word	0x20000015

0800e300 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af00      	add	r7, sp, #0
 800e306:	60b9      	str	r1, [r7, #8]
 800e308:	607a      	str	r2, [r7, #4]
 800e30a:	603b      	str	r3, [r7, #0]
 800e30c:	4603      	mov	r3, r0
 800e30e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800e314:	4b0f      	ldr	r3, [pc, #60]	; (800e354 <SD_read+0x54>)
 800e316:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800e318:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <SD_read+0x58>)
 800e31a:	683a      	ldr	r2, [r7, #0]
 800e31c:	6879      	ldr	r1, [r7, #4]
 800e31e:	68b8      	ldr	r0, [r7, #8]
 800e320:	f7fc fd44 	bl	800adac <BSP_SD_ReadBlocks>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10e      	bne.n	800e348 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e32a:	e006      	b.n	800e33a <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	1e5a      	subs	r2, r3, #1
 800e330:	613a      	str	r2, [r7, #16]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d101      	bne.n	800e33a <SD_read+0x3a>
      {
        return RES_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	e007      	b.n	800e34a <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e33a:	f7fc fd73 	bl	800ae24 <BSP_SD_GetCardState>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1f3      	bne.n	800e32c <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800e348:	7dfb      	ldrb	r3, [r7, #23]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3718      	adds	r7, #24
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	000186a0 	.word	0x000186a0
 800e358:	05f5e100 	.word	0x05f5e100

0800e35c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b086      	sub	sp, #24
 800e360:	af00      	add	r7, sp, #0
 800e362:	60b9      	str	r1, [r7, #8]
 800e364:	607a      	str	r2, [r7, #4]
 800e366:	603b      	str	r3, [r7, #0]
 800e368:	4603      	mov	r3, r0
 800e36a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e36c:	2301      	movs	r3, #1
 800e36e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800e370:	4b0f      	ldr	r3, [pc, #60]	; (800e3b0 <SD_write+0x54>)
 800e372:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800e374:	4b0f      	ldr	r3, [pc, #60]	; (800e3b4 <SD_write+0x58>)
 800e376:	683a      	ldr	r2, [r7, #0]
 800e378:	6879      	ldr	r1, [r7, #4]
 800e37a:	68b8      	ldr	r0, [r7, #8]
 800e37c:	f7fc fd34 	bl	800ade8 <BSP_SD_WriteBlocks>
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d10e      	bne.n	800e3a4 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e386:	e006      	b.n	800e396 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	1e5a      	subs	r2, r3, #1
 800e38c:	613a      	str	r2, [r7, #16]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d101      	bne.n	800e396 <SD_write+0x3a>
      {
        return RES_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	e007      	b.n	800e3a6 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e396:	f7fc fd45 	bl	800ae24 <BSP_SD_GetCardState>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1f3      	bne.n	800e388 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800e3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3718      	adds	r7, #24
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	000186a0 	.word	0x000186a0
 800e3b4:	05f5e100 	.word	0x05f5e100

0800e3b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08c      	sub	sp, #48	; 0x30
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	4603      	mov	r3, r0
 800e3c0:	603a      	str	r2, [r7, #0]
 800e3c2:	71fb      	strb	r3, [r7, #7]
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e3ce:	4b24      	ldr	r3, [pc, #144]	; (800e460 <SD_ioctl+0xa8>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	f003 0301 	and.w	r3, r3, #1
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <SD_ioctl+0x28>
 800e3dc:	2303      	movs	r3, #3
 800e3de:	e03b      	b.n	800e458 <SD_ioctl+0xa0>
  
  switch (cmd)
 800e3e0:	79bb      	ldrb	r3, [r7, #6]
 800e3e2:	2b03      	cmp	r3, #3
 800e3e4:	d833      	bhi.n	800e44e <SD_ioctl+0x96>
 800e3e6:	a201      	add	r2, pc, #4	; (adr r2, 800e3ec <SD_ioctl+0x34>)
 800e3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ec:	0800e3fd 	.word	0x0800e3fd
 800e3f0:	0800e405 	.word	0x0800e405
 800e3f4:	0800e41d 	.word	0x0800e41d
 800e3f8:	0800e437 	.word	0x0800e437
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e402:	e027      	b.n	800e454 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e404:	f107 030c 	add.w	r3, r7, #12
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fc fd1b 	bl	800ae44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e40e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e414:	2300      	movs	r3, #0
 800e416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e41a:	e01b      	b.n	800e454 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e41c:	f107 030c 	add.w	r3, r7, #12
 800e420:	4618      	mov	r0, r3
 800e422:	f7fc fd0f 	bl	800ae44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e428:	b29a      	uxth	r2, r3
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e434:	e00e      	b.n	800e454 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e436:	f107 030c 	add.w	r3, r7, #12
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fc fd02 	bl	800ae44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800e440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e446:	2300      	movs	r3, #0
 800e448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e44c:	e002      	b.n	800e454 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800e44e:	2304      	movs	r3, #4
 800e450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800e454:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3730      	adds	r7, #48	; 0x30
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	20000015 	.word	0x20000015

0800e464 <__errno>:
 800e464:	4b01      	ldr	r3, [pc, #4]	; (800e46c <__errno+0x8>)
 800e466:	6818      	ldr	r0, [r3, #0]
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	20000018 	.word	0x20000018

0800e470 <__libc_init_array>:
 800e470:	b570      	push	{r4, r5, r6, lr}
 800e472:	2600      	movs	r6, #0
 800e474:	4d0c      	ldr	r5, [pc, #48]	; (800e4a8 <__libc_init_array+0x38>)
 800e476:	4c0d      	ldr	r4, [pc, #52]	; (800e4ac <__libc_init_array+0x3c>)
 800e478:	1b64      	subs	r4, r4, r5
 800e47a:	10a4      	asrs	r4, r4, #2
 800e47c:	42a6      	cmp	r6, r4
 800e47e:	d109      	bne.n	800e494 <__libc_init_array+0x24>
 800e480:	f001 fa00 	bl	800f884 <_init>
 800e484:	2600      	movs	r6, #0
 800e486:	4d0a      	ldr	r5, [pc, #40]	; (800e4b0 <__libc_init_array+0x40>)
 800e488:	4c0a      	ldr	r4, [pc, #40]	; (800e4b4 <__libc_init_array+0x44>)
 800e48a:	1b64      	subs	r4, r4, r5
 800e48c:	10a4      	asrs	r4, r4, #2
 800e48e:	42a6      	cmp	r6, r4
 800e490:	d105      	bne.n	800e49e <__libc_init_array+0x2e>
 800e492:	bd70      	pop	{r4, r5, r6, pc}
 800e494:	f855 3b04 	ldr.w	r3, [r5], #4
 800e498:	4798      	blx	r3
 800e49a:	3601      	adds	r6, #1
 800e49c:	e7ee      	b.n	800e47c <__libc_init_array+0xc>
 800e49e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4a2:	4798      	blx	r3
 800e4a4:	3601      	adds	r6, #1
 800e4a6:	e7f2      	b.n	800e48e <__libc_init_array+0x1e>
 800e4a8:	08014588 	.word	0x08014588
 800e4ac:	08014588 	.word	0x08014588
 800e4b0:	08014588 	.word	0x08014588
 800e4b4:	0801458c 	.word	0x0801458c

0800e4b8 <memset>:
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	4402      	add	r2, r0
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d100      	bne.n	800e4c2 <memset+0xa>
 800e4c0:	4770      	bx	lr
 800e4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800e4c6:	e7f9      	b.n	800e4bc <memset+0x4>

0800e4c8 <rand>:
 800e4c8:	4b17      	ldr	r3, [pc, #92]	; (800e528 <rand+0x60>)
 800e4ca:	b510      	push	{r4, lr}
 800e4cc:	681c      	ldr	r4, [r3, #0]
 800e4ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4d0:	b9b3      	cbnz	r3, 800e500 <rand+0x38>
 800e4d2:	2018      	movs	r0, #24
 800e4d4:	f000 f888 	bl	800e5e8 <malloc>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	63a0      	str	r0, [r4, #56]	; 0x38
 800e4dc:	b920      	cbnz	r0, 800e4e8 <rand+0x20>
 800e4de:	214e      	movs	r1, #78	; 0x4e
 800e4e0:	4b12      	ldr	r3, [pc, #72]	; (800e52c <rand+0x64>)
 800e4e2:	4813      	ldr	r0, [pc, #76]	; (800e530 <rand+0x68>)
 800e4e4:	f000 f850 	bl	800e588 <__assert_func>
 800e4e8:	4912      	ldr	r1, [pc, #72]	; (800e534 <rand+0x6c>)
 800e4ea:	4b13      	ldr	r3, [pc, #76]	; (800e538 <rand+0x70>)
 800e4ec:	e9c0 1300 	strd	r1, r3, [r0]
 800e4f0:	4b12      	ldr	r3, [pc, #72]	; (800e53c <rand+0x74>)
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	6083      	str	r3, [r0, #8]
 800e4f6:	230b      	movs	r3, #11
 800e4f8:	8183      	strh	r3, [r0, #12]
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e500:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e502:	480f      	ldr	r0, [pc, #60]	; (800e540 <rand+0x78>)
 800e504:	690a      	ldr	r2, [r1, #16]
 800e506:	694b      	ldr	r3, [r1, #20]
 800e508:	4350      	muls	r0, r2
 800e50a:	4c0e      	ldr	r4, [pc, #56]	; (800e544 <rand+0x7c>)
 800e50c:	fb04 0003 	mla	r0, r4, r3, r0
 800e510:	fba2 3404 	umull	r3, r4, r2, r4
 800e514:	1c5a      	adds	r2, r3, #1
 800e516:	4404      	add	r4, r0
 800e518:	f144 0000 	adc.w	r0, r4, #0
 800e51c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e520:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e524:	bd10      	pop	{r4, pc}
 800e526:	bf00      	nop
 800e528:	20000018 	.word	0x20000018
 800e52c:	08014440 	.word	0x08014440
 800e530:	08014457 	.word	0x08014457
 800e534:	abcd330e 	.word	0xabcd330e
 800e538:	e66d1234 	.word	0xe66d1234
 800e53c:	0005deec 	.word	0x0005deec
 800e540:	5851f42d 	.word	0x5851f42d
 800e544:	4c957f2d 	.word	0x4c957f2d

0800e548 <siprintf>:
 800e548:	b40e      	push	{r1, r2, r3}
 800e54a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e54e:	b500      	push	{lr}
 800e550:	b09c      	sub	sp, #112	; 0x70
 800e552:	ab1d      	add	r3, sp, #116	; 0x74
 800e554:	9002      	str	r0, [sp, #8]
 800e556:	9006      	str	r0, [sp, #24]
 800e558:	9107      	str	r1, [sp, #28]
 800e55a:	9104      	str	r1, [sp, #16]
 800e55c:	4808      	ldr	r0, [pc, #32]	; (800e580 <siprintf+0x38>)
 800e55e:	4909      	ldr	r1, [pc, #36]	; (800e584 <siprintf+0x3c>)
 800e560:	f853 2b04 	ldr.w	r2, [r3], #4
 800e564:	9105      	str	r1, [sp, #20]
 800e566:	6800      	ldr	r0, [r0, #0]
 800e568:	a902      	add	r1, sp, #8
 800e56a:	9301      	str	r3, [sp, #4]
 800e56c:	f000 f946 	bl	800e7fc <_svfiprintf_r>
 800e570:	2200      	movs	r2, #0
 800e572:	9b02      	ldr	r3, [sp, #8]
 800e574:	701a      	strb	r2, [r3, #0]
 800e576:	b01c      	add	sp, #112	; 0x70
 800e578:	f85d eb04 	ldr.w	lr, [sp], #4
 800e57c:	b003      	add	sp, #12
 800e57e:	4770      	bx	lr
 800e580:	20000018 	.word	0x20000018
 800e584:	ffff0208 	.word	0xffff0208

0800e588 <__assert_func>:
 800e588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e58a:	4614      	mov	r4, r2
 800e58c:	461a      	mov	r2, r3
 800e58e:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <__assert_func+0x2c>)
 800e590:	4605      	mov	r5, r0
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68d8      	ldr	r0, [r3, #12]
 800e596:	b14c      	cbz	r4, 800e5ac <__assert_func+0x24>
 800e598:	4b07      	ldr	r3, [pc, #28]	; (800e5b8 <__assert_func+0x30>)
 800e59a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e59e:	9100      	str	r1, [sp, #0]
 800e5a0:	462b      	mov	r3, r5
 800e5a2:	4906      	ldr	r1, [pc, #24]	; (800e5bc <__assert_func+0x34>)
 800e5a4:	f000 f80e 	bl	800e5c4 <fiprintf>
 800e5a8:	f000 fde6 	bl	800f178 <abort>
 800e5ac:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <__assert_func+0x38>)
 800e5ae:	461c      	mov	r4, r3
 800e5b0:	e7f3      	b.n	800e59a <__assert_func+0x12>
 800e5b2:	bf00      	nop
 800e5b4:	20000018 	.word	0x20000018
 800e5b8:	080144b6 	.word	0x080144b6
 800e5bc:	080144c3 	.word	0x080144c3
 800e5c0:	080144f1 	.word	0x080144f1

0800e5c4 <fiprintf>:
 800e5c4:	b40e      	push	{r1, r2, r3}
 800e5c6:	b503      	push	{r0, r1, lr}
 800e5c8:	4601      	mov	r1, r0
 800e5ca:	ab03      	add	r3, sp, #12
 800e5cc:	4805      	ldr	r0, [pc, #20]	; (800e5e4 <fiprintf+0x20>)
 800e5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5d2:	6800      	ldr	r0, [r0, #0]
 800e5d4:	9301      	str	r3, [sp, #4]
 800e5d6:	f000 fa39 	bl	800ea4c <_vfiprintf_r>
 800e5da:	b002      	add	sp, #8
 800e5dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5e0:	b003      	add	sp, #12
 800e5e2:	4770      	bx	lr
 800e5e4:	20000018 	.word	0x20000018

0800e5e8 <malloc>:
 800e5e8:	4b02      	ldr	r3, [pc, #8]	; (800e5f4 <malloc+0xc>)
 800e5ea:	4601      	mov	r1, r0
 800e5ec:	6818      	ldr	r0, [r3, #0]
 800e5ee:	f000 b84f 	b.w	800e690 <_malloc_r>
 800e5f2:	bf00      	nop
 800e5f4:	20000018 	.word	0x20000018

0800e5f8 <_free_r>:
 800e5f8:	b538      	push	{r3, r4, r5, lr}
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	2900      	cmp	r1, #0
 800e5fe:	d043      	beq.n	800e688 <_free_r+0x90>
 800e600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e604:	1f0c      	subs	r4, r1, #4
 800e606:	2b00      	cmp	r3, #0
 800e608:	bfb8      	it	lt
 800e60a:	18e4      	addlt	r4, r4, r3
 800e60c:	f001 f810 	bl	800f630 <__malloc_lock>
 800e610:	4a1e      	ldr	r2, [pc, #120]	; (800e68c <_free_r+0x94>)
 800e612:	6813      	ldr	r3, [r2, #0]
 800e614:	4610      	mov	r0, r2
 800e616:	b933      	cbnz	r3, 800e626 <_free_r+0x2e>
 800e618:	6063      	str	r3, [r4, #4]
 800e61a:	6014      	str	r4, [r2, #0]
 800e61c:	4628      	mov	r0, r5
 800e61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e622:	f001 b80b 	b.w	800f63c <__malloc_unlock>
 800e626:	42a3      	cmp	r3, r4
 800e628:	d90a      	bls.n	800e640 <_free_r+0x48>
 800e62a:	6821      	ldr	r1, [r4, #0]
 800e62c:	1862      	adds	r2, r4, r1
 800e62e:	4293      	cmp	r3, r2
 800e630:	bf01      	itttt	eq
 800e632:	681a      	ldreq	r2, [r3, #0]
 800e634:	685b      	ldreq	r3, [r3, #4]
 800e636:	1852      	addeq	r2, r2, r1
 800e638:	6022      	streq	r2, [r4, #0]
 800e63a:	6063      	str	r3, [r4, #4]
 800e63c:	6004      	str	r4, [r0, #0]
 800e63e:	e7ed      	b.n	800e61c <_free_r+0x24>
 800e640:	461a      	mov	r2, r3
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	b10b      	cbz	r3, 800e64a <_free_r+0x52>
 800e646:	42a3      	cmp	r3, r4
 800e648:	d9fa      	bls.n	800e640 <_free_r+0x48>
 800e64a:	6811      	ldr	r1, [r2, #0]
 800e64c:	1850      	adds	r0, r2, r1
 800e64e:	42a0      	cmp	r0, r4
 800e650:	d10b      	bne.n	800e66a <_free_r+0x72>
 800e652:	6820      	ldr	r0, [r4, #0]
 800e654:	4401      	add	r1, r0
 800e656:	1850      	adds	r0, r2, r1
 800e658:	4283      	cmp	r3, r0
 800e65a:	6011      	str	r1, [r2, #0]
 800e65c:	d1de      	bne.n	800e61c <_free_r+0x24>
 800e65e:	6818      	ldr	r0, [r3, #0]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	4401      	add	r1, r0
 800e664:	6011      	str	r1, [r2, #0]
 800e666:	6053      	str	r3, [r2, #4]
 800e668:	e7d8      	b.n	800e61c <_free_r+0x24>
 800e66a:	d902      	bls.n	800e672 <_free_r+0x7a>
 800e66c:	230c      	movs	r3, #12
 800e66e:	602b      	str	r3, [r5, #0]
 800e670:	e7d4      	b.n	800e61c <_free_r+0x24>
 800e672:	6820      	ldr	r0, [r4, #0]
 800e674:	1821      	adds	r1, r4, r0
 800e676:	428b      	cmp	r3, r1
 800e678:	bf01      	itttt	eq
 800e67a:	6819      	ldreq	r1, [r3, #0]
 800e67c:	685b      	ldreq	r3, [r3, #4]
 800e67e:	1809      	addeq	r1, r1, r0
 800e680:	6021      	streq	r1, [r4, #0]
 800e682:	6063      	str	r3, [r4, #4]
 800e684:	6054      	str	r4, [r2, #4]
 800e686:	e7c9      	b.n	800e61c <_free_r+0x24>
 800e688:	bd38      	pop	{r3, r4, r5, pc}
 800e68a:	bf00      	nop
 800e68c:	2000010c 	.word	0x2000010c

0800e690 <_malloc_r>:
 800e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e692:	1ccd      	adds	r5, r1, #3
 800e694:	f025 0503 	bic.w	r5, r5, #3
 800e698:	3508      	adds	r5, #8
 800e69a:	2d0c      	cmp	r5, #12
 800e69c:	bf38      	it	cc
 800e69e:	250c      	movcc	r5, #12
 800e6a0:	2d00      	cmp	r5, #0
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	db01      	blt.n	800e6aa <_malloc_r+0x1a>
 800e6a6:	42a9      	cmp	r1, r5
 800e6a8:	d903      	bls.n	800e6b2 <_malloc_r+0x22>
 800e6aa:	230c      	movs	r3, #12
 800e6ac:	6033      	str	r3, [r6, #0]
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6b2:	f000 ffbd 	bl	800f630 <__malloc_lock>
 800e6b6:	4921      	ldr	r1, [pc, #132]	; (800e73c <_malloc_r+0xac>)
 800e6b8:	680a      	ldr	r2, [r1, #0]
 800e6ba:	4614      	mov	r4, r2
 800e6bc:	b99c      	cbnz	r4, 800e6e6 <_malloc_r+0x56>
 800e6be:	4f20      	ldr	r7, [pc, #128]	; (800e740 <_malloc_r+0xb0>)
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	b923      	cbnz	r3, 800e6ce <_malloc_r+0x3e>
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f000 fc86 	bl	800efd8 <_sbrk_r>
 800e6cc:	6038      	str	r0, [r7, #0]
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	4630      	mov	r0, r6
 800e6d2:	f000 fc81 	bl	800efd8 <_sbrk_r>
 800e6d6:	1c43      	adds	r3, r0, #1
 800e6d8:	d123      	bne.n	800e722 <_malloc_r+0x92>
 800e6da:	230c      	movs	r3, #12
 800e6dc:	4630      	mov	r0, r6
 800e6de:	6033      	str	r3, [r6, #0]
 800e6e0:	f000 ffac 	bl	800f63c <__malloc_unlock>
 800e6e4:	e7e3      	b.n	800e6ae <_malloc_r+0x1e>
 800e6e6:	6823      	ldr	r3, [r4, #0]
 800e6e8:	1b5b      	subs	r3, r3, r5
 800e6ea:	d417      	bmi.n	800e71c <_malloc_r+0x8c>
 800e6ec:	2b0b      	cmp	r3, #11
 800e6ee:	d903      	bls.n	800e6f8 <_malloc_r+0x68>
 800e6f0:	6023      	str	r3, [r4, #0]
 800e6f2:	441c      	add	r4, r3
 800e6f4:	6025      	str	r5, [r4, #0]
 800e6f6:	e004      	b.n	800e702 <_malloc_r+0x72>
 800e6f8:	6863      	ldr	r3, [r4, #4]
 800e6fa:	42a2      	cmp	r2, r4
 800e6fc:	bf0c      	ite	eq
 800e6fe:	600b      	streq	r3, [r1, #0]
 800e700:	6053      	strne	r3, [r2, #4]
 800e702:	4630      	mov	r0, r6
 800e704:	f000 ff9a 	bl	800f63c <__malloc_unlock>
 800e708:	f104 000b 	add.w	r0, r4, #11
 800e70c:	1d23      	adds	r3, r4, #4
 800e70e:	f020 0007 	bic.w	r0, r0, #7
 800e712:	1ac2      	subs	r2, r0, r3
 800e714:	d0cc      	beq.n	800e6b0 <_malloc_r+0x20>
 800e716:	1a1b      	subs	r3, r3, r0
 800e718:	50a3      	str	r3, [r4, r2]
 800e71a:	e7c9      	b.n	800e6b0 <_malloc_r+0x20>
 800e71c:	4622      	mov	r2, r4
 800e71e:	6864      	ldr	r4, [r4, #4]
 800e720:	e7cc      	b.n	800e6bc <_malloc_r+0x2c>
 800e722:	1cc4      	adds	r4, r0, #3
 800e724:	f024 0403 	bic.w	r4, r4, #3
 800e728:	42a0      	cmp	r0, r4
 800e72a:	d0e3      	beq.n	800e6f4 <_malloc_r+0x64>
 800e72c:	1a21      	subs	r1, r4, r0
 800e72e:	4630      	mov	r0, r6
 800e730:	f000 fc52 	bl	800efd8 <_sbrk_r>
 800e734:	3001      	adds	r0, #1
 800e736:	d1dd      	bne.n	800e6f4 <_malloc_r+0x64>
 800e738:	e7cf      	b.n	800e6da <_malloc_r+0x4a>
 800e73a:	bf00      	nop
 800e73c:	2000010c 	.word	0x2000010c
 800e740:	20000110 	.word	0x20000110

0800e744 <__ssputs_r>:
 800e744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e748:	688e      	ldr	r6, [r1, #8]
 800e74a:	4682      	mov	sl, r0
 800e74c:	429e      	cmp	r6, r3
 800e74e:	460c      	mov	r4, r1
 800e750:	4690      	mov	r8, r2
 800e752:	461f      	mov	r7, r3
 800e754:	d838      	bhi.n	800e7c8 <__ssputs_r+0x84>
 800e756:	898a      	ldrh	r2, [r1, #12]
 800e758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e75c:	d032      	beq.n	800e7c4 <__ssputs_r+0x80>
 800e75e:	6825      	ldr	r5, [r4, #0]
 800e760:	6909      	ldr	r1, [r1, #16]
 800e762:	3301      	adds	r3, #1
 800e764:	eba5 0901 	sub.w	r9, r5, r1
 800e768:	6965      	ldr	r5, [r4, #20]
 800e76a:	444b      	add	r3, r9
 800e76c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e774:	106d      	asrs	r5, r5, #1
 800e776:	429d      	cmp	r5, r3
 800e778:	bf38      	it	cc
 800e77a:	461d      	movcc	r5, r3
 800e77c:	0553      	lsls	r3, r2, #21
 800e77e:	d531      	bpl.n	800e7e4 <__ssputs_r+0xa0>
 800e780:	4629      	mov	r1, r5
 800e782:	f7ff ff85 	bl	800e690 <_malloc_r>
 800e786:	4606      	mov	r6, r0
 800e788:	b950      	cbnz	r0, 800e7a0 <__ssputs_r+0x5c>
 800e78a:	230c      	movs	r3, #12
 800e78c:	f04f 30ff 	mov.w	r0, #4294967295
 800e790:	f8ca 3000 	str.w	r3, [sl]
 800e794:	89a3      	ldrh	r3, [r4, #12]
 800e796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e79a:	81a3      	strh	r3, [r4, #12]
 800e79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7a0:	464a      	mov	r2, r9
 800e7a2:	6921      	ldr	r1, [r4, #16]
 800e7a4:	f000 ff1c 	bl	800f5e0 <memcpy>
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7b2:	81a3      	strh	r3, [r4, #12]
 800e7b4:	6126      	str	r6, [r4, #16]
 800e7b6:	444e      	add	r6, r9
 800e7b8:	6026      	str	r6, [r4, #0]
 800e7ba:	463e      	mov	r6, r7
 800e7bc:	6165      	str	r5, [r4, #20]
 800e7be:	eba5 0509 	sub.w	r5, r5, r9
 800e7c2:	60a5      	str	r5, [r4, #8]
 800e7c4:	42be      	cmp	r6, r7
 800e7c6:	d900      	bls.n	800e7ca <__ssputs_r+0x86>
 800e7c8:	463e      	mov	r6, r7
 800e7ca:	4632      	mov	r2, r6
 800e7cc:	4641      	mov	r1, r8
 800e7ce:	6820      	ldr	r0, [r4, #0]
 800e7d0:	f000 ff14 	bl	800f5fc <memmove>
 800e7d4:	68a3      	ldr	r3, [r4, #8]
 800e7d6:	6822      	ldr	r2, [r4, #0]
 800e7d8:	1b9b      	subs	r3, r3, r6
 800e7da:	4432      	add	r2, r6
 800e7dc:	2000      	movs	r0, #0
 800e7de:	60a3      	str	r3, [r4, #8]
 800e7e0:	6022      	str	r2, [r4, #0]
 800e7e2:	e7db      	b.n	800e79c <__ssputs_r+0x58>
 800e7e4:	462a      	mov	r2, r5
 800e7e6:	f000 ff2f 	bl	800f648 <_realloc_r>
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d1e1      	bne.n	800e7b4 <__ssputs_r+0x70>
 800e7f0:	4650      	mov	r0, sl
 800e7f2:	6921      	ldr	r1, [r4, #16]
 800e7f4:	f7ff ff00 	bl	800e5f8 <_free_r>
 800e7f8:	e7c7      	b.n	800e78a <__ssputs_r+0x46>
	...

0800e7fc <_svfiprintf_r>:
 800e7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e800:	4698      	mov	r8, r3
 800e802:	898b      	ldrh	r3, [r1, #12]
 800e804:	4607      	mov	r7, r0
 800e806:	061b      	lsls	r3, r3, #24
 800e808:	460d      	mov	r5, r1
 800e80a:	4614      	mov	r4, r2
 800e80c:	b09d      	sub	sp, #116	; 0x74
 800e80e:	d50e      	bpl.n	800e82e <_svfiprintf_r+0x32>
 800e810:	690b      	ldr	r3, [r1, #16]
 800e812:	b963      	cbnz	r3, 800e82e <_svfiprintf_r+0x32>
 800e814:	2140      	movs	r1, #64	; 0x40
 800e816:	f7ff ff3b 	bl	800e690 <_malloc_r>
 800e81a:	6028      	str	r0, [r5, #0]
 800e81c:	6128      	str	r0, [r5, #16]
 800e81e:	b920      	cbnz	r0, 800e82a <_svfiprintf_r+0x2e>
 800e820:	230c      	movs	r3, #12
 800e822:	603b      	str	r3, [r7, #0]
 800e824:	f04f 30ff 	mov.w	r0, #4294967295
 800e828:	e0d1      	b.n	800e9ce <_svfiprintf_r+0x1d2>
 800e82a:	2340      	movs	r3, #64	; 0x40
 800e82c:	616b      	str	r3, [r5, #20]
 800e82e:	2300      	movs	r3, #0
 800e830:	9309      	str	r3, [sp, #36]	; 0x24
 800e832:	2320      	movs	r3, #32
 800e834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e838:	2330      	movs	r3, #48	; 0x30
 800e83a:	f04f 0901 	mov.w	r9, #1
 800e83e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e842:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e9e8 <_svfiprintf_r+0x1ec>
 800e846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e84a:	4623      	mov	r3, r4
 800e84c:	469a      	mov	sl, r3
 800e84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e852:	b10a      	cbz	r2, 800e858 <_svfiprintf_r+0x5c>
 800e854:	2a25      	cmp	r2, #37	; 0x25
 800e856:	d1f9      	bne.n	800e84c <_svfiprintf_r+0x50>
 800e858:	ebba 0b04 	subs.w	fp, sl, r4
 800e85c:	d00b      	beq.n	800e876 <_svfiprintf_r+0x7a>
 800e85e:	465b      	mov	r3, fp
 800e860:	4622      	mov	r2, r4
 800e862:	4629      	mov	r1, r5
 800e864:	4638      	mov	r0, r7
 800e866:	f7ff ff6d 	bl	800e744 <__ssputs_r>
 800e86a:	3001      	adds	r0, #1
 800e86c:	f000 80aa 	beq.w	800e9c4 <_svfiprintf_r+0x1c8>
 800e870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e872:	445a      	add	r2, fp
 800e874:	9209      	str	r2, [sp, #36]	; 0x24
 800e876:	f89a 3000 	ldrb.w	r3, [sl]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f000 80a2 	beq.w	800e9c4 <_svfiprintf_r+0x1c8>
 800e880:	2300      	movs	r3, #0
 800e882:	f04f 32ff 	mov.w	r2, #4294967295
 800e886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e88a:	f10a 0a01 	add.w	sl, sl, #1
 800e88e:	9304      	str	r3, [sp, #16]
 800e890:	9307      	str	r3, [sp, #28]
 800e892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e896:	931a      	str	r3, [sp, #104]	; 0x68
 800e898:	4654      	mov	r4, sl
 800e89a:	2205      	movs	r2, #5
 800e89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8a0:	4851      	ldr	r0, [pc, #324]	; (800e9e8 <_svfiprintf_r+0x1ec>)
 800e8a2:	f000 fe8f 	bl	800f5c4 <memchr>
 800e8a6:	9a04      	ldr	r2, [sp, #16]
 800e8a8:	b9d8      	cbnz	r0, 800e8e2 <_svfiprintf_r+0xe6>
 800e8aa:	06d0      	lsls	r0, r2, #27
 800e8ac:	bf44      	itt	mi
 800e8ae:	2320      	movmi	r3, #32
 800e8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8b4:	0711      	lsls	r1, r2, #28
 800e8b6:	bf44      	itt	mi
 800e8b8:	232b      	movmi	r3, #43	; 0x2b
 800e8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8be:	f89a 3000 	ldrb.w	r3, [sl]
 800e8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800e8c4:	d015      	beq.n	800e8f2 <_svfiprintf_r+0xf6>
 800e8c6:	4654      	mov	r4, sl
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	f04f 0c0a 	mov.w	ip, #10
 800e8ce:	9a07      	ldr	r2, [sp, #28]
 800e8d0:	4621      	mov	r1, r4
 800e8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8d6:	3b30      	subs	r3, #48	; 0x30
 800e8d8:	2b09      	cmp	r3, #9
 800e8da:	d94e      	bls.n	800e97a <_svfiprintf_r+0x17e>
 800e8dc:	b1b0      	cbz	r0, 800e90c <_svfiprintf_r+0x110>
 800e8de:	9207      	str	r2, [sp, #28]
 800e8e0:	e014      	b.n	800e90c <_svfiprintf_r+0x110>
 800e8e2:	eba0 0308 	sub.w	r3, r0, r8
 800e8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	46a2      	mov	sl, r4
 800e8ee:	9304      	str	r3, [sp, #16]
 800e8f0:	e7d2      	b.n	800e898 <_svfiprintf_r+0x9c>
 800e8f2:	9b03      	ldr	r3, [sp, #12]
 800e8f4:	1d19      	adds	r1, r3, #4
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	9103      	str	r1, [sp, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	bfbb      	ittet	lt
 800e8fe:	425b      	neglt	r3, r3
 800e900:	f042 0202 	orrlt.w	r2, r2, #2
 800e904:	9307      	strge	r3, [sp, #28]
 800e906:	9307      	strlt	r3, [sp, #28]
 800e908:	bfb8      	it	lt
 800e90a:	9204      	strlt	r2, [sp, #16]
 800e90c:	7823      	ldrb	r3, [r4, #0]
 800e90e:	2b2e      	cmp	r3, #46	; 0x2e
 800e910:	d10c      	bne.n	800e92c <_svfiprintf_r+0x130>
 800e912:	7863      	ldrb	r3, [r4, #1]
 800e914:	2b2a      	cmp	r3, #42	; 0x2a
 800e916:	d135      	bne.n	800e984 <_svfiprintf_r+0x188>
 800e918:	9b03      	ldr	r3, [sp, #12]
 800e91a:	3402      	adds	r4, #2
 800e91c:	1d1a      	adds	r2, r3, #4
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	9203      	str	r2, [sp, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	bfb8      	it	lt
 800e926:	f04f 33ff 	movlt.w	r3, #4294967295
 800e92a:	9305      	str	r3, [sp, #20]
 800e92c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e9f8 <_svfiprintf_r+0x1fc>
 800e930:	2203      	movs	r2, #3
 800e932:	4650      	mov	r0, sl
 800e934:	7821      	ldrb	r1, [r4, #0]
 800e936:	f000 fe45 	bl	800f5c4 <memchr>
 800e93a:	b140      	cbz	r0, 800e94e <_svfiprintf_r+0x152>
 800e93c:	2340      	movs	r3, #64	; 0x40
 800e93e:	eba0 000a 	sub.w	r0, r0, sl
 800e942:	fa03 f000 	lsl.w	r0, r3, r0
 800e946:	9b04      	ldr	r3, [sp, #16]
 800e948:	3401      	adds	r4, #1
 800e94a:	4303      	orrs	r3, r0
 800e94c:	9304      	str	r3, [sp, #16]
 800e94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e952:	2206      	movs	r2, #6
 800e954:	4825      	ldr	r0, [pc, #148]	; (800e9ec <_svfiprintf_r+0x1f0>)
 800e956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e95a:	f000 fe33 	bl	800f5c4 <memchr>
 800e95e:	2800      	cmp	r0, #0
 800e960:	d038      	beq.n	800e9d4 <_svfiprintf_r+0x1d8>
 800e962:	4b23      	ldr	r3, [pc, #140]	; (800e9f0 <_svfiprintf_r+0x1f4>)
 800e964:	bb1b      	cbnz	r3, 800e9ae <_svfiprintf_r+0x1b2>
 800e966:	9b03      	ldr	r3, [sp, #12]
 800e968:	3307      	adds	r3, #7
 800e96a:	f023 0307 	bic.w	r3, r3, #7
 800e96e:	3308      	adds	r3, #8
 800e970:	9303      	str	r3, [sp, #12]
 800e972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e974:	4433      	add	r3, r6
 800e976:	9309      	str	r3, [sp, #36]	; 0x24
 800e978:	e767      	b.n	800e84a <_svfiprintf_r+0x4e>
 800e97a:	460c      	mov	r4, r1
 800e97c:	2001      	movs	r0, #1
 800e97e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e982:	e7a5      	b.n	800e8d0 <_svfiprintf_r+0xd4>
 800e984:	2300      	movs	r3, #0
 800e986:	f04f 0c0a 	mov.w	ip, #10
 800e98a:	4619      	mov	r1, r3
 800e98c:	3401      	adds	r4, #1
 800e98e:	9305      	str	r3, [sp, #20]
 800e990:	4620      	mov	r0, r4
 800e992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e996:	3a30      	subs	r2, #48	; 0x30
 800e998:	2a09      	cmp	r2, #9
 800e99a:	d903      	bls.n	800e9a4 <_svfiprintf_r+0x1a8>
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d0c5      	beq.n	800e92c <_svfiprintf_r+0x130>
 800e9a0:	9105      	str	r1, [sp, #20]
 800e9a2:	e7c3      	b.n	800e92c <_svfiprintf_r+0x130>
 800e9a4:	4604      	mov	r4, r0
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ac:	e7f0      	b.n	800e990 <_svfiprintf_r+0x194>
 800e9ae:	ab03      	add	r3, sp, #12
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	462a      	mov	r2, r5
 800e9b4:	4638      	mov	r0, r7
 800e9b6:	4b0f      	ldr	r3, [pc, #60]	; (800e9f4 <_svfiprintf_r+0x1f8>)
 800e9b8:	a904      	add	r1, sp, #16
 800e9ba:	f3af 8000 	nop.w
 800e9be:	1c42      	adds	r2, r0, #1
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	d1d6      	bne.n	800e972 <_svfiprintf_r+0x176>
 800e9c4:	89ab      	ldrh	r3, [r5, #12]
 800e9c6:	065b      	lsls	r3, r3, #25
 800e9c8:	f53f af2c 	bmi.w	800e824 <_svfiprintf_r+0x28>
 800e9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9ce:	b01d      	add	sp, #116	; 0x74
 800e9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d4:	ab03      	add	r3, sp, #12
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	462a      	mov	r2, r5
 800e9da:	4638      	mov	r0, r7
 800e9dc:	4b05      	ldr	r3, [pc, #20]	; (800e9f4 <_svfiprintf_r+0x1f8>)
 800e9de:	a904      	add	r1, sp, #16
 800e9e0:	f000 f9d4 	bl	800ed8c <_printf_i>
 800e9e4:	e7eb      	b.n	800e9be <_svfiprintf_r+0x1c2>
 800e9e6:	bf00      	nop
 800e9e8:	080144f2 	.word	0x080144f2
 800e9ec:	080144fc 	.word	0x080144fc
 800e9f0:	00000000 	.word	0x00000000
 800e9f4:	0800e745 	.word	0x0800e745
 800e9f8:	080144f8 	.word	0x080144f8

0800e9fc <__sfputc_r>:
 800e9fc:	6893      	ldr	r3, [r2, #8]
 800e9fe:	b410      	push	{r4}
 800ea00:	3b01      	subs	r3, #1
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	6093      	str	r3, [r2, #8]
 800ea06:	da07      	bge.n	800ea18 <__sfputc_r+0x1c>
 800ea08:	6994      	ldr	r4, [r2, #24]
 800ea0a:	42a3      	cmp	r3, r4
 800ea0c:	db01      	blt.n	800ea12 <__sfputc_r+0x16>
 800ea0e:	290a      	cmp	r1, #10
 800ea10:	d102      	bne.n	800ea18 <__sfputc_r+0x1c>
 800ea12:	bc10      	pop	{r4}
 800ea14:	f000 baf0 	b.w	800eff8 <__swbuf_r>
 800ea18:	6813      	ldr	r3, [r2, #0]
 800ea1a:	1c58      	adds	r0, r3, #1
 800ea1c:	6010      	str	r0, [r2, #0]
 800ea1e:	7019      	strb	r1, [r3, #0]
 800ea20:	4608      	mov	r0, r1
 800ea22:	bc10      	pop	{r4}
 800ea24:	4770      	bx	lr

0800ea26 <__sfputs_r>:
 800ea26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea28:	4606      	mov	r6, r0
 800ea2a:	460f      	mov	r7, r1
 800ea2c:	4614      	mov	r4, r2
 800ea2e:	18d5      	adds	r5, r2, r3
 800ea30:	42ac      	cmp	r4, r5
 800ea32:	d101      	bne.n	800ea38 <__sfputs_r+0x12>
 800ea34:	2000      	movs	r0, #0
 800ea36:	e007      	b.n	800ea48 <__sfputs_r+0x22>
 800ea38:	463a      	mov	r2, r7
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea40:	f7ff ffdc 	bl	800e9fc <__sfputc_r>
 800ea44:	1c43      	adds	r3, r0, #1
 800ea46:	d1f3      	bne.n	800ea30 <__sfputs_r+0xa>
 800ea48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea4c <_vfiprintf_r>:
 800ea4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea50:	460d      	mov	r5, r1
 800ea52:	4614      	mov	r4, r2
 800ea54:	4698      	mov	r8, r3
 800ea56:	4606      	mov	r6, r0
 800ea58:	b09d      	sub	sp, #116	; 0x74
 800ea5a:	b118      	cbz	r0, 800ea64 <_vfiprintf_r+0x18>
 800ea5c:	6983      	ldr	r3, [r0, #24]
 800ea5e:	b90b      	cbnz	r3, 800ea64 <_vfiprintf_r+0x18>
 800ea60:	f000 fcac 	bl	800f3bc <__sinit>
 800ea64:	4b89      	ldr	r3, [pc, #548]	; (800ec8c <_vfiprintf_r+0x240>)
 800ea66:	429d      	cmp	r5, r3
 800ea68:	d11b      	bne.n	800eaa2 <_vfiprintf_r+0x56>
 800ea6a:	6875      	ldr	r5, [r6, #4]
 800ea6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea6e:	07d9      	lsls	r1, r3, #31
 800ea70:	d405      	bmi.n	800ea7e <_vfiprintf_r+0x32>
 800ea72:	89ab      	ldrh	r3, [r5, #12]
 800ea74:	059a      	lsls	r2, r3, #22
 800ea76:	d402      	bmi.n	800ea7e <_vfiprintf_r+0x32>
 800ea78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea7a:	f000 fd3d 	bl	800f4f8 <__retarget_lock_acquire_recursive>
 800ea7e:	89ab      	ldrh	r3, [r5, #12]
 800ea80:	071b      	lsls	r3, r3, #28
 800ea82:	d501      	bpl.n	800ea88 <_vfiprintf_r+0x3c>
 800ea84:	692b      	ldr	r3, [r5, #16]
 800ea86:	b9eb      	cbnz	r3, 800eac4 <_vfiprintf_r+0x78>
 800ea88:	4629      	mov	r1, r5
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	f000 fb06 	bl	800f09c <__swsetup_r>
 800ea90:	b1c0      	cbz	r0, 800eac4 <_vfiprintf_r+0x78>
 800ea92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea94:	07dc      	lsls	r4, r3, #31
 800ea96:	d50e      	bpl.n	800eab6 <_vfiprintf_r+0x6a>
 800ea98:	f04f 30ff 	mov.w	r0, #4294967295
 800ea9c:	b01d      	add	sp, #116	; 0x74
 800ea9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa2:	4b7b      	ldr	r3, [pc, #492]	; (800ec90 <_vfiprintf_r+0x244>)
 800eaa4:	429d      	cmp	r5, r3
 800eaa6:	d101      	bne.n	800eaac <_vfiprintf_r+0x60>
 800eaa8:	68b5      	ldr	r5, [r6, #8]
 800eaaa:	e7df      	b.n	800ea6c <_vfiprintf_r+0x20>
 800eaac:	4b79      	ldr	r3, [pc, #484]	; (800ec94 <_vfiprintf_r+0x248>)
 800eaae:	429d      	cmp	r5, r3
 800eab0:	bf08      	it	eq
 800eab2:	68f5      	ldreq	r5, [r6, #12]
 800eab4:	e7da      	b.n	800ea6c <_vfiprintf_r+0x20>
 800eab6:	89ab      	ldrh	r3, [r5, #12]
 800eab8:	0598      	lsls	r0, r3, #22
 800eaba:	d4ed      	bmi.n	800ea98 <_vfiprintf_r+0x4c>
 800eabc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eabe:	f000 fd1c 	bl	800f4fa <__retarget_lock_release_recursive>
 800eac2:	e7e9      	b.n	800ea98 <_vfiprintf_r+0x4c>
 800eac4:	2300      	movs	r3, #0
 800eac6:	9309      	str	r3, [sp, #36]	; 0x24
 800eac8:	2320      	movs	r3, #32
 800eaca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eace:	2330      	movs	r3, #48	; 0x30
 800ead0:	f04f 0901 	mov.w	r9, #1
 800ead4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ead8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ec98 <_vfiprintf_r+0x24c>
 800eadc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eae0:	4623      	mov	r3, r4
 800eae2:	469a      	mov	sl, r3
 800eae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eae8:	b10a      	cbz	r2, 800eaee <_vfiprintf_r+0xa2>
 800eaea:	2a25      	cmp	r2, #37	; 0x25
 800eaec:	d1f9      	bne.n	800eae2 <_vfiprintf_r+0x96>
 800eaee:	ebba 0b04 	subs.w	fp, sl, r4
 800eaf2:	d00b      	beq.n	800eb0c <_vfiprintf_r+0xc0>
 800eaf4:	465b      	mov	r3, fp
 800eaf6:	4622      	mov	r2, r4
 800eaf8:	4629      	mov	r1, r5
 800eafa:	4630      	mov	r0, r6
 800eafc:	f7ff ff93 	bl	800ea26 <__sfputs_r>
 800eb00:	3001      	adds	r0, #1
 800eb02:	f000 80aa 	beq.w	800ec5a <_vfiprintf_r+0x20e>
 800eb06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb08:	445a      	add	r2, fp
 800eb0a:	9209      	str	r2, [sp, #36]	; 0x24
 800eb0c:	f89a 3000 	ldrb.w	r3, [sl]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f000 80a2 	beq.w	800ec5a <_vfiprintf_r+0x20e>
 800eb16:	2300      	movs	r3, #0
 800eb18:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb20:	f10a 0a01 	add.w	sl, sl, #1
 800eb24:	9304      	str	r3, [sp, #16]
 800eb26:	9307      	str	r3, [sp, #28]
 800eb28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb2c:	931a      	str	r3, [sp, #104]	; 0x68
 800eb2e:	4654      	mov	r4, sl
 800eb30:	2205      	movs	r2, #5
 800eb32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb36:	4858      	ldr	r0, [pc, #352]	; (800ec98 <_vfiprintf_r+0x24c>)
 800eb38:	f000 fd44 	bl	800f5c4 <memchr>
 800eb3c:	9a04      	ldr	r2, [sp, #16]
 800eb3e:	b9d8      	cbnz	r0, 800eb78 <_vfiprintf_r+0x12c>
 800eb40:	06d1      	lsls	r1, r2, #27
 800eb42:	bf44      	itt	mi
 800eb44:	2320      	movmi	r3, #32
 800eb46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb4a:	0713      	lsls	r3, r2, #28
 800eb4c:	bf44      	itt	mi
 800eb4e:	232b      	movmi	r3, #43	; 0x2b
 800eb50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb54:	f89a 3000 	ldrb.w	r3, [sl]
 800eb58:	2b2a      	cmp	r3, #42	; 0x2a
 800eb5a:	d015      	beq.n	800eb88 <_vfiprintf_r+0x13c>
 800eb5c:	4654      	mov	r4, sl
 800eb5e:	2000      	movs	r0, #0
 800eb60:	f04f 0c0a 	mov.w	ip, #10
 800eb64:	9a07      	ldr	r2, [sp, #28]
 800eb66:	4621      	mov	r1, r4
 800eb68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb6c:	3b30      	subs	r3, #48	; 0x30
 800eb6e:	2b09      	cmp	r3, #9
 800eb70:	d94e      	bls.n	800ec10 <_vfiprintf_r+0x1c4>
 800eb72:	b1b0      	cbz	r0, 800eba2 <_vfiprintf_r+0x156>
 800eb74:	9207      	str	r2, [sp, #28]
 800eb76:	e014      	b.n	800eba2 <_vfiprintf_r+0x156>
 800eb78:	eba0 0308 	sub.w	r3, r0, r8
 800eb7c:	fa09 f303 	lsl.w	r3, r9, r3
 800eb80:	4313      	orrs	r3, r2
 800eb82:	46a2      	mov	sl, r4
 800eb84:	9304      	str	r3, [sp, #16]
 800eb86:	e7d2      	b.n	800eb2e <_vfiprintf_r+0xe2>
 800eb88:	9b03      	ldr	r3, [sp, #12]
 800eb8a:	1d19      	adds	r1, r3, #4
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	9103      	str	r1, [sp, #12]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	bfbb      	ittet	lt
 800eb94:	425b      	neglt	r3, r3
 800eb96:	f042 0202 	orrlt.w	r2, r2, #2
 800eb9a:	9307      	strge	r3, [sp, #28]
 800eb9c:	9307      	strlt	r3, [sp, #28]
 800eb9e:	bfb8      	it	lt
 800eba0:	9204      	strlt	r2, [sp, #16]
 800eba2:	7823      	ldrb	r3, [r4, #0]
 800eba4:	2b2e      	cmp	r3, #46	; 0x2e
 800eba6:	d10c      	bne.n	800ebc2 <_vfiprintf_r+0x176>
 800eba8:	7863      	ldrb	r3, [r4, #1]
 800ebaa:	2b2a      	cmp	r3, #42	; 0x2a
 800ebac:	d135      	bne.n	800ec1a <_vfiprintf_r+0x1ce>
 800ebae:	9b03      	ldr	r3, [sp, #12]
 800ebb0:	3402      	adds	r4, #2
 800ebb2:	1d1a      	adds	r2, r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	9203      	str	r2, [sp, #12]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	bfb8      	it	lt
 800ebbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebc0:	9305      	str	r3, [sp, #20]
 800ebc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eca8 <_vfiprintf_r+0x25c>
 800ebc6:	2203      	movs	r2, #3
 800ebc8:	4650      	mov	r0, sl
 800ebca:	7821      	ldrb	r1, [r4, #0]
 800ebcc:	f000 fcfa 	bl	800f5c4 <memchr>
 800ebd0:	b140      	cbz	r0, 800ebe4 <_vfiprintf_r+0x198>
 800ebd2:	2340      	movs	r3, #64	; 0x40
 800ebd4:	eba0 000a 	sub.w	r0, r0, sl
 800ebd8:	fa03 f000 	lsl.w	r0, r3, r0
 800ebdc:	9b04      	ldr	r3, [sp, #16]
 800ebde:	3401      	adds	r4, #1
 800ebe0:	4303      	orrs	r3, r0
 800ebe2:	9304      	str	r3, [sp, #16]
 800ebe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebe8:	2206      	movs	r2, #6
 800ebea:	482c      	ldr	r0, [pc, #176]	; (800ec9c <_vfiprintf_r+0x250>)
 800ebec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebf0:	f000 fce8 	bl	800f5c4 <memchr>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d03f      	beq.n	800ec78 <_vfiprintf_r+0x22c>
 800ebf8:	4b29      	ldr	r3, [pc, #164]	; (800eca0 <_vfiprintf_r+0x254>)
 800ebfa:	bb1b      	cbnz	r3, 800ec44 <_vfiprintf_r+0x1f8>
 800ebfc:	9b03      	ldr	r3, [sp, #12]
 800ebfe:	3307      	adds	r3, #7
 800ec00:	f023 0307 	bic.w	r3, r3, #7
 800ec04:	3308      	adds	r3, #8
 800ec06:	9303      	str	r3, [sp, #12]
 800ec08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec0a:	443b      	add	r3, r7
 800ec0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec0e:	e767      	b.n	800eae0 <_vfiprintf_r+0x94>
 800ec10:	460c      	mov	r4, r1
 800ec12:	2001      	movs	r0, #1
 800ec14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec18:	e7a5      	b.n	800eb66 <_vfiprintf_r+0x11a>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	f04f 0c0a 	mov.w	ip, #10
 800ec20:	4619      	mov	r1, r3
 800ec22:	3401      	adds	r4, #1
 800ec24:	9305      	str	r3, [sp, #20]
 800ec26:	4620      	mov	r0, r4
 800ec28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec2c:	3a30      	subs	r2, #48	; 0x30
 800ec2e:	2a09      	cmp	r2, #9
 800ec30:	d903      	bls.n	800ec3a <_vfiprintf_r+0x1ee>
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d0c5      	beq.n	800ebc2 <_vfiprintf_r+0x176>
 800ec36:	9105      	str	r1, [sp, #20]
 800ec38:	e7c3      	b.n	800ebc2 <_vfiprintf_r+0x176>
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec42:	e7f0      	b.n	800ec26 <_vfiprintf_r+0x1da>
 800ec44:	ab03      	add	r3, sp, #12
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	462a      	mov	r2, r5
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	4b15      	ldr	r3, [pc, #84]	; (800eca4 <_vfiprintf_r+0x258>)
 800ec4e:	a904      	add	r1, sp, #16
 800ec50:	f3af 8000 	nop.w
 800ec54:	4607      	mov	r7, r0
 800ec56:	1c78      	adds	r0, r7, #1
 800ec58:	d1d6      	bne.n	800ec08 <_vfiprintf_r+0x1bc>
 800ec5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec5c:	07d9      	lsls	r1, r3, #31
 800ec5e:	d405      	bmi.n	800ec6c <_vfiprintf_r+0x220>
 800ec60:	89ab      	ldrh	r3, [r5, #12]
 800ec62:	059a      	lsls	r2, r3, #22
 800ec64:	d402      	bmi.n	800ec6c <_vfiprintf_r+0x220>
 800ec66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec68:	f000 fc47 	bl	800f4fa <__retarget_lock_release_recursive>
 800ec6c:	89ab      	ldrh	r3, [r5, #12]
 800ec6e:	065b      	lsls	r3, r3, #25
 800ec70:	f53f af12 	bmi.w	800ea98 <_vfiprintf_r+0x4c>
 800ec74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec76:	e711      	b.n	800ea9c <_vfiprintf_r+0x50>
 800ec78:	ab03      	add	r3, sp, #12
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	462a      	mov	r2, r5
 800ec7e:	4630      	mov	r0, r6
 800ec80:	4b08      	ldr	r3, [pc, #32]	; (800eca4 <_vfiprintf_r+0x258>)
 800ec82:	a904      	add	r1, sp, #16
 800ec84:	f000 f882 	bl	800ed8c <_printf_i>
 800ec88:	e7e4      	b.n	800ec54 <_vfiprintf_r+0x208>
 800ec8a:	bf00      	nop
 800ec8c:	08014548 	.word	0x08014548
 800ec90:	08014568 	.word	0x08014568
 800ec94:	08014528 	.word	0x08014528
 800ec98:	080144f2 	.word	0x080144f2
 800ec9c:	080144fc 	.word	0x080144fc
 800eca0:	00000000 	.word	0x00000000
 800eca4:	0800ea27 	.word	0x0800ea27
 800eca8:	080144f8 	.word	0x080144f8

0800ecac <_printf_common>:
 800ecac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb0:	4616      	mov	r6, r2
 800ecb2:	4699      	mov	r9, r3
 800ecb4:	688a      	ldr	r2, [r1, #8]
 800ecb6:	690b      	ldr	r3, [r1, #16]
 800ecb8:	4607      	mov	r7, r0
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	bfb8      	it	lt
 800ecbe:	4613      	movlt	r3, r2
 800ecc0:	6033      	str	r3, [r6, #0]
 800ecc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eccc:	b10a      	cbz	r2, 800ecd2 <_printf_common+0x26>
 800ecce:	3301      	adds	r3, #1
 800ecd0:	6033      	str	r3, [r6, #0]
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	0699      	lsls	r1, r3, #26
 800ecd6:	bf42      	ittt	mi
 800ecd8:	6833      	ldrmi	r3, [r6, #0]
 800ecda:	3302      	addmi	r3, #2
 800ecdc:	6033      	strmi	r3, [r6, #0]
 800ecde:	6825      	ldr	r5, [r4, #0]
 800ece0:	f015 0506 	ands.w	r5, r5, #6
 800ece4:	d106      	bne.n	800ecf4 <_printf_common+0x48>
 800ece6:	f104 0a19 	add.w	sl, r4, #25
 800ecea:	68e3      	ldr	r3, [r4, #12]
 800ecec:	6832      	ldr	r2, [r6, #0]
 800ecee:	1a9b      	subs	r3, r3, r2
 800ecf0:	42ab      	cmp	r3, r5
 800ecf2:	dc28      	bgt.n	800ed46 <_printf_common+0x9a>
 800ecf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecf8:	1e13      	subs	r3, r2, #0
 800ecfa:	6822      	ldr	r2, [r4, #0]
 800ecfc:	bf18      	it	ne
 800ecfe:	2301      	movne	r3, #1
 800ed00:	0692      	lsls	r2, r2, #26
 800ed02:	d42d      	bmi.n	800ed60 <_printf_common+0xb4>
 800ed04:	4649      	mov	r1, r9
 800ed06:	4638      	mov	r0, r7
 800ed08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed0c:	47c0      	blx	r8
 800ed0e:	3001      	adds	r0, #1
 800ed10:	d020      	beq.n	800ed54 <_printf_common+0xa8>
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	68e5      	ldr	r5, [r4, #12]
 800ed16:	f003 0306 	and.w	r3, r3, #6
 800ed1a:	2b04      	cmp	r3, #4
 800ed1c:	bf18      	it	ne
 800ed1e:	2500      	movne	r5, #0
 800ed20:	6832      	ldr	r2, [r6, #0]
 800ed22:	f04f 0600 	mov.w	r6, #0
 800ed26:	68a3      	ldr	r3, [r4, #8]
 800ed28:	bf08      	it	eq
 800ed2a:	1aad      	subeq	r5, r5, r2
 800ed2c:	6922      	ldr	r2, [r4, #16]
 800ed2e:	bf08      	it	eq
 800ed30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed34:	4293      	cmp	r3, r2
 800ed36:	bfc4      	itt	gt
 800ed38:	1a9b      	subgt	r3, r3, r2
 800ed3a:	18ed      	addgt	r5, r5, r3
 800ed3c:	341a      	adds	r4, #26
 800ed3e:	42b5      	cmp	r5, r6
 800ed40:	d11a      	bne.n	800ed78 <_printf_common+0xcc>
 800ed42:	2000      	movs	r0, #0
 800ed44:	e008      	b.n	800ed58 <_printf_common+0xac>
 800ed46:	2301      	movs	r3, #1
 800ed48:	4652      	mov	r2, sl
 800ed4a:	4649      	mov	r1, r9
 800ed4c:	4638      	mov	r0, r7
 800ed4e:	47c0      	blx	r8
 800ed50:	3001      	adds	r0, #1
 800ed52:	d103      	bne.n	800ed5c <_printf_common+0xb0>
 800ed54:	f04f 30ff 	mov.w	r0, #4294967295
 800ed58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5c:	3501      	adds	r5, #1
 800ed5e:	e7c4      	b.n	800ecea <_printf_common+0x3e>
 800ed60:	2030      	movs	r0, #48	; 0x30
 800ed62:	18e1      	adds	r1, r4, r3
 800ed64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed68:	1c5a      	adds	r2, r3, #1
 800ed6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed6e:	4422      	add	r2, r4
 800ed70:	3302      	adds	r3, #2
 800ed72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed76:	e7c5      	b.n	800ed04 <_printf_common+0x58>
 800ed78:	2301      	movs	r3, #1
 800ed7a:	4622      	mov	r2, r4
 800ed7c:	4649      	mov	r1, r9
 800ed7e:	4638      	mov	r0, r7
 800ed80:	47c0      	blx	r8
 800ed82:	3001      	adds	r0, #1
 800ed84:	d0e6      	beq.n	800ed54 <_printf_common+0xa8>
 800ed86:	3601      	adds	r6, #1
 800ed88:	e7d9      	b.n	800ed3e <_printf_common+0x92>
	...

0800ed8c <_printf_i>:
 800ed8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed90:	460c      	mov	r4, r1
 800ed92:	7e27      	ldrb	r7, [r4, #24]
 800ed94:	4691      	mov	r9, r2
 800ed96:	2f78      	cmp	r7, #120	; 0x78
 800ed98:	4680      	mov	r8, r0
 800ed9a:	469a      	mov	sl, r3
 800ed9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eda2:	d807      	bhi.n	800edb4 <_printf_i+0x28>
 800eda4:	2f62      	cmp	r7, #98	; 0x62
 800eda6:	d80a      	bhi.n	800edbe <_printf_i+0x32>
 800eda8:	2f00      	cmp	r7, #0
 800edaa:	f000 80d9 	beq.w	800ef60 <_printf_i+0x1d4>
 800edae:	2f58      	cmp	r7, #88	; 0x58
 800edb0:	f000 80a4 	beq.w	800eefc <_printf_i+0x170>
 800edb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800edb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800edbc:	e03a      	b.n	800ee34 <_printf_i+0xa8>
 800edbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edc2:	2b15      	cmp	r3, #21
 800edc4:	d8f6      	bhi.n	800edb4 <_printf_i+0x28>
 800edc6:	a001      	add	r0, pc, #4	; (adr r0, 800edcc <_printf_i+0x40>)
 800edc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800edcc:	0800ee25 	.word	0x0800ee25
 800edd0:	0800ee39 	.word	0x0800ee39
 800edd4:	0800edb5 	.word	0x0800edb5
 800edd8:	0800edb5 	.word	0x0800edb5
 800eddc:	0800edb5 	.word	0x0800edb5
 800ede0:	0800edb5 	.word	0x0800edb5
 800ede4:	0800ee39 	.word	0x0800ee39
 800ede8:	0800edb5 	.word	0x0800edb5
 800edec:	0800edb5 	.word	0x0800edb5
 800edf0:	0800edb5 	.word	0x0800edb5
 800edf4:	0800edb5 	.word	0x0800edb5
 800edf8:	0800ef47 	.word	0x0800ef47
 800edfc:	0800ee69 	.word	0x0800ee69
 800ee00:	0800ef29 	.word	0x0800ef29
 800ee04:	0800edb5 	.word	0x0800edb5
 800ee08:	0800edb5 	.word	0x0800edb5
 800ee0c:	0800ef69 	.word	0x0800ef69
 800ee10:	0800edb5 	.word	0x0800edb5
 800ee14:	0800ee69 	.word	0x0800ee69
 800ee18:	0800edb5 	.word	0x0800edb5
 800ee1c:	0800edb5 	.word	0x0800edb5
 800ee20:	0800ef31 	.word	0x0800ef31
 800ee24:	680b      	ldr	r3, [r1, #0]
 800ee26:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee2a:	1d1a      	adds	r2, r3, #4
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	600a      	str	r2, [r1, #0]
 800ee30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee34:	2301      	movs	r3, #1
 800ee36:	e0a4      	b.n	800ef82 <_printf_i+0x1f6>
 800ee38:	6825      	ldr	r5, [r4, #0]
 800ee3a:	6808      	ldr	r0, [r1, #0]
 800ee3c:	062e      	lsls	r6, r5, #24
 800ee3e:	f100 0304 	add.w	r3, r0, #4
 800ee42:	d50a      	bpl.n	800ee5a <_printf_i+0xce>
 800ee44:	6805      	ldr	r5, [r0, #0]
 800ee46:	600b      	str	r3, [r1, #0]
 800ee48:	2d00      	cmp	r5, #0
 800ee4a:	da03      	bge.n	800ee54 <_printf_i+0xc8>
 800ee4c:	232d      	movs	r3, #45	; 0x2d
 800ee4e:	426d      	negs	r5, r5
 800ee50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee54:	230a      	movs	r3, #10
 800ee56:	485e      	ldr	r0, [pc, #376]	; (800efd0 <_printf_i+0x244>)
 800ee58:	e019      	b.n	800ee8e <_printf_i+0x102>
 800ee5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ee5e:	6805      	ldr	r5, [r0, #0]
 800ee60:	600b      	str	r3, [r1, #0]
 800ee62:	bf18      	it	ne
 800ee64:	b22d      	sxthne	r5, r5
 800ee66:	e7ef      	b.n	800ee48 <_printf_i+0xbc>
 800ee68:	680b      	ldr	r3, [r1, #0]
 800ee6a:	6825      	ldr	r5, [r4, #0]
 800ee6c:	1d18      	adds	r0, r3, #4
 800ee6e:	6008      	str	r0, [r1, #0]
 800ee70:	0628      	lsls	r0, r5, #24
 800ee72:	d501      	bpl.n	800ee78 <_printf_i+0xec>
 800ee74:	681d      	ldr	r5, [r3, #0]
 800ee76:	e002      	b.n	800ee7e <_printf_i+0xf2>
 800ee78:	0669      	lsls	r1, r5, #25
 800ee7a:	d5fb      	bpl.n	800ee74 <_printf_i+0xe8>
 800ee7c:	881d      	ldrh	r5, [r3, #0]
 800ee7e:	2f6f      	cmp	r7, #111	; 0x6f
 800ee80:	bf0c      	ite	eq
 800ee82:	2308      	moveq	r3, #8
 800ee84:	230a      	movne	r3, #10
 800ee86:	4852      	ldr	r0, [pc, #328]	; (800efd0 <_printf_i+0x244>)
 800ee88:	2100      	movs	r1, #0
 800ee8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee8e:	6866      	ldr	r6, [r4, #4]
 800ee90:	2e00      	cmp	r6, #0
 800ee92:	bfa8      	it	ge
 800ee94:	6821      	ldrge	r1, [r4, #0]
 800ee96:	60a6      	str	r6, [r4, #8]
 800ee98:	bfa4      	itt	ge
 800ee9a:	f021 0104 	bicge.w	r1, r1, #4
 800ee9e:	6021      	strge	r1, [r4, #0]
 800eea0:	b90d      	cbnz	r5, 800eea6 <_printf_i+0x11a>
 800eea2:	2e00      	cmp	r6, #0
 800eea4:	d04d      	beq.n	800ef42 <_printf_i+0x1b6>
 800eea6:	4616      	mov	r6, r2
 800eea8:	fbb5 f1f3 	udiv	r1, r5, r3
 800eeac:	fb03 5711 	mls	r7, r3, r1, r5
 800eeb0:	5dc7      	ldrb	r7, [r0, r7]
 800eeb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eeb6:	462f      	mov	r7, r5
 800eeb8:	42bb      	cmp	r3, r7
 800eeba:	460d      	mov	r5, r1
 800eebc:	d9f4      	bls.n	800eea8 <_printf_i+0x11c>
 800eebe:	2b08      	cmp	r3, #8
 800eec0:	d10b      	bne.n	800eeda <_printf_i+0x14e>
 800eec2:	6823      	ldr	r3, [r4, #0]
 800eec4:	07df      	lsls	r7, r3, #31
 800eec6:	d508      	bpl.n	800eeda <_printf_i+0x14e>
 800eec8:	6923      	ldr	r3, [r4, #16]
 800eeca:	6861      	ldr	r1, [r4, #4]
 800eecc:	4299      	cmp	r1, r3
 800eece:	bfde      	ittt	le
 800eed0:	2330      	movle	r3, #48	; 0x30
 800eed2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eed6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eeda:	1b92      	subs	r2, r2, r6
 800eedc:	6122      	str	r2, [r4, #16]
 800eede:	464b      	mov	r3, r9
 800eee0:	4621      	mov	r1, r4
 800eee2:	4640      	mov	r0, r8
 800eee4:	f8cd a000 	str.w	sl, [sp]
 800eee8:	aa03      	add	r2, sp, #12
 800eeea:	f7ff fedf 	bl	800ecac <_printf_common>
 800eeee:	3001      	adds	r0, #1
 800eef0:	d14c      	bne.n	800ef8c <_printf_i+0x200>
 800eef2:	f04f 30ff 	mov.w	r0, #4294967295
 800eef6:	b004      	add	sp, #16
 800eef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eefc:	4834      	ldr	r0, [pc, #208]	; (800efd0 <_printf_i+0x244>)
 800eefe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ef02:	680e      	ldr	r6, [r1, #0]
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	f856 5b04 	ldr.w	r5, [r6], #4
 800ef0a:	061f      	lsls	r7, r3, #24
 800ef0c:	600e      	str	r6, [r1, #0]
 800ef0e:	d514      	bpl.n	800ef3a <_printf_i+0x1ae>
 800ef10:	07d9      	lsls	r1, r3, #31
 800ef12:	bf44      	itt	mi
 800ef14:	f043 0320 	orrmi.w	r3, r3, #32
 800ef18:	6023      	strmi	r3, [r4, #0]
 800ef1a:	b91d      	cbnz	r5, 800ef24 <_printf_i+0x198>
 800ef1c:	6823      	ldr	r3, [r4, #0]
 800ef1e:	f023 0320 	bic.w	r3, r3, #32
 800ef22:	6023      	str	r3, [r4, #0]
 800ef24:	2310      	movs	r3, #16
 800ef26:	e7af      	b.n	800ee88 <_printf_i+0xfc>
 800ef28:	6823      	ldr	r3, [r4, #0]
 800ef2a:	f043 0320 	orr.w	r3, r3, #32
 800ef2e:	6023      	str	r3, [r4, #0]
 800ef30:	2378      	movs	r3, #120	; 0x78
 800ef32:	4828      	ldr	r0, [pc, #160]	; (800efd4 <_printf_i+0x248>)
 800ef34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef38:	e7e3      	b.n	800ef02 <_printf_i+0x176>
 800ef3a:	065e      	lsls	r6, r3, #25
 800ef3c:	bf48      	it	mi
 800ef3e:	b2ad      	uxthmi	r5, r5
 800ef40:	e7e6      	b.n	800ef10 <_printf_i+0x184>
 800ef42:	4616      	mov	r6, r2
 800ef44:	e7bb      	b.n	800eebe <_printf_i+0x132>
 800ef46:	680b      	ldr	r3, [r1, #0]
 800ef48:	6826      	ldr	r6, [r4, #0]
 800ef4a:	1d1d      	adds	r5, r3, #4
 800ef4c:	6960      	ldr	r0, [r4, #20]
 800ef4e:	600d      	str	r5, [r1, #0]
 800ef50:	0635      	lsls	r5, r6, #24
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	d501      	bpl.n	800ef5a <_printf_i+0x1ce>
 800ef56:	6018      	str	r0, [r3, #0]
 800ef58:	e002      	b.n	800ef60 <_printf_i+0x1d4>
 800ef5a:	0671      	lsls	r1, r6, #25
 800ef5c:	d5fb      	bpl.n	800ef56 <_printf_i+0x1ca>
 800ef5e:	8018      	strh	r0, [r3, #0]
 800ef60:	2300      	movs	r3, #0
 800ef62:	4616      	mov	r6, r2
 800ef64:	6123      	str	r3, [r4, #16]
 800ef66:	e7ba      	b.n	800eede <_printf_i+0x152>
 800ef68:	680b      	ldr	r3, [r1, #0]
 800ef6a:	1d1a      	adds	r2, r3, #4
 800ef6c:	600a      	str	r2, [r1, #0]
 800ef6e:	681e      	ldr	r6, [r3, #0]
 800ef70:	2100      	movs	r1, #0
 800ef72:	4630      	mov	r0, r6
 800ef74:	6862      	ldr	r2, [r4, #4]
 800ef76:	f000 fb25 	bl	800f5c4 <memchr>
 800ef7a:	b108      	cbz	r0, 800ef80 <_printf_i+0x1f4>
 800ef7c:	1b80      	subs	r0, r0, r6
 800ef7e:	6060      	str	r0, [r4, #4]
 800ef80:	6863      	ldr	r3, [r4, #4]
 800ef82:	6123      	str	r3, [r4, #16]
 800ef84:	2300      	movs	r3, #0
 800ef86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef8a:	e7a8      	b.n	800eede <_printf_i+0x152>
 800ef8c:	4632      	mov	r2, r6
 800ef8e:	4649      	mov	r1, r9
 800ef90:	4640      	mov	r0, r8
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	47d0      	blx	sl
 800ef96:	3001      	adds	r0, #1
 800ef98:	d0ab      	beq.n	800eef2 <_printf_i+0x166>
 800ef9a:	6823      	ldr	r3, [r4, #0]
 800ef9c:	079b      	lsls	r3, r3, #30
 800ef9e:	d413      	bmi.n	800efc8 <_printf_i+0x23c>
 800efa0:	68e0      	ldr	r0, [r4, #12]
 800efa2:	9b03      	ldr	r3, [sp, #12]
 800efa4:	4298      	cmp	r0, r3
 800efa6:	bfb8      	it	lt
 800efa8:	4618      	movlt	r0, r3
 800efaa:	e7a4      	b.n	800eef6 <_printf_i+0x16a>
 800efac:	2301      	movs	r3, #1
 800efae:	4632      	mov	r2, r6
 800efb0:	4649      	mov	r1, r9
 800efb2:	4640      	mov	r0, r8
 800efb4:	47d0      	blx	sl
 800efb6:	3001      	adds	r0, #1
 800efb8:	d09b      	beq.n	800eef2 <_printf_i+0x166>
 800efba:	3501      	adds	r5, #1
 800efbc:	68e3      	ldr	r3, [r4, #12]
 800efbe:	9903      	ldr	r1, [sp, #12]
 800efc0:	1a5b      	subs	r3, r3, r1
 800efc2:	42ab      	cmp	r3, r5
 800efc4:	dcf2      	bgt.n	800efac <_printf_i+0x220>
 800efc6:	e7eb      	b.n	800efa0 <_printf_i+0x214>
 800efc8:	2500      	movs	r5, #0
 800efca:	f104 0619 	add.w	r6, r4, #25
 800efce:	e7f5      	b.n	800efbc <_printf_i+0x230>
 800efd0:	08014503 	.word	0x08014503
 800efd4:	08014514 	.word	0x08014514

0800efd8 <_sbrk_r>:
 800efd8:	b538      	push	{r3, r4, r5, lr}
 800efda:	2300      	movs	r3, #0
 800efdc:	4d05      	ldr	r5, [pc, #20]	; (800eff4 <_sbrk_r+0x1c>)
 800efde:	4604      	mov	r4, r0
 800efe0:	4608      	mov	r0, r1
 800efe2:	602b      	str	r3, [r5, #0]
 800efe4:	f7f3 fa18 	bl	8002418 <_sbrk>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	d102      	bne.n	800eff2 <_sbrk_r+0x1a>
 800efec:	682b      	ldr	r3, [r5, #0]
 800efee:	b103      	cbz	r3, 800eff2 <_sbrk_r+0x1a>
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	bd38      	pop	{r3, r4, r5, pc}
 800eff4:	200017c0 	.word	0x200017c0

0800eff8 <__swbuf_r>:
 800eff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effa:	460e      	mov	r6, r1
 800effc:	4614      	mov	r4, r2
 800effe:	4605      	mov	r5, r0
 800f000:	b118      	cbz	r0, 800f00a <__swbuf_r+0x12>
 800f002:	6983      	ldr	r3, [r0, #24]
 800f004:	b90b      	cbnz	r3, 800f00a <__swbuf_r+0x12>
 800f006:	f000 f9d9 	bl	800f3bc <__sinit>
 800f00a:	4b21      	ldr	r3, [pc, #132]	; (800f090 <__swbuf_r+0x98>)
 800f00c:	429c      	cmp	r4, r3
 800f00e:	d12b      	bne.n	800f068 <__swbuf_r+0x70>
 800f010:	686c      	ldr	r4, [r5, #4]
 800f012:	69a3      	ldr	r3, [r4, #24]
 800f014:	60a3      	str	r3, [r4, #8]
 800f016:	89a3      	ldrh	r3, [r4, #12]
 800f018:	071a      	lsls	r2, r3, #28
 800f01a:	d52f      	bpl.n	800f07c <__swbuf_r+0x84>
 800f01c:	6923      	ldr	r3, [r4, #16]
 800f01e:	b36b      	cbz	r3, 800f07c <__swbuf_r+0x84>
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	6820      	ldr	r0, [r4, #0]
 800f024:	b2f6      	uxtb	r6, r6
 800f026:	1ac0      	subs	r0, r0, r3
 800f028:	6963      	ldr	r3, [r4, #20]
 800f02a:	4637      	mov	r7, r6
 800f02c:	4283      	cmp	r3, r0
 800f02e:	dc04      	bgt.n	800f03a <__swbuf_r+0x42>
 800f030:	4621      	mov	r1, r4
 800f032:	4628      	mov	r0, r5
 800f034:	f000 f92e 	bl	800f294 <_fflush_r>
 800f038:	bb30      	cbnz	r0, 800f088 <__swbuf_r+0x90>
 800f03a:	68a3      	ldr	r3, [r4, #8]
 800f03c:	3001      	adds	r0, #1
 800f03e:	3b01      	subs	r3, #1
 800f040:	60a3      	str	r3, [r4, #8]
 800f042:	6823      	ldr	r3, [r4, #0]
 800f044:	1c5a      	adds	r2, r3, #1
 800f046:	6022      	str	r2, [r4, #0]
 800f048:	701e      	strb	r6, [r3, #0]
 800f04a:	6963      	ldr	r3, [r4, #20]
 800f04c:	4283      	cmp	r3, r0
 800f04e:	d004      	beq.n	800f05a <__swbuf_r+0x62>
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	07db      	lsls	r3, r3, #31
 800f054:	d506      	bpl.n	800f064 <__swbuf_r+0x6c>
 800f056:	2e0a      	cmp	r6, #10
 800f058:	d104      	bne.n	800f064 <__swbuf_r+0x6c>
 800f05a:	4621      	mov	r1, r4
 800f05c:	4628      	mov	r0, r5
 800f05e:	f000 f919 	bl	800f294 <_fflush_r>
 800f062:	b988      	cbnz	r0, 800f088 <__swbuf_r+0x90>
 800f064:	4638      	mov	r0, r7
 800f066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f068:	4b0a      	ldr	r3, [pc, #40]	; (800f094 <__swbuf_r+0x9c>)
 800f06a:	429c      	cmp	r4, r3
 800f06c:	d101      	bne.n	800f072 <__swbuf_r+0x7a>
 800f06e:	68ac      	ldr	r4, [r5, #8]
 800f070:	e7cf      	b.n	800f012 <__swbuf_r+0x1a>
 800f072:	4b09      	ldr	r3, [pc, #36]	; (800f098 <__swbuf_r+0xa0>)
 800f074:	429c      	cmp	r4, r3
 800f076:	bf08      	it	eq
 800f078:	68ec      	ldreq	r4, [r5, #12]
 800f07a:	e7ca      	b.n	800f012 <__swbuf_r+0x1a>
 800f07c:	4621      	mov	r1, r4
 800f07e:	4628      	mov	r0, r5
 800f080:	f000 f80c 	bl	800f09c <__swsetup_r>
 800f084:	2800      	cmp	r0, #0
 800f086:	d0cb      	beq.n	800f020 <__swbuf_r+0x28>
 800f088:	f04f 37ff 	mov.w	r7, #4294967295
 800f08c:	e7ea      	b.n	800f064 <__swbuf_r+0x6c>
 800f08e:	bf00      	nop
 800f090:	08014548 	.word	0x08014548
 800f094:	08014568 	.word	0x08014568
 800f098:	08014528 	.word	0x08014528

0800f09c <__swsetup_r>:
 800f09c:	4b32      	ldr	r3, [pc, #200]	; (800f168 <__swsetup_r+0xcc>)
 800f09e:	b570      	push	{r4, r5, r6, lr}
 800f0a0:	681d      	ldr	r5, [r3, #0]
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	b125      	cbz	r5, 800f0b2 <__swsetup_r+0x16>
 800f0a8:	69ab      	ldr	r3, [r5, #24]
 800f0aa:	b913      	cbnz	r3, 800f0b2 <__swsetup_r+0x16>
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	f000 f985 	bl	800f3bc <__sinit>
 800f0b2:	4b2e      	ldr	r3, [pc, #184]	; (800f16c <__swsetup_r+0xd0>)
 800f0b4:	429c      	cmp	r4, r3
 800f0b6:	d10f      	bne.n	800f0d8 <__swsetup_r+0x3c>
 800f0b8:	686c      	ldr	r4, [r5, #4]
 800f0ba:	89a3      	ldrh	r3, [r4, #12]
 800f0bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0c0:	0719      	lsls	r1, r3, #28
 800f0c2:	d42c      	bmi.n	800f11e <__swsetup_r+0x82>
 800f0c4:	06dd      	lsls	r5, r3, #27
 800f0c6:	d411      	bmi.n	800f0ec <__swsetup_r+0x50>
 800f0c8:	2309      	movs	r3, #9
 800f0ca:	6033      	str	r3, [r6, #0]
 800f0cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d4:	81a3      	strh	r3, [r4, #12]
 800f0d6:	e03e      	b.n	800f156 <__swsetup_r+0xba>
 800f0d8:	4b25      	ldr	r3, [pc, #148]	; (800f170 <__swsetup_r+0xd4>)
 800f0da:	429c      	cmp	r4, r3
 800f0dc:	d101      	bne.n	800f0e2 <__swsetup_r+0x46>
 800f0de:	68ac      	ldr	r4, [r5, #8]
 800f0e0:	e7eb      	b.n	800f0ba <__swsetup_r+0x1e>
 800f0e2:	4b24      	ldr	r3, [pc, #144]	; (800f174 <__swsetup_r+0xd8>)
 800f0e4:	429c      	cmp	r4, r3
 800f0e6:	bf08      	it	eq
 800f0e8:	68ec      	ldreq	r4, [r5, #12]
 800f0ea:	e7e6      	b.n	800f0ba <__swsetup_r+0x1e>
 800f0ec:	0758      	lsls	r0, r3, #29
 800f0ee:	d512      	bpl.n	800f116 <__swsetup_r+0x7a>
 800f0f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0f2:	b141      	cbz	r1, 800f106 <__swsetup_r+0x6a>
 800f0f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0f8:	4299      	cmp	r1, r3
 800f0fa:	d002      	beq.n	800f102 <__swsetup_r+0x66>
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	f7ff fa7b 	bl	800e5f8 <_free_r>
 800f102:	2300      	movs	r3, #0
 800f104:	6363      	str	r3, [r4, #52]	; 0x34
 800f106:	89a3      	ldrh	r3, [r4, #12]
 800f108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f10c:	81a3      	strh	r3, [r4, #12]
 800f10e:	2300      	movs	r3, #0
 800f110:	6063      	str	r3, [r4, #4]
 800f112:	6923      	ldr	r3, [r4, #16]
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	89a3      	ldrh	r3, [r4, #12]
 800f118:	f043 0308 	orr.w	r3, r3, #8
 800f11c:	81a3      	strh	r3, [r4, #12]
 800f11e:	6923      	ldr	r3, [r4, #16]
 800f120:	b94b      	cbnz	r3, 800f136 <__swsetup_r+0x9a>
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f12c:	d003      	beq.n	800f136 <__swsetup_r+0x9a>
 800f12e:	4621      	mov	r1, r4
 800f130:	4630      	mov	r0, r6
 800f132:	f000 fa07 	bl	800f544 <__smakebuf_r>
 800f136:	89a0      	ldrh	r0, [r4, #12]
 800f138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f13c:	f010 0301 	ands.w	r3, r0, #1
 800f140:	d00a      	beq.n	800f158 <__swsetup_r+0xbc>
 800f142:	2300      	movs	r3, #0
 800f144:	60a3      	str	r3, [r4, #8]
 800f146:	6963      	ldr	r3, [r4, #20]
 800f148:	425b      	negs	r3, r3
 800f14a:	61a3      	str	r3, [r4, #24]
 800f14c:	6923      	ldr	r3, [r4, #16]
 800f14e:	b943      	cbnz	r3, 800f162 <__swsetup_r+0xc6>
 800f150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f154:	d1ba      	bne.n	800f0cc <__swsetup_r+0x30>
 800f156:	bd70      	pop	{r4, r5, r6, pc}
 800f158:	0781      	lsls	r1, r0, #30
 800f15a:	bf58      	it	pl
 800f15c:	6963      	ldrpl	r3, [r4, #20]
 800f15e:	60a3      	str	r3, [r4, #8]
 800f160:	e7f4      	b.n	800f14c <__swsetup_r+0xb0>
 800f162:	2000      	movs	r0, #0
 800f164:	e7f7      	b.n	800f156 <__swsetup_r+0xba>
 800f166:	bf00      	nop
 800f168:	20000018 	.word	0x20000018
 800f16c:	08014548 	.word	0x08014548
 800f170:	08014568 	.word	0x08014568
 800f174:	08014528 	.word	0x08014528

0800f178 <abort>:
 800f178:	2006      	movs	r0, #6
 800f17a:	b508      	push	{r3, lr}
 800f17c:	f000 fab2 	bl	800f6e4 <raise>
 800f180:	2001      	movs	r0, #1
 800f182:	f7f3 f8d6 	bl	8002332 <_exit>
	...

0800f188 <__sflush_r>:
 800f188:	898a      	ldrh	r2, [r1, #12]
 800f18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f18e:	4605      	mov	r5, r0
 800f190:	0710      	lsls	r0, r2, #28
 800f192:	460c      	mov	r4, r1
 800f194:	d458      	bmi.n	800f248 <__sflush_r+0xc0>
 800f196:	684b      	ldr	r3, [r1, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	dc05      	bgt.n	800f1a8 <__sflush_r+0x20>
 800f19c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	dc02      	bgt.n	800f1a8 <__sflush_r+0x20>
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1aa:	2e00      	cmp	r6, #0
 800f1ac:	d0f9      	beq.n	800f1a2 <__sflush_r+0x1a>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1b4:	682f      	ldr	r7, [r5, #0]
 800f1b6:	602b      	str	r3, [r5, #0]
 800f1b8:	d032      	beq.n	800f220 <__sflush_r+0x98>
 800f1ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1bc:	89a3      	ldrh	r3, [r4, #12]
 800f1be:	075a      	lsls	r2, r3, #29
 800f1c0:	d505      	bpl.n	800f1ce <__sflush_r+0x46>
 800f1c2:	6863      	ldr	r3, [r4, #4]
 800f1c4:	1ac0      	subs	r0, r0, r3
 800f1c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1c8:	b10b      	cbz	r3, 800f1ce <__sflush_r+0x46>
 800f1ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1cc:	1ac0      	subs	r0, r0, r3
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	6a21      	ldr	r1, [r4, #32]
 800f1d8:	47b0      	blx	r6
 800f1da:	1c43      	adds	r3, r0, #1
 800f1dc:	89a3      	ldrh	r3, [r4, #12]
 800f1de:	d106      	bne.n	800f1ee <__sflush_r+0x66>
 800f1e0:	6829      	ldr	r1, [r5, #0]
 800f1e2:	291d      	cmp	r1, #29
 800f1e4:	d82c      	bhi.n	800f240 <__sflush_r+0xb8>
 800f1e6:	4a2a      	ldr	r2, [pc, #168]	; (800f290 <__sflush_r+0x108>)
 800f1e8:	40ca      	lsrs	r2, r1
 800f1ea:	07d6      	lsls	r6, r2, #31
 800f1ec:	d528      	bpl.n	800f240 <__sflush_r+0xb8>
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	6062      	str	r2, [r4, #4]
 800f1f2:	6922      	ldr	r2, [r4, #16]
 800f1f4:	04d9      	lsls	r1, r3, #19
 800f1f6:	6022      	str	r2, [r4, #0]
 800f1f8:	d504      	bpl.n	800f204 <__sflush_r+0x7c>
 800f1fa:	1c42      	adds	r2, r0, #1
 800f1fc:	d101      	bne.n	800f202 <__sflush_r+0x7a>
 800f1fe:	682b      	ldr	r3, [r5, #0]
 800f200:	b903      	cbnz	r3, 800f204 <__sflush_r+0x7c>
 800f202:	6560      	str	r0, [r4, #84]	; 0x54
 800f204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f206:	602f      	str	r7, [r5, #0]
 800f208:	2900      	cmp	r1, #0
 800f20a:	d0ca      	beq.n	800f1a2 <__sflush_r+0x1a>
 800f20c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f210:	4299      	cmp	r1, r3
 800f212:	d002      	beq.n	800f21a <__sflush_r+0x92>
 800f214:	4628      	mov	r0, r5
 800f216:	f7ff f9ef 	bl	800e5f8 <_free_r>
 800f21a:	2000      	movs	r0, #0
 800f21c:	6360      	str	r0, [r4, #52]	; 0x34
 800f21e:	e7c1      	b.n	800f1a4 <__sflush_r+0x1c>
 800f220:	6a21      	ldr	r1, [r4, #32]
 800f222:	2301      	movs	r3, #1
 800f224:	4628      	mov	r0, r5
 800f226:	47b0      	blx	r6
 800f228:	1c41      	adds	r1, r0, #1
 800f22a:	d1c7      	bne.n	800f1bc <__sflush_r+0x34>
 800f22c:	682b      	ldr	r3, [r5, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d0c4      	beq.n	800f1bc <__sflush_r+0x34>
 800f232:	2b1d      	cmp	r3, #29
 800f234:	d001      	beq.n	800f23a <__sflush_r+0xb2>
 800f236:	2b16      	cmp	r3, #22
 800f238:	d101      	bne.n	800f23e <__sflush_r+0xb6>
 800f23a:	602f      	str	r7, [r5, #0]
 800f23c:	e7b1      	b.n	800f1a2 <__sflush_r+0x1a>
 800f23e:	89a3      	ldrh	r3, [r4, #12]
 800f240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f244:	81a3      	strh	r3, [r4, #12]
 800f246:	e7ad      	b.n	800f1a4 <__sflush_r+0x1c>
 800f248:	690f      	ldr	r7, [r1, #16]
 800f24a:	2f00      	cmp	r7, #0
 800f24c:	d0a9      	beq.n	800f1a2 <__sflush_r+0x1a>
 800f24e:	0793      	lsls	r3, r2, #30
 800f250:	bf18      	it	ne
 800f252:	2300      	movne	r3, #0
 800f254:	680e      	ldr	r6, [r1, #0]
 800f256:	bf08      	it	eq
 800f258:	694b      	ldreq	r3, [r1, #20]
 800f25a:	eba6 0807 	sub.w	r8, r6, r7
 800f25e:	600f      	str	r7, [r1, #0]
 800f260:	608b      	str	r3, [r1, #8]
 800f262:	f1b8 0f00 	cmp.w	r8, #0
 800f266:	dd9c      	ble.n	800f1a2 <__sflush_r+0x1a>
 800f268:	4643      	mov	r3, r8
 800f26a:	463a      	mov	r2, r7
 800f26c:	4628      	mov	r0, r5
 800f26e:	6a21      	ldr	r1, [r4, #32]
 800f270:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f272:	47b0      	blx	r6
 800f274:	2800      	cmp	r0, #0
 800f276:	dc06      	bgt.n	800f286 <__sflush_r+0xfe>
 800f278:	89a3      	ldrh	r3, [r4, #12]
 800f27a:	f04f 30ff 	mov.w	r0, #4294967295
 800f27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f282:	81a3      	strh	r3, [r4, #12]
 800f284:	e78e      	b.n	800f1a4 <__sflush_r+0x1c>
 800f286:	4407      	add	r7, r0
 800f288:	eba8 0800 	sub.w	r8, r8, r0
 800f28c:	e7e9      	b.n	800f262 <__sflush_r+0xda>
 800f28e:	bf00      	nop
 800f290:	20400001 	.word	0x20400001

0800f294 <_fflush_r>:
 800f294:	b538      	push	{r3, r4, r5, lr}
 800f296:	690b      	ldr	r3, [r1, #16]
 800f298:	4605      	mov	r5, r0
 800f29a:	460c      	mov	r4, r1
 800f29c:	b913      	cbnz	r3, 800f2a4 <_fflush_r+0x10>
 800f29e:	2500      	movs	r5, #0
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	bd38      	pop	{r3, r4, r5, pc}
 800f2a4:	b118      	cbz	r0, 800f2ae <_fflush_r+0x1a>
 800f2a6:	6983      	ldr	r3, [r0, #24]
 800f2a8:	b90b      	cbnz	r3, 800f2ae <_fflush_r+0x1a>
 800f2aa:	f000 f887 	bl	800f3bc <__sinit>
 800f2ae:	4b14      	ldr	r3, [pc, #80]	; (800f300 <_fflush_r+0x6c>)
 800f2b0:	429c      	cmp	r4, r3
 800f2b2:	d11b      	bne.n	800f2ec <_fflush_r+0x58>
 800f2b4:	686c      	ldr	r4, [r5, #4]
 800f2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d0ef      	beq.n	800f29e <_fflush_r+0xa>
 800f2be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2c0:	07d0      	lsls	r0, r2, #31
 800f2c2:	d404      	bmi.n	800f2ce <_fflush_r+0x3a>
 800f2c4:	0599      	lsls	r1, r3, #22
 800f2c6:	d402      	bmi.n	800f2ce <_fflush_r+0x3a>
 800f2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ca:	f000 f915 	bl	800f4f8 <__retarget_lock_acquire_recursive>
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	4621      	mov	r1, r4
 800f2d2:	f7ff ff59 	bl	800f188 <__sflush_r>
 800f2d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2d8:	4605      	mov	r5, r0
 800f2da:	07da      	lsls	r2, r3, #31
 800f2dc:	d4e0      	bmi.n	800f2a0 <_fflush_r+0xc>
 800f2de:	89a3      	ldrh	r3, [r4, #12]
 800f2e0:	059b      	lsls	r3, r3, #22
 800f2e2:	d4dd      	bmi.n	800f2a0 <_fflush_r+0xc>
 800f2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2e6:	f000 f908 	bl	800f4fa <__retarget_lock_release_recursive>
 800f2ea:	e7d9      	b.n	800f2a0 <_fflush_r+0xc>
 800f2ec:	4b05      	ldr	r3, [pc, #20]	; (800f304 <_fflush_r+0x70>)
 800f2ee:	429c      	cmp	r4, r3
 800f2f0:	d101      	bne.n	800f2f6 <_fflush_r+0x62>
 800f2f2:	68ac      	ldr	r4, [r5, #8]
 800f2f4:	e7df      	b.n	800f2b6 <_fflush_r+0x22>
 800f2f6:	4b04      	ldr	r3, [pc, #16]	; (800f308 <_fflush_r+0x74>)
 800f2f8:	429c      	cmp	r4, r3
 800f2fa:	bf08      	it	eq
 800f2fc:	68ec      	ldreq	r4, [r5, #12]
 800f2fe:	e7da      	b.n	800f2b6 <_fflush_r+0x22>
 800f300:	08014548 	.word	0x08014548
 800f304:	08014568 	.word	0x08014568
 800f308:	08014528 	.word	0x08014528

0800f30c <std>:
 800f30c:	2300      	movs	r3, #0
 800f30e:	b510      	push	{r4, lr}
 800f310:	4604      	mov	r4, r0
 800f312:	e9c0 3300 	strd	r3, r3, [r0]
 800f316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f31a:	6083      	str	r3, [r0, #8]
 800f31c:	8181      	strh	r1, [r0, #12]
 800f31e:	6643      	str	r3, [r0, #100]	; 0x64
 800f320:	81c2      	strh	r2, [r0, #14]
 800f322:	6183      	str	r3, [r0, #24]
 800f324:	4619      	mov	r1, r3
 800f326:	2208      	movs	r2, #8
 800f328:	305c      	adds	r0, #92	; 0x5c
 800f32a:	f7ff f8c5 	bl	800e4b8 <memset>
 800f32e:	4b05      	ldr	r3, [pc, #20]	; (800f344 <std+0x38>)
 800f330:	6224      	str	r4, [r4, #32]
 800f332:	6263      	str	r3, [r4, #36]	; 0x24
 800f334:	4b04      	ldr	r3, [pc, #16]	; (800f348 <std+0x3c>)
 800f336:	62a3      	str	r3, [r4, #40]	; 0x28
 800f338:	4b04      	ldr	r3, [pc, #16]	; (800f34c <std+0x40>)
 800f33a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f33c:	4b04      	ldr	r3, [pc, #16]	; (800f350 <std+0x44>)
 800f33e:	6323      	str	r3, [r4, #48]	; 0x30
 800f340:	bd10      	pop	{r4, pc}
 800f342:	bf00      	nop
 800f344:	0800f71d 	.word	0x0800f71d
 800f348:	0800f73f 	.word	0x0800f73f
 800f34c:	0800f777 	.word	0x0800f777
 800f350:	0800f79b 	.word	0x0800f79b

0800f354 <_cleanup_r>:
 800f354:	4901      	ldr	r1, [pc, #4]	; (800f35c <_cleanup_r+0x8>)
 800f356:	f000 b8af 	b.w	800f4b8 <_fwalk_reent>
 800f35a:	bf00      	nop
 800f35c:	0800f295 	.word	0x0800f295

0800f360 <__sfmoreglue>:
 800f360:	b570      	push	{r4, r5, r6, lr}
 800f362:	2568      	movs	r5, #104	; 0x68
 800f364:	1e4a      	subs	r2, r1, #1
 800f366:	4355      	muls	r5, r2
 800f368:	460e      	mov	r6, r1
 800f36a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f36e:	f7ff f98f 	bl	800e690 <_malloc_r>
 800f372:	4604      	mov	r4, r0
 800f374:	b140      	cbz	r0, 800f388 <__sfmoreglue+0x28>
 800f376:	2100      	movs	r1, #0
 800f378:	e9c0 1600 	strd	r1, r6, [r0]
 800f37c:	300c      	adds	r0, #12
 800f37e:	60a0      	str	r0, [r4, #8]
 800f380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f384:	f7ff f898 	bl	800e4b8 <memset>
 800f388:	4620      	mov	r0, r4
 800f38a:	bd70      	pop	{r4, r5, r6, pc}

0800f38c <__sfp_lock_acquire>:
 800f38c:	4801      	ldr	r0, [pc, #4]	; (800f394 <__sfp_lock_acquire+0x8>)
 800f38e:	f000 b8b3 	b.w	800f4f8 <__retarget_lock_acquire_recursive>
 800f392:	bf00      	nop
 800f394:	200017bc 	.word	0x200017bc

0800f398 <__sfp_lock_release>:
 800f398:	4801      	ldr	r0, [pc, #4]	; (800f3a0 <__sfp_lock_release+0x8>)
 800f39a:	f000 b8ae 	b.w	800f4fa <__retarget_lock_release_recursive>
 800f39e:	bf00      	nop
 800f3a0:	200017bc 	.word	0x200017bc

0800f3a4 <__sinit_lock_acquire>:
 800f3a4:	4801      	ldr	r0, [pc, #4]	; (800f3ac <__sinit_lock_acquire+0x8>)
 800f3a6:	f000 b8a7 	b.w	800f4f8 <__retarget_lock_acquire_recursive>
 800f3aa:	bf00      	nop
 800f3ac:	200017b7 	.word	0x200017b7

0800f3b0 <__sinit_lock_release>:
 800f3b0:	4801      	ldr	r0, [pc, #4]	; (800f3b8 <__sinit_lock_release+0x8>)
 800f3b2:	f000 b8a2 	b.w	800f4fa <__retarget_lock_release_recursive>
 800f3b6:	bf00      	nop
 800f3b8:	200017b7 	.word	0x200017b7

0800f3bc <__sinit>:
 800f3bc:	b510      	push	{r4, lr}
 800f3be:	4604      	mov	r4, r0
 800f3c0:	f7ff fff0 	bl	800f3a4 <__sinit_lock_acquire>
 800f3c4:	69a3      	ldr	r3, [r4, #24]
 800f3c6:	b11b      	cbz	r3, 800f3d0 <__sinit+0x14>
 800f3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3cc:	f7ff bff0 	b.w	800f3b0 <__sinit_lock_release>
 800f3d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f3d4:	6523      	str	r3, [r4, #80]	; 0x50
 800f3d6:	4b13      	ldr	r3, [pc, #76]	; (800f424 <__sinit+0x68>)
 800f3d8:	4a13      	ldr	r2, [pc, #76]	; (800f428 <__sinit+0x6c>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f3de:	42a3      	cmp	r3, r4
 800f3e0:	bf08      	it	eq
 800f3e2:	2301      	moveq	r3, #1
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	bf08      	it	eq
 800f3e8:	61a3      	streq	r3, [r4, #24]
 800f3ea:	f000 f81f 	bl	800f42c <__sfp>
 800f3ee:	6060      	str	r0, [r4, #4]
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f000 f81b 	bl	800f42c <__sfp>
 800f3f6:	60a0      	str	r0, [r4, #8]
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	f000 f817 	bl	800f42c <__sfp>
 800f3fe:	2200      	movs	r2, #0
 800f400:	2104      	movs	r1, #4
 800f402:	60e0      	str	r0, [r4, #12]
 800f404:	6860      	ldr	r0, [r4, #4]
 800f406:	f7ff ff81 	bl	800f30c <std>
 800f40a:	2201      	movs	r2, #1
 800f40c:	2109      	movs	r1, #9
 800f40e:	68a0      	ldr	r0, [r4, #8]
 800f410:	f7ff ff7c 	bl	800f30c <std>
 800f414:	2202      	movs	r2, #2
 800f416:	2112      	movs	r1, #18
 800f418:	68e0      	ldr	r0, [r4, #12]
 800f41a:	f7ff ff77 	bl	800f30c <std>
 800f41e:	2301      	movs	r3, #1
 800f420:	61a3      	str	r3, [r4, #24]
 800f422:	e7d1      	b.n	800f3c8 <__sinit+0xc>
 800f424:	0801443c 	.word	0x0801443c
 800f428:	0800f355 	.word	0x0800f355

0800f42c <__sfp>:
 800f42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f42e:	4607      	mov	r7, r0
 800f430:	f7ff ffac 	bl	800f38c <__sfp_lock_acquire>
 800f434:	4b1e      	ldr	r3, [pc, #120]	; (800f4b0 <__sfp+0x84>)
 800f436:	681e      	ldr	r6, [r3, #0]
 800f438:	69b3      	ldr	r3, [r6, #24]
 800f43a:	b913      	cbnz	r3, 800f442 <__sfp+0x16>
 800f43c:	4630      	mov	r0, r6
 800f43e:	f7ff ffbd 	bl	800f3bc <__sinit>
 800f442:	3648      	adds	r6, #72	; 0x48
 800f444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f448:	3b01      	subs	r3, #1
 800f44a:	d503      	bpl.n	800f454 <__sfp+0x28>
 800f44c:	6833      	ldr	r3, [r6, #0]
 800f44e:	b30b      	cbz	r3, 800f494 <__sfp+0x68>
 800f450:	6836      	ldr	r6, [r6, #0]
 800f452:	e7f7      	b.n	800f444 <__sfp+0x18>
 800f454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f458:	b9d5      	cbnz	r5, 800f490 <__sfp+0x64>
 800f45a:	4b16      	ldr	r3, [pc, #88]	; (800f4b4 <__sfp+0x88>)
 800f45c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f460:	60e3      	str	r3, [r4, #12]
 800f462:	6665      	str	r5, [r4, #100]	; 0x64
 800f464:	f000 f847 	bl	800f4f6 <__retarget_lock_init_recursive>
 800f468:	f7ff ff96 	bl	800f398 <__sfp_lock_release>
 800f46c:	2208      	movs	r2, #8
 800f46e:	4629      	mov	r1, r5
 800f470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f478:	6025      	str	r5, [r4, #0]
 800f47a:	61a5      	str	r5, [r4, #24]
 800f47c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f480:	f7ff f81a 	bl	800e4b8 <memset>
 800f484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f48c:	4620      	mov	r0, r4
 800f48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f490:	3468      	adds	r4, #104	; 0x68
 800f492:	e7d9      	b.n	800f448 <__sfp+0x1c>
 800f494:	2104      	movs	r1, #4
 800f496:	4638      	mov	r0, r7
 800f498:	f7ff ff62 	bl	800f360 <__sfmoreglue>
 800f49c:	4604      	mov	r4, r0
 800f49e:	6030      	str	r0, [r6, #0]
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	d1d5      	bne.n	800f450 <__sfp+0x24>
 800f4a4:	f7ff ff78 	bl	800f398 <__sfp_lock_release>
 800f4a8:	230c      	movs	r3, #12
 800f4aa:	603b      	str	r3, [r7, #0]
 800f4ac:	e7ee      	b.n	800f48c <__sfp+0x60>
 800f4ae:	bf00      	nop
 800f4b0:	0801443c 	.word	0x0801443c
 800f4b4:	ffff0001 	.word	0xffff0001

0800f4b8 <_fwalk_reent>:
 800f4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4bc:	4606      	mov	r6, r0
 800f4be:	4688      	mov	r8, r1
 800f4c0:	2700      	movs	r7, #0
 800f4c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f4c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4ca:	f1b9 0901 	subs.w	r9, r9, #1
 800f4ce:	d505      	bpl.n	800f4dc <_fwalk_reent+0x24>
 800f4d0:	6824      	ldr	r4, [r4, #0]
 800f4d2:	2c00      	cmp	r4, #0
 800f4d4:	d1f7      	bne.n	800f4c6 <_fwalk_reent+0xe>
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4dc:	89ab      	ldrh	r3, [r5, #12]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d907      	bls.n	800f4f2 <_fwalk_reent+0x3a>
 800f4e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	d003      	beq.n	800f4f2 <_fwalk_reent+0x3a>
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	4630      	mov	r0, r6
 800f4ee:	47c0      	blx	r8
 800f4f0:	4307      	orrs	r7, r0
 800f4f2:	3568      	adds	r5, #104	; 0x68
 800f4f4:	e7e9      	b.n	800f4ca <_fwalk_reent+0x12>

0800f4f6 <__retarget_lock_init_recursive>:
 800f4f6:	4770      	bx	lr

0800f4f8 <__retarget_lock_acquire_recursive>:
 800f4f8:	4770      	bx	lr

0800f4fa <__retarget_lock_release_recursive>:
 800f4fa:	4770      	bx	lr

0800f4fc <__swhatbuf_r>:
 800f4fc:	b570      	push	{r4, r5, r6, lr}
 800f4fe:	460e      	mov	r6, r1
 800f500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f504:	4614      	mov	r4, r2
 800f506:	2900      	cmp	r1, #0
 800f508:	461d      	mov	r5, r3
 800f50a:	b096      	sub	sp, #88	; 0x58
 800f50c:	da07      	bge.n	800f51e <__swhatbuf_r+0x22>
 800f50e:	2300      	movs	r3, #0
 800f510:	602b      	str	r3, [r5, #0]
 800f512:	89b3      	ldrh	r3, [r6, #12]
 800f514:	061a      	lsls	r2, r3, #24
 800f516:	d410      	bmi.n	800f53a <__swhatbuf_r+0x3e>
 800f518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f51c:	e00e      	b.n	800f53c <__swhatbuf_r+0x40>
 800f51e:	466a      	mov	r2, sp
 800f520:	f000 f962 	bl	800f7e8 <_fstat_r>
 800f524:	2800      	cmp	r0, #0
 800f526:	dbf2      	blt.n	800f50e <__swhatbuf_r+0x12>
 800f528:	9a01      	ldr	r2, [sp, #4]
 800f52a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f52e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f532:	425a      	negs	r2, r3
 800f534:	415a      	adcs	r2, r3
 800f536:	602a      	str	r2, [r5, #0]
 800f538:	e7ee      	b.n	800f518 <__swhatbuf_r+0x1c>
 800f53a:	2340      	movs	r3, #64	; 0x40
 800f53c:	2000      	movs	r0, #0
 800f53e:	6023      	str	r3, [r4, #0]
 800f540:	b016      	add	sp, #88	; 0x58
 800f542:	bd70      	pop	{r4, r5, r6, pc}

0800f544 <__smakebuf_r>:
 800f544:	898b      	ldrh	r3, [r1, #12]
 800f546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f548:	079d      	lsls	r5, r3, #30
 800f54a:	4606      	mov	r6, r0
 800f54c:	460c      	mov	r4, r1
 800f54e:	d507      	bpl.n	800f560 <__smakebuf_r+0x1c>
 800f550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f554:	6023      	str	r3, [r4, #0]
 800f556:	6123      	str	r3, [r4, #16]
 800f558:	2301      	movs	r3, #1
 800f55a:	6163      	str	r3, [r4, #20]
 800f55c:	b002      	add	sp, #8
 800f55e:	bd70      	pop	{r4, r5, r6, pc}
 800f560:	466a      	mov	r2, sp
 800f562:	ab01      	add	r3, sp, #4
 800f564:	f7ff ffca 	bl	800f4fc <__swhatbuf_r>
 800f568:	9900      	ldr	r1, [sp, #0]
 800f56a:	4605      	mov	r5, r0
 800f56c:	4630      	mov	r0, r6
 800f56e:	f7ff f88f 	bl	800e690 <_malloc_r>
 800f572:	b948      	cbnz	r0, 800f588 <__smakebuf_r+0x44>
 800f574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f578:	059a      	lsls	r2, r3, #22
 800f57a:	d4ef      	bmi.n	800f55c <__smakebuf_r+0x18>
 800f57c:	f023 0303 	bic.w	r3, r3, #3
 800f580:	f043 0302 	orr.w	r3, r3, #2
 800f584:	81a3      	strh	r3, [r4, #12]
 800f586:	e7e3      	b.n	800f550 <__smakebuf_r+0xc>
 800f588:	4b0d      	ldr	r3, [pc, #52]	; (800f5c0 <__smakebuf_r+0x7c>)
 800f58a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	6020      	str	r0, [r4, #0]
 800f590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f594:	81a3      	strh	r3, [r4, #12]
 800f596:	9b00      	ldr	r3, [sp, #0]
 800f598:	6120      	str	r0, [r4, #16]
 800f59a:	6163      	str	r3, [r4, #20]
 800f59c:	9b01      	ldr	r3, [sp, #4]
 800f59e:	b15b      	cbz	r3, 800f5b8 <__smakebuf_r+0x74>
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5a6:	f000 f931 	bl	800f80c <_isatty_r>
 800f5aa:	b128      	cbz	r0, 800f5b8 <__smakebuf_r+0x74>
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	f023 0303 	bic.w	r3, r3, #3
 800f5b2:	f043 0301 	orr.w	r3, r3, #1
 800f5b6:	81a3      	strh	r3, [r4, #12]
 800f5b8:	89a0      	ldrh	r0, [r4, #12]
 800f5ba:	4305      	orrs	r5, r0
 800f5bc:	81a5      	strh	r5, [r4, #12]
 800f5be:	e7cd      	b.n	800f55c <__smakebuf_r+0x18>
 800f5c0:	0800f355 	.word	0x0800f355

0800f5c4 <memchr>:
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	b510      	push	{r4, lr}
 800f5c8:	b2c9      	uxtb	r1, r1
 800f5ca:	4402      	add	r2, r0
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	d101      	bne.n	800f5d6 <memchr+0x12>
 800f5d2:	2000      	movs	r0, #0
 800f5d4:	e003      	b.n	800f5de <memchr+0x1a>
 800f5d6:	7804      	ldrb	r4, [r0, #0]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	428c      	cmp	r4, r1
 800f5dc:	d1f6      	bne.n	800f5cc <memchr+0x8>
 800f5de:	bd10      	pop	{r4, pc}

0800f5e0 <memcpy>:
 800f5e0:	440a      	add	r2, r1
 800f5e2:	4291      	cmp	r1, r2
 800f5e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5e8:	d100      	bne.n	800f5ec <memcpy+0xc>
 800f5ea:	4770      	bx	lr
 800f5ec:	b510      	push	{r4, lr}
 800f5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5f2:	4291      	cmp	r1, r2
 800f5f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5f8:	d1f9      	bne.n	800f5ee <memcpy+0xe>
 800f5fa:	bd10      	pop	{r4, pc}

0800f5fc <memmove>:
 800f5fc:	4288      	cmp	r0, r1
 800f5fe:	b510      	push	{r4, lr}
 800f600:	eb01 0402 	add.w	r4, r1, r2
 800f604:	d902      	bls.n	800f60c <memmove+0x10>
 800f606:	4284      	cmp	r4, r0
 800f608:	4623      	mov	r3, r4
 800f60a:	d807      	bhi.n	800f61c <memmove+0x20>
 800f60c:	1e43      	subs	r3, r0, #1
 800f60e:	42a1      	cmp	r1, r4
 800f610:	d008      	beq.n	800f624 <memmove+0x28>
 800f612:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f61a:	e7f8      	b.n	800f60e <memmove+0x12>
 800f61c:	4601      	mov	r1, r0
 800f61e:	4402      	add	r2, r0
 800f620:	428a      	cmp	r2, r1
 800f622:	d100      	bne.n	800f626 <memmove+0x2a>
 800f624:	bd10      	pop	{r4, pc}
 800f626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f62a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f62e:	e7f7      	b.n	800f620 <memmove+0x24>

0800f630 <__malloc_lock>:
 800f630:	4801      	ldr	r0, [pc, #4]	; (800f638 <__malloc_lock+0x8>)
 800f632:	f7ff bf61 	b.w	800f4f8 <__retarget_lock_acquire_recursive>
 800f636:	bf00      	nop
 800f638:	200017b8 	.word	0x200017b8

0800f63c <__malloc_unlock>:
 800f63c:	4801      	ldr	r0, [pc, #4]	; (800f644 <__malloc_unlock+0x8>)
 800f63e:	f7ff bf5c 	b.w	800f4fa <__retarget_lock_release_recursive>
 800f642:	bf00      	nop
 800f644:	200017b8 	.word	0x200017b8

0800f648 <_realloc_r>:
 800f648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64a:	4607      	mov	r7, r0
 800f64c:	4614      	mov	r4, r2
 800f64e:	460e      	mov	r6, r1
 800f650:	b921      	cbnz	r1, 800f65c <_realloc_r+0x14>
 800f652:	4611      	mov	r1, r2
 800f654:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f658:	f7ff b81a 	b.w	800e690 <_malloc_r>
 800f65c:	b922      	cbnz	r2, 800f668 <_realloc_r+0x20>
 800f65e:	f7fe ffcb 	bl	800e5f8 <_free_r>
 800f662:	4625      	mov	r5, r4
 800f664:	4628      	mov	r0, r5
 800f666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f668:	f000 f8f2 	bl	800f850 <_malloc_usable_size_r>
 800f66c:	42a0      	cmp	r0, r4
 800f66e:	d20f      	bcs.n	800f690 <_realloc_r+0x48>
 800f670:	4621      	mov	r1, r4
 800f672:	4638      	mov	r0, r7
 800f674:	f7ff f80c 	bl	800e690 <_malloc_r>
 800f678:	4605      	mov	r5, r0
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d0f2      	beq.n	800f664 <_realloc_r+0x1c>
 800f67e:	4631      	mov	r1, r6
 800f680:	4622      	mov	r2, r4
 800f682:	f7ff ffad 	bl	800f5e0 <memcpy>
 800f686:	4631      	mov	r1, r6
 800f688:	4638      	mov	r0, r7
 800f68a:	f7fe ffb5 	bl	800e5f8 <_free_r>
 800f68e:	e7e9      	b.n	800f664 <_realloc_r+0x1c>
 800f690:	4635      	mov	r5, r6
 800f692:	e7e7      	b.n	800f664 <_realloc_r+0x1c>

0800f694 <_raise_r>:
 800f694:	291f      	cmp	r1, #31
 800f696:	b538      	push	{r3, r4, r5, lr}
 800f698:	4604      	mov	r4, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	d904      	bls.n	800f6a8 <_raise_r+0x14>
 800f69e:	2316      	movs	r3, #22
 800f6a0:	6003      	str	r3, [r0, #0]
 800f6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a6:	bd38      	pop	{r3, r4, r5, pc}
 800f6a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f6aa:	b112      	cbz	r2, 800f6b2 <_raise_r+0x1e>
 800f6ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6b0:	b94b      	cbnz	r3, 800f6c6 <_raise_r+0x32>
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f000 f830 	bl	800f718 <_getpid_r>
 800f6b8:	462a      	mov	r2, r5
 800f6ba:	4601      	mov	r1, r0
 800f6bc:	4620      	mov	r0, r4
 800f6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6c2:	f000 b817 	b.w	800f6f4 <_kill_r>
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d00a      	beq.n	800f6e0 <_raise_r+0x4c>
 800f6ca:	1c59      	adds	r1, r3, #1
 800f6cc:	d103      	bne.n	800f6d6 <_raise_r+0x42>
 800f6ce:	2316      	movs	r3, #22
 800f6d0:	6003      	str	r3, [r0, #0]
 800f6d2:	2001      	movs	r0, #1
 800f6d4:	e7e7      	b.n	800f6a6 <_raise_r+0x12>
 800f6d6:	2400      	movs	r4, #0
 800f6d8:	4628      	mov	r0, r5
 800f6da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f6de:	4798      	blx	r3
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	e7e0      	b.n	800f6a6 <_raise_r+0x12>

0800f6e4 <raise>:
 800f6e4:	4b02      	ldr	r3, [pc, #8]	; (800f6f0 <raise+0xc>)
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	6818      	ldr	r0, [r3, #0]
 800f6ea:	f7ff bfd3 	b.w	800f694 <_raise_r>
 800f6ee:	bf00      	nop
 800f6f0:	20000018 	.word	0x20000018

0800f6f4 <_kill_r>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	4d06      	ldr	r5, [pc, #24]	; (800f714 <_kill_r+0x20>)
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	4608      	mov	r0, r1
 800f6fe:	4611      	mov	r1, r2
 800f700:	602b      	str	r3, [r5, #0]
 800f702:	f7f2 fe06 	bl	8002312 <_kill>
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	d102      	bne.n	800f710 <_kill_r+0x1c>
 800f70a:	682b      	ldr	r3, [r5, #0]
 800f70c:	b103      	cbz	r3, 800f710 <_kill_r+0x1c>
 800f70e:	6023      	str	r3, [r4, #0]
 800f710:	bd38      	pop	{r3, r4, r5, pc}
 800f712:	bf00      	nop
 800f714:	200017c0 	.word	0x200017c0

0800f718 <_getpid_r>:
 800f718:	f7f2 bdf4 	b.w	8002304 <_getpid>

0800f71c <__sread>:
 800f71c:	b510      	push	{r4, lr}
 800f71e:	460c      	mov	r4, r1
 800f720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f724:	f000 f89c 	bl	800f860 <_read_r>
 800f728:	2800      	cmp	r0, #0
 800f72a:	bfab      	itete	ge
 800f72c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f72e:	89a3      	ldrhlt	r3, [r4, #12]
 800f730:	181b      	addge	r3, r3, r0
 800f732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f736:	bfac      	ite	ge
 800f738:	6563      	strge	r3, [r4, #84]	; 0x54
 800f73a:	81a3      	strhlt	r3, [r4, #12]
 800f73c:	bd10      	pop	{r4, pc}

0800f73e <__swrite>:
 800f73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f742:	461f      	mov	r7, r3
 800f744:	898b      	ldrh	r3, [r1, #12]
 800f746:	4605      	mov	r5, r0
 800f748:	05db      	lsls	r3, r3, #23
 800f74a:	460c      	mov	r4, r1
 800f74c:	4616      	mov	r6, r2
 800f74e:	d505      	bpl.n	800f75c <__swrite+0x1e>
 800f750:	2302      	movs	r3, #2
 800f752:	2200      	movs	r2, #0
 800f754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f758:	f000 f868 	bl	800f82c <_lseek_r>
 800f75c:	89a3      	ldrh	r3, [r4, #12]
 800f75e:	4632      	mov	r2, r6
 800f760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f764:	81a3      	strh	r3, [r4, #12]
 800f766:	4628      	mov	r0, r5
 800f768:	463b      	mov	r3, r7
 800f76a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f772:	f000 b817 	b.w	800f7a4 <_write_r>

0800f776 <__sseek>:
 800f776:	b510      	push	{r4, lr}
 800f778:	460c      	mov	r4, r1
 800f77a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f77e:	f000 f855 	bl	800f82c <_lseek_r>
 800f782:	1c43      	adds	r3, r0, #1
 800f784:	89a3      	ldrh	r3, [r4, #12]
 800f786:	bf15      	itete	ne
 800f788:	6560      	strne	r0, [r4, #84]	; 0x54
 800f78a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f78e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f792:	81a3      	strheq	r3, [r4, #12]
 800f794:	bf18      	it	ne
 800f796:	81a3      	strhne	r3, [r4, #12]
 800f798:	bd10      	pop	{r4, pc}

0800f79a <__sclose>:
 800f79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f79e:	f000 b813 	b.w	800f7c8 <_close_r>
	...

0800f7a4 <_write_r>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	4608      	mov	r0, r1
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	4d05      	ldr	r5, [pc, #20]	; (800f7c4 <_write_r+0x20>)
 800f7b0:	602a      	str	r2, [r5, #0]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	f7f2 fde4 	bl	8002380 <_write>
 800f7b8:	1c43      	adds	r3, r0, #1
 800f7ba:	d102      	bne.n	800f7c2 <_write_r+0x1e>
 800f7bc:	682b      	ldr	r3, [r5, #0]
 800f7be:	b103      	cbz	r3, 800f7c2 <_write_r+0x1e>
 800f7c0:	6023      	str	r3, [r4, #0]
 800f7c2:	bd38      	pop	{r3, r4, r5, pc}
 800f7c4:	200017c0 	.word	0x200017c0

0800f7c8 <_close_r>:
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	4d05      	ldr	r5, [pc, #20]	; (800f7e4 <_close_r+0x1c>)
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	4608      	mov	r0, r1
 800f7d2:	602b      	str	r3, [r5, #0]
 800f7d4:	f7f2 fdf0 	bl	80023b8 <_close>
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	d102      	bne.n	800f7e2 <_close_r+0x1a>
 800f7dc:	682b      	ldr	r3, [r5, #0]
 800f7de:	b103      	cbz	r3, 800f7e2 <_close_r+0x1a>
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	bd38      	pop	{r3, r4, r5, pc}
 800f7e4:	200017c0 	.word	0x200017c0

0800f7e8 <_fstat_r>:
 800f7e8:	b538      	push	{r3, r4, r5, lr}
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	4d06      	ldr	r5, [pc, #24]	; (800f808 <_fstat_r+0x20>)
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	4608      	mov	r0, r1
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	602b      	str	r3, [r5, #0]
 800f7f6:	f7f2 fdea 	bl	80023ce <_fstat>
 800f7fa:	1c43      	adds	r3, r0, #1
 800f7fc:	d102      	bne.n	800f804 <_fstat_r+0x1c>
 800f7fe:	682b      	ldr	r3, [r5, #0]
 800f800:	b103      	cbz	r3, 800f804 <_fstat_r+0x1c>
 800f802:	6023      	str	r3, [r4, #0]
 800f804:	bd38      	pop	{r3, r4, r5, pc}
 800f806:	bf00      	nop
 800f808:	200017c0 	.word	0x200017c0

0800f80c <_isatty_r>:
 800f80c:	b538      	push	{r3, r4, r5, lr}
 800f80e:	2300      	movs	r3, #0
 800f810:	4d05      	ldr	r5, [pc, #20]	; (800f828 <_isatty_r+0x1c>)
 800f812:	4604      	mov	r4, r0
 800f814:	4608      	mov	r0, r1
 800f816:	602b      	str	r3, [r5, #0]
 800f818:	f7f2 fde8 	bl	80023ec <_isatty>
 800f81c:	1c43      	adds	r3, r0, #1
 800f81e:	d102      	bne.n	800f826 <_isatty_r+0x1a>
 800f820:	682b      	ldr	r3, [r5, #0]
 800f822:	b103      	cbz	r3, 800f826 <_isatty_r+0x1a>
 800f824:	6023      	str	r3, [r4, #0]
 800f826:	bd38      	pop	{r3, r4, r5, pc}
 800f828:	200017c0 	.word	0x200017c0

0800f82c <_lseek_r>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4604      	mov	r4, r0
 800f830:	4608      	mov	r0, r1
 800f832:	4611      	mov	r1, r2
 800f834:	2200      	movs	r2, #0
 800f836:	4d05      	ldr	r5, [pc, #20]	; (800f84c <_lseek_r+0x20>)
 800f838:	602a      	str	r2, [r5, #0]
 800f83a:	461a      	mov	r2, r3
 800f83c:	f7f2 fde0 	bl	8002400 <_lseek>
 800f840:	1c43      	adds	r3, r0, #1
 800f842:	d102      	bne.n	800f84a <_lseek_r+0x1e>
 800f844:	682b      	ldr	r3, [r5, #0]
 800f846:	b103      	cbz	r3, 800f84a <_lseek_r+0x1e>
 800f848:	6023      	str	r3, [r4, #0]
 800f84a:	bd38      	pop	{r3, r4, r5, pc}
 800f84c:	200017c0 	.word	0x200017c0

0800f850 <_malloc_usable_size_r>:
 800f850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f854:	1f18      	subs	r0, r3, #4
 800f856:	2b00      	cmp	r3, #0
 800f858:	bfbc      	itt	lt
 800f85a:	580b      	ldrlt	r3, [r1, r0]
 800f85c:	18c0      	addlt	r0, r0, r3
 800f85e:	4770      	bx	lr

0800f860 <_read_r>:
 800f860:	b538      	push	{r3, r4, r5, lr}
 800f862:	4604      	mov	r4, r0
 800f864:	4608      	mov	r0, r1
 800f866:	4611      	mov	r1, r2
 800f868:	2200      	movs	r2, #0
 800f86a:	4d05      	ldr	r5, [pc, #20]	; (800f880 <_read_r+0x20>)
 800f86c:	602a      	str	r2, [r5, #0]
 800f86e:	461a      	mov	r2, r3
 800f870:	f7f2 fd69 	bl	8002346 <_read>
 800f874:	1c43      	adds	r3, r0, #1
 800f876:	d102      	bne.n	800f87e <_read_r+0x1e>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	b103      	cbz	r3, 800f87e <_read_r+0x1e>
 800f87c:	6023      	str	r3, [r4, #0]
 800f87e:	bd38      	pop	{r3, r4, r5, pc}
 800f880:	200017c0 	.word	0x200017c0

0800f884 <_init>:
 800f884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f886:	bf00      	nop
 800f888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f88a:	bc08      	pop	{r3}
 800f88c:	469e      	mov	lr, r3
 800f88e:	4770      	bx	lr

0800f890 <_fini>:
 800f890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f892:	bf00      	nop
 800f894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f896:	bc08      	pop	{r3}
 800f898:	469e      	mov	lr, r3
 800f89a:	4770      	bx	lr
